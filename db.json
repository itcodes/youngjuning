{
  "meta": { "version": 1, "warehouse": "3.0.1" },
  "models": {
    "Asset": [
      { "_id": "source/CNAME", "path": "CNAME", "modified": 0, "renderable": 0 },
      { "_id": "source/README.md", "path": "README.md", "modified": 0, "renderable": 0 },
      { "_id": "themes/next/source/css/main.styl", "path": "css/main.styl", "modified": 0, "renderable": 1 },
      {
        "_id": "themes/next/source/images/apple-touch-icon-next.png",
        "path": "images/apple-touch-icon-next.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/next/source/images/algolia_logo.svg",
        "path": "images/algolia_logo.svg",
        "modified": 0,
        "renderable": 1
      },
      { "_id": "themes/next/source/images/avatar.gif", "path": "images/avatar.gif", "modified": 0, "renderable": 1 },
      {
        "_id": "themes/next/source/images/cc-by-nc-nd.svg",
        "path": "images/cc-by-nc-nd.svg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/next/source/images/cc-by-nc-sa.svg",
        "path": "images/cc-by-nc-sa.svg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/next/source/images/cc-by-nc.svg",
        "path": "images/cc-by-nc.svg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/next/source/images/cc-by-nd.svg",
        "path": "images/cc-by-nd.svg",
        "modified": 0,
        "renderable": 1
      },
      { "_id": "themes/next/source/images/cc-by.svg", "path": "images/cc-by.svg", "modified": 0, "renderable": 1 },
      {
        "_id": "themes/next/source/images/cc-by-sa.svg",
        "path": "images/cc-by-sa.svg",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/next/source/images/favicon-16x16-next.png",
        "path": "images/favicon-16x16-next.png",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/next/source/images/favicon-32x32-next.png",
        "path": "images/favicon-32x32-next.png",
        "modified": 0,
        "renderable": 1
      },
      { "_id": "themes/next/source/images/cc-zero.svg", "path": "images/cc-zero.svg", "modified": 0, "renderable": 1 },
      { "_id": "themes/next/source/images/logo.svg", "path": "images/logo.svg", "modified": 0, "renderable": 1 },
      { "_id": "themes/next/source/images/quote-l.svg", "path": "images/quote-l.svg", "modified": 0, "renderable": 1 },
      { "_id": "themes/next/source/images/quote-r.svg", "path": "images/quote-r.svg", "modified": 0, "renderable": 1 },
      { "_id": "themes/next/source/js/bookmark.js", "path": "js/bookmark.js", "modified": 0, "renderable": 1 },
      { "_id": "themes/next/source/js/next-boot.js", "path": "js/next-boot.js", "modified": 0, "renderable": 1 },
      {
        "_id": "themes/next/source/js/algolia-search.js",
        "path": "js/algolia-search.js",
        "modified": 0,
        "renderable": 1
      },
      { "_id": "themes/next/source/js/utils.js", "path": "js/utils.js", "modified": 0, "renderable": 1 },
      { "_id": "themes/next/source/js/motion.js", "path": "js/motion.js", "modified": 0, "renderable": 1 },
      { "_id": "themes/next/source/js/local-search.js", "path": "js/local-search.js", "modified": 0, "renderable": 1 },
      { "_id": "themes/next/source/lib/anime.min.js", "path": "lib/anime.min.js", "modified": 0, "renderable": 1 },
      {
        "_id": "themes/next/source/js/schemes/pisces.js",
        "path": "js/schemes/pisces.js",
        "modified": 0,
        "renderable": 1
      },
      { "_id": "themes/next/source/js/schemes/muse.js", "path": "js/schemes/muse.js", "modified": 0, "renderable": 1 },
      {
        "_id": "themes/next/source/lib/font-awesome/bower.json",
        "path": "lib/font-awesome/bower.json",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/next/source/lib/font-awesome/HELP-US-OUT.txt",
        "path": "lib/font-awesome/HELP-US-OUT.txt",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/next/source/lib/velocity/velocity.min.js",
        "path": "lib/velocity/velocity.min.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/next/source/lib/velocity/velocity.ui.min.js",
        "path": "lib/velocity/velocity.ui.min.js",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/next/source/lib/font-awesome/css/font-awesome.css",
        "path": "lib/font-awesome/css/font-awesome.css",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/next/source/lib/font-awesome/css/font-awesome.css.map",
        "path": "lib/font-awesome/css/font-awesome.css.map",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/next/source/lib/font-awesome/css/font-awesome.min.css",
        "path": "lib/font-awesome/css/font-awesome.min.css",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff",
        "path": "lib/font-awesome/fonts/fontawesome-webfont.woff",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2",
        "path": "lib/font-awesome/fonts/fontawesome-webfont.woff2",
        "modified": 0,
        "renderable": 1
      },
      {
        "_id": "themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot",
        "path": "lib/font-awesome/fonts/fontawesome-webfont.eot",
        "modified": 0,
        "renderable": 1
      }
    ],
    "Cache": [
      { "_id": "source/.DS_Store", "hash": "7e0ed4144b7ceb7a7af6cb0d2d92d37eeed2f9c7", "modified": 1580882963101 },
      { "_id": "source/CNAME", "hash": "69a9f7bba2596b5e05e5956e1148a2ed114f9c87", "modified": 1577503080633 },
      { "_id": "source/README.md", "hash": "23ce087edc7df0baa2029af143f339ac2e2a9723", "modified": 1577502311263 },
      {
        "_id": "themes/next/.editorconfig",
        "hash": "8570735a8d8d034a3a175afd1dd40b39140b3e6a",
        "modified": 1577515674308
      },
      {
        "_id": "themes/next/.eslintrc.json",
        "hash": "cc5f297f0322672fe3f684f823bc4659e4a54c41",
        "modified": 1577515674308
      },
      {
        "_id": "themes/next/.gitattributes",
        "hash": "a54f902957d49356376b59287b894b1a3d7a003f",
        "modified": 1577515674308
      },
      {
        "_id": "themes/next/.gitignore",
        "hash": "7b68ca7a46104cf9aa84ec0541a4856ab1836eca",
        "modified": 1577515674311
      },
      {
        "_id": "themes/next/_config.yml",
        "hash": "26c910b398a30cc3651e17a84093afd0b3bc8d0a",
        "modified": 1580885745286
      },
      {
        "_id": "themes/next/.stylintrc",
        "hash": "2cf4d637b56d8eb423f59656a11f6403aa90f550",
        "modified": 1577515674311
      },
      {
        "_id": "themes/next/.travis.yml",
        "hash": "ecca3b919a5b15886e3eca58aa84aafc395590da",
        "modified": 1577515674311
      },
      { "_id": "themes/next/README.md", "hash": "dc026053a4d9fb97a58dbc3e9060e480f6852b23", "modified": 1577515674312 },
      {
        "_id": "themes/next/LICENSE.md",
        "hash": "18144d8ed58c75af66cb419d54f3f63374cd5c5b",
        "modified": 1577515674312
      },
      {
        "_id": "themes/next/crowdin.yml",
        "hash": "e026078448c77dcdd9ef50256bb6635a8f83dca6",
        "modified": 1577515674312
      },
      {
        "_id": "themes/next/gulpfile.js",
        "hash": "72e6d5a6e32d5f95d82e4c4d0c963d39555bb760",
        "modified": 1577515674316
      },
      {
        "_id": "themes/next/package.json",
        "hash": "213bd6ff96a027f5db6d1ce966a2cc75499a3e10",
        "modified": 1580695389848
      },
      {
        "_id": "source/_drafts/reviewe-2019.md",
        "hash": "8aad6869106af47e007283f8814d7240f8f81fdf",
        "modified": 1578542661276
      },
      {
        "_id": "source/_drafts/ying-yang-su-ji-chu-zhishi.md",
        "hash": "5dae05651b25af1fdd3e741f7196cc76e23e62a2",
        "modified": 1580814690503
      },
      {
        "_id": "source/_posts/ES标准中相等比较算法SameValue和SameValueZero.md",
        "hash": "ba37193f91e2b10718f554722c748bdfb332620b",
        "modified": 1580871042474
      },
      {
        "_id": "source/_posts/JavaScript Array 完全指南.md",
        "hash": "6e72fae3fe79cd9f81963cc86d4b1e4cdd674b28",
        "modified": 1580885184130
      },
      {
        "_id": "source/_posts/awesome-react-native.md",
        "hash": "94f2c6e79a4b1d6641b19d271f7eee5d4fd9b606",
        "modified": 1578625685547
      },
      {
        "_id": "source/_posts/react-native-scrollable-tab-view-guide.md",
        "hash": "d0a81c4659daf5017f420adb5ed51bc91977d2b6",
        "modified": 1580875154458
      },
      {
        "_id": "source/_posts/javascript-async-programming.md",
        "hash": "af22d9c5002ff6c4857ab41c419bda8b9bcbb32e",
        "modified": 1580386672893
      },
      {
        "_id": "source/_posts/javascript浅比较和深比较.md",
        "hash": "dc7667ecba0bd8315a6a9e46b7b60fb150b51236",
        "modified": 1580875451632
      },
      {
        "_id": "source/_posts/网址收藏.md",
        "hash": "17ad916a7c175a600629fc4f3a75080004089a6f",
        "modified": 1580817832282
      },
      {
        "_id": "source/_posts/use-mobx-with-react-native.md",
        "hash": "74882588a76bf37929ec09195d7ba186deb25dcf",
        "modified": 1580369437604
      },
      {
        "_id": "source/_posts/react-navigation-5-full-guide.md",
        "hash": "a89f909f79e97cde8fb9a710aeb914cd7e8e4b8e",
        "modified": 1580300734182
      },
      {
        "_id": "source/_posts/react-navigation-4-full-guide.md",
        "hash": "1310c2e9afb07e4206fe663cb3cc6e4af27660bd",
        "modified": 1580300730092
      },
      {
        "_id": "themes/next/.git/FETCH_HEAD",
        "hash": "c2a50b902b248ff016a9c358ad611f89613e900d",
        "modified": 1580885633112
      },
      {
        "_id": "themes/next/.git/config",
        "hash": "e2ca9fa6f115d4406d24bf0df53fc26ce13e0c9b",
        "modified": 1577515674304
      },
      { "_id": "themes/next/.git/HEAD", "hash": "55ef342bcfa3cdebfc07cdcca39158a236459915", "modified": 1580875128322 },
      {
        "_id": "themes/next/.git/index",
        "hash": "226cd8fe337cbaf5f9ab09d126aaacbd6ed74323",
        "modified": 1580875164373
      },
      {
        "_id": "themes/next/.git/description",
        "hash": "9635f1b7e12c045212819dd934d809ef07efa2f4",
        "modified": 1577515156444
      },
      {
        "_id": "themes/next/.git/packed-refs",
        "hash": "ec04e5f18f64b9035ce3c0801ceb24aab9b7573e",
        "modified": 1577515674300
      },
      {
        "_id": "themes/next/.git/ORIG_HEAD",
        "hash": "4d2360c9195e5141e4b9e2d245e7c5a9d2f7d9e4",
        "modified": 1580875101408
      },
      {
        "_id": "themes/next/.github/CODE_OF_CONDUCT.md",
        "hash": "aa4cb7aff595ca628cb58160ee1eee117989ec4e",
        "modified": 1577515674309
      },
      {
        "_id": "themes/next/.github/CONTRIBUTING.md",
        "hash": "5ef63f34bd3b6bd4d7304d48ce5e0e3e2bead385",
        "modified": 1577515674309
      },
      {
        "_id": "themes/next/.github/PULL_REQUEST_TEMPLATE.md",
        "hash": "715dcf9b0429a4a4c7107d6d1d00a34e4cf9aa99",
        "modified": 1577515674310
      },
      {
        "_id": "themes/next/.github/config.yml",
        "hash": "e4f4b9afe59bc508c4f7634895b33d7d460a7cb1",
        "modified": 1577515674310
      },
      {
        "_id": "themes/next/.github/issue_label_bot.yaml",
        "hash": "fca600ddef6f80c5e61aeed21722d191e5606e5b",
        "modified": 1577515674310
      },
      {
        "_id": "themes/next/.github/lock.yml",
        "hash": "61173b9522ebac13db2c544e138808295624f7fd",
        "modified": 1577515674310
      },
      {
        "_id": "themes/next/.github/mergeable.yml",
        "hash": "0ee56e23bbc71e1e76427d2bd255a9879bd36e22",
        "modified": 1577515674311
      },
      {
        "_id": "themes/next/.github/release-drafter.yml",
        "hash": "3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea",
        "modified": 1577515674311
      },
      {
        "_id": "themes/next/.github/issue-close-app.yml",
        "hash": "7cba457eec47dbfcfd4086acd1c69eaafca2f0cd",
        "modified": 1578230681939
      },
      {
        "_id": "themes/next/.github/stale.yml",
        "hash": "941209526c2f7d916c76163c9e1ac1af9d956679",
        "modified": 1577515674311
      },
      {
        "_id": "themes/next/.github/support.yml",
        "hash": "d75db6ffa7b4ca3b865a925f9de9aef3fc51925c",
        "modified": 1577515674311
      },
      {
        "_id": "themes/next/docs/DATA-FILES.md",
        "hash": "40a8089076005e0d26ef7c0db58a2b5b464cda6c",
        "modified": 1577515674313
      },
      {
        "_id": "themes/next/docs/AGPL3.md",
        "hash": "0d2b8c5fa8a614723be0767cc3bca39c49578036",
        "modified": 1577515674313
      },
      {
        "_id": "themes/next/docs/AUTHORS.md",
        "hash": "10135a2f78ac40e9f46b3add3e360c025400752f",
        "modified": 1577515674313
      },
      {
        "_id": "themes/next/docs/INSTALLATION.md",
        "hash": "af88bcce035780aaa061261ed9d0d6c697678618",
        "modified": 1577515674313
      },
      {
        "_id": "themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md",
        "hash": "08cda41b4bcf687facfda19ab39718ec7a05ae54",
        "modified": 1577515674313
      },
      {
        "_id": "themes/next/docs/MATH.md",
        "hash": "f520b336f16665e164d6edf075bdcc6aa17b31bc",
        "modified": 1577515674314
      },
      {
        "_id": "themes/next/docs/ALGOLIA-SEARCH.md",
        "hash": "c7a994b9542040317d8f99affa1405c143a94a38",
        "modified": 1580791905046
      },
      {
        "_id": "themes/next/docs/UPDATE-FROM-5.1.X.md",
        "hash": "682937d48bf5d243842a76190921322e26c75247",
        "modified": 1577515674314
      },
      {
        "_id": "themes/next/docs/LICENSE.txt",
        "hash": "368bf2c29d70f27d8726dd914f1b3211cae4bbab",
        "modified": 1577515674314
      },
      {
        "_id": "themes/next/layout/_layout.swig",
        "hash": "29ee038b0d5ffdb45327598733ea968588367769",
        "modified": 1577515674320
      },
      {
        "_id": "themes/next/layout/archive.swig",
        "hash": "26526c09a4334099e2141456697696fcd1f9783f",
        "modified": 1577515674330
      },
      {
        "_id": "themes/next/layout/category.swig",
        "hash": "c55debb2588e4746b02d31ec249bf0a84fdea260",
        "modified": 1577515674331
      },
      {
        "_id": "themes/next/layout/index.swig",
        "hash": "3bc6fb1e9707d74b96e1346d3f03fe6584f764f4",
        "modified": 1577515674331
      },
      {
        "_id": "themes/next/layout/post.swig",
        "hash": "382d9f9a9b35e1f369585f7f9f9b5dd6fa58d2f0",
        "modified": 1577515674331
      },
      {
        "_id": "themes/next/layout/page.swig",
        "hash": "e61d64c055b6497a04affc143f47fdd0a6dc495b",
        "modified": 1577515674331
      },
      {
        "_id": "themes/next/languages/de.yml",
        "hash": "3530753456db8a7a7cb72b47505bf6197ac9a9f2",
        "modified": 1580875128314
      },
      {
        "_id": "themes/next/layout/tag.swig",
        "hash": "7ff6e34d557a3da1c6a29ecd97842bf73ff213dc",
        "modified": 1577515674331
      },
      {
        "_id": "themes/next/languages/default.yml",
        "hash": "2c415150d5ba44a05ec7ca5fa671d6129c7fe7db",
        "modified": 1580875128314
      },
      {
        "_id": "themes/next/languages/en.yml",
        "hash": "2c415150d5ba44a05ec7ca5fa671d6129c7fe7db",
        "modified": 1580875128314
      },
      {
        "_id": "themes/next/languages/es.yml",
        "hash": "9596836628169400beed4124eeb5867821075b00",
        "modified": 1580875128314
      },
      {
        "_id": "themes/next/languages/fa.yml",
        "hash": "c77d0ab86695651f4fb09e0e9af484114fe80292",
        "modified": 1580875128315
      },
      {
        "_id": "themes/next/languages/hu.yml",
        "hash": "a317ba3ab2d9de40fe8b5447d0e63b9d8ab97c8b",
        "modified": 1580875128316
      },
      {
        "_id": "themes/next/languages/fr.yml",
        "hash": "30702ddcb121ee1ada258b8b900d826fec697e5e",
        "modified": 1580875128315
      },
      {
        "_id": "themes/next/languages/id.yml",
        "hash": "85441f625f1f93a329b7eab01f919e81a6f36172",
        "modified": 1580875128316
      },
      {
        "_id": "themes/next/languages/it.yml",
        "hash": "8e4d494cd7f4e33d2c416da3a48f9bd8968243ea",
        "modified": 1580875128316
      },
      {
        "_id": "themes/next/languages/ko.yml",
        "hash": "04ba65574f1fa63ffb95fcfb7a4515ee4b01532f",
        "modified": 1580875128317
      },
      {
        "_id": "themes/next/languages/nl.yml",
        "hash": "dea4d7d516071c9ec9e57935a84aaab15c3d2e97",
        "modified": 1580875128317
      },
      {
        "_id": "themes/next/languages/ja.yml",
        "hash": "2a767bc258a5072f8d97ffdfce53b4e2332570f4",
        "modified": 1580875128316
      },
      {
        "_id": "themes/next/languages/pt-BR.yml",
        "hash": "66e3cc8efc2a26184fcbe4db8981b84099348276",
        "modified": 1580875128318
      },
      {
        "_id": "themes/next/languages/ru.yml",
        "hash": "79f7f3b6e96184cf21ce2c9a2adb01b0f0228cf8",
        "modified": 1580875128318
      },
      {
        "_id": "themes/next/languages/pt.yml",
        "hash": "f184ffed48395675a7025cb1ccfdade546f3e987",
        "modified": 1580875128318
      },
      {
        "_id": "themes/next/languages/tr.yml",
        "hash": "5c5b60faa00401e822c92abcdcf9c5d410a8b753",
        "modified": 1580875128318
      },
      {
        "_id": "themes/next/languages/uk.yml",
        "hash": "a6af58b5351e0d0dde1fec22a3e80fc76bd8eecf",
        "modified": 1580875128319
      },
      {
        "_id": "themes/next/languages/vi.yml",
        "hash": "2b698896b08d79333a3414185fc2b445b3657361",
        "modified": 1580875128319
      },
      {
        "_id": "themes/next/languages/zh-HK.yml",
        "hash": "6e333aaca52dccee8e5f2d1dc28b0a6cda7b0c9a",
        "modified": 1580875128319
      },
      {
        "_id": "themes/next/languages/zh-CN.yml",
        "hash": "ab2fa8bfdbf4afd77c336412f29930dc8256a5fa",
        "modified": 1580875128319
      },
      {
        "_id": "themes/next/languages/zh-TW.yml",
        "hash": "d4517fa82652ccc75915469985efd7da1895963a",
        "modified": 1580875128320
      },
      {
        "_id": "themes/next/scripts/renderer.js",
        "hash": "49a65df2028a1bc24814dc72fa50d52231ca4f05",
        "modified": 1577515674335
      },
      {
        "_id": "themes/next/.git/hooks/applypatch-msg.sample",
        "hash": "4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd",
        "modified": 1577515156445
      },
      {
        "_id": "themes/next/.git/hooks/commit-msg.sample",
        "hash": "ee1ed5aad98a435f2020b6de35c173b75d9affac",
        "modified": 1577515156444
      },
      {
        "_id": "themes/next/.git/hooks/fsmonitor-watchman.sample",
        "hash": "f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156",
        "modified": 1577515156445
      },
      {
        "_id": "themes/next/.git/hooks/pre-applypatch.sample",
        "hash": "f208287c1a92525de9f5462e905a9d31de1e2d75",
        "modified": 1577515156446
      },
      {
        "_id": "themes/next/.git/hooks/post-update.sample",
        "hash": "b614c2f63da7dca9f1db2e7ade61ef30448fc96c",
        "modified": 1577515156445
      },
      {
        "_id": "themes/next/.git/hooks/pre-push.sample",
        "hash": "5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41",
        "modified": 1577515156446
      },
      {
        "_id": "themes/next/.git/hooks/pre-commit.sample",
        "hash": "33729ad4ce51acda35094e581e4088f3167a0af8",
        "modified": 1577515156445
      },
      {
        "_id": "themes/next/.git/hooks/pre-rebase.sample",
        "hash": "288efdc0027db4cfd8b7c47c4aeddba09b6ded12",
        "modified": 1577515156444
      },
      {
        "_id": "themes/next/.git/hooks/pre-receive.sample",
        "hash": "705a17d259e7896f0082fe2e9f2c0c3b127be5ac",
        "modified": 1577515156445
      },
      {
        "_id": "themes/next/.git/hooks/prepare-commit-msg.sample",
        "hash": "2584806ba147152ae005cb675aa4f01d5d068456",
        "modified": 1577515156445
      },
      {
        "_id": "themes/next/.git/logs/HEAD",
        "hash": "bee9768f877564e5a7fa476b3a1ed9755e1a21d0",
        "modified": 1580875128323
      },
      {
        "_id": "themes/next/.git/hooks/update.sample",
        "hash": "e729cd61b27c128951d139de8e7c63d1a3758dde",
        "modified": 1577515156446
      },
      {
        "_id": "themes/next/.git/info/exclude",
        "hash": "c879df015d97615050afa7b9641e3352a1e701ac",
        "modified": 1577515156444
      },
      {
        "_id": "themes/next/.github/ISSUE_TEMPLATE/bug-report.md",
        "hash": "8ae029084b9ac482adf0fae2a0979dd388476513",
        "modified": 1578230681938
      },
      {
        "_id": "themes/next/.github/ISSUE_TEMPLATE/feature-request.md",
        "hash": "7a9526f749205c882d672a4f51e6a3033c80ca6e",
        "modified": 1578230681938
      },
      {
        "_id": "themes/next/.github/ISSUE_TEMPLATE/other.md",
        "hash": "89667adbb85c25716dba607cd7a38191acf60736",
        "modified": 1578230681938
      },
      {
        "_id": "themes/next/.github/ISSUE_TEMPLATE/question.md",
        "hash": "789a3cceb8f37a4b63b1fb2452a03332a3c365ed",
        "modified": 1578230681939
      },
      {
        "_id": "themes/next/docs/zh-CN/ALGOLIA-SEARCH.md",
        "hash": "34b88784ec120dfdc20fa82aadeb5f64ef614d14",
        "modified": 1580791905047
      },
      {
        "_id": "themes/next/docs/zh-CN/CONTRIBUTING.md",
        "hash": "17d7203e85a8ce9760c42a853dee0f26a8f7ee4e",
        "modified": 1577515674315
      },
      {
        "_id": "themes/next/docs/zh-CN/CODE_OF_CONDUCT.md",
        "hash": "fb23b85db6f7d8279d73ae1f41631f92f64fc864",
        "modified": 1577515674315
      },
      {
        "_id": "themes/next/docs/zh-CN/INSTALLATION.md",
        "hash": "579c7bd8341873fb8be4732476d412814f1a3df7",
        "modified": 1577515674316
      },
      {
        "_id": "themes/next/docs/zh-CN/DATA-FILES.md",
        "hash": "ca1030efdfca5e20f9db2e7a428998e66a24c0d0",
        "modified": 1577515674315
      },
      {
        "_id": "themes/next/docs/zh-CN/MATH.md",
        "hash": "f0ffb74de522749c9f2fda46970a61bdafbfbc24",
        "modified": 1577515674316
      },
      {
        "_id": "themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md",
        "hash": "0b0b9ec6ec4a89e701a3b91f8d7d95752d3e241b",
        "modified": 1577515674316
      },
      {
        "_id": "themes/next/docs/zh-CN/README.md",
        "hash": "b6a3611d40863c12804c5846994786119ce3b79f",
        "modified": 1577515674316
      },
      {
        "_id": "themes/next/docs/ru/DATA-FILES.md",
        "hash": "0bd2d696f62a997a11a7d84fec0130122234174e",
        "modified": 1577515674314
      },
      {
        "_id": "themes/next/docs/ru/INSTALLATION.md",
        "hash": "9c4fe2873123bf9ceacab5c50d17d8a0f1baef27",
        "modified": 1577515674314
      },
      {
        "_id": "themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md",
        "hash": "7f37327bbcae7ed7d04d187fd5e9bc6bbf14926a",
        "modified": 1577515674316
      },
      {
        "_id": "themes/next/docs/ru/README.md",
        "hash": "41b1bef32fb991410ebf559b4c45022549f95215",
        "modified": 1577515674315
      },
      {
        "_id": "themes/next/docs/ru/UPDATE-FROM-5.1.X.md",
        "hash": "fe3f5cda1975114884d84bef384a562920d70335",
        "modified": 1577515674315
      },
      {
        "_id": "themes/next/layout/_partials/footer.swig",
        "hash": "1ee6335c12773dc43f8b92136770cb10d460c25c",
        "modified": 1577515674321
      },
      {
        "_id": "themes/next/layout/_partials/comments.swig",
        "hash": "0c4914a5fd08f15beec71940218c814ad9a89f3f",
        "modified": 1577515674320
      },
      {
        "_id": "themes/next/layout/_partials/pagination.swig",
        "hash": "9876dbfc15713c7a47d4bcaa301f4757bd978269",
        "modified": 1577515674323
      },
      {
        "_id": "themes/next/layout/_macro/post-collapse.swig",
        "hash": "815676d904f92748ddf4f529bed2baf066997bc6",
        "modified": 1577515674320
      },
      {
        "_id": "themes/next/layout/_macro/sidebar.swig",
        "hash": "e2c9db54cc9e154e882008fde6588b065fadc9a7",
        "modified": 1577515674320
      },
      {
        "_id": "themes/next/layout/_partials/widgets.swig",
        "hash": "83a40ce83dfd5cada417444fb2d6f5470aae6bb0",
        "modified": 1577515674324
      },
      {
        "_id": "themes/next/layout/_macro/post.swig",
        "hash": "87a40f829ae6bb786c6c51bd83d110140eb41b80",
        "modified": 1580695389845
      },
      {
        "_id": "themes/next/layout/_scripts/index.swig",
        "hash": "cea942b450bcb0f352da78d76dc6d6f1d23d5029",
        "modified": 1577515674324
      },
      {
        "_id": "themes/next/layout/_scripts/noscript.swig",
        "hash": "d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b",
        "modified": 1577515674324
      },
      {
        "_id": "themes/next/layout/_scripts/pjax.swig",
        "hash": "a3462c37ab6d7642b1e95860ea5c4cfbac78efab",
        "modified": 1579225799047
      },
      {
        "_id": "themes/next/layout/_scripts/three.swig",
        "hash": "a4f42f2301866bd25a784a2281069d8b66836d0b",
        "modified": 1577515674325
      },
      {
        "_id": "themes/next/layout/_scripts/vendors.swig",
        "hash": "ef38c213679e7b6d2a4116f56c9e55d678446069",
        "modified": 1577515674326
      },
      {
        "_id": "themes/next/layout/_third-party/baidu-push.swig",
        "hash": "8627c8c8b031ecee16c522433b66fa4d6979b8ea",
        "modified": 1577515674326
      },
      {
        "_id": "themes/next/layout/_third-party/index.swig",
        "hash": "70c3c01dd181de81270c57f3d99b6d8f4c723404",
        "modified": 1577515674328
      },
      {
        "_id": "themes/next/scripts/events/index.js",
        "hash": "9047d8ae2670e43429b16a7919a08a0a0a81afe0",
        "modified": 1577515674332
      },
      {
        "_id": "themes/next/scripts/filters/default-injects.js",
        "hash": "aec50ed57b9d5d3faf2db3c88374f107203617e0",
        "modified": 1577515674333
      },
      {
        "_id": "themes/next/scripts/filters/front-matter.js",
        "hash": "703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7",
        "modified": 1577515674334
      },
      {
        "_id": "themes/next/scripts/filters/locals.js",
        "hash": "5bbfdc1c373542159660b7a68ed0b57ca18ad10b",
        "modified": 1577515674334
      },
      {
        "_id": "themes/next/scripts/filters/minify.js",
        "hash": "19985723b9f677ff775f3b17dcebf314819a76ac",
        "modified": 1577515674334
      },
      {
        "_id": "themes/next/scripts/filters/post.js",
        "hash": "f2f566f2577c554377fd704442399acdd14a8118",
        "modified": 1580695389849
      },
      {
        "_id": "themes/next/scripts/helpers/font.js",
        "hash": "32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d",
        "modified": 1577515674334
      },
      {
        "_id": "themes/next/scripts/helpers/engine.js",
        "hash": "cb211b6b50913454b1737782e9e2af96cfa40448",
        "modified": 1577515674334
      },
      {
        "_id": "themes/next/scripts/helpers/next-url.js",
        "hash": "58347687b02f7ab5e64bef07525c8efa97c9e8fb",
        "modified": 1577515674335
      },
      {
        "_id": "themes/next/scripts/tags/button.js",
        "hash": "1d1d25f7e579d92fa563778dd0f163e8eda190da",
        "modified": 1577515674335
      },
      {
        "_id": "themes/next/scripts/tags/caniuse.js",
        "hash": "94e0bbc7999b359baa42fa3731bdcf89c79ae2b3",
        "modified": 1580715459122
      },
      {
        "_id": "themes/next/scripts/tags/center-quote.js",
        "hash": "f13430d9d1c9773b390787c2f046bb1f12a79878",
        "modified": 1577515674335
      },
      {
        "_id": "themes/next/scripts/tags/label.js",
        "hash": "fc5b267d903facb7a35001792db28b801cccb1f8",
        "modified": 1577515674336
      },
      {
        "_id": "themes/next/scripts/tags/group-pictures.js",
        "hash": "d902fd313e8d35c3cc36f237607c2a0536c9edf1",
        "modified": 1577515674335
      },
      {
        "_id": "themes/next/scripts/tags/mermaid.js",
        "hash": "983c6c4adea86160ecc0ba2204bc312aa338121d",
        "modified": 1577515674336
      },
      {
        "_id": "themes/next/scripts/tags/note.js",
        "hash": "0a02bb4c15aec41f6d5f1271cdb5c65889e265d9",
        "modified": 1577515674336
      },
      {
        "_id": "themes/next/scripts/tags/pdf.js",
        "hash": "f780cc72bff91d2720626e7af69eed25e9c12a29",
        "modified": 1577515674336
      },
      {
        "_id": "themes/next/scripts/tags/video.js",
        "hash": "e5ff4c44faee604dd3ea9db6b222828c4750c227",
        "modified": 1577515674336
      },
      {
        "_id": "themes/next/scripts/tags/tabs.js",
        "hash": "00ca6340d4fe0ccdae7525373e4729117775bbfa",
        "modified": 1577515674336
      },
      {
        "_id": "themes/next/layout/_third-party/quicklink.swig",
        "hash": "dd6bd817cb69b5ad5e9746498146314b54054ff8",
        "modified": 1577515674328
      },
      {
        "_id": "themes/next/layout/_third-party/rating.swig",
        "hash": "da6a9d14ed10203e378c6e2c00a7b5e7afabca58",
        "modified": 1577515674328
      },
      {
        "_id": "themes/next/source/css/main.styl",
        "hash": "68c3377b643162aeaae2b60c196486fdb3b509c3",
        "modified": 1577515674355
      },
      {
        "_id": "themes/next/source/images/apple-touch-icon-next.png",
        "hash": "2959dbc97f31c80283e67104fe0854e2369e40aa",
        "modified": 1577515674355
      },
      {
        "_id": "themes/next/source/images/algolia_logo.svg",
        "hash": "ec119560b382b2624e00144ae01c137186e91621",
        "modified": 1577515674355
      },
      {
        "_id": "themes/next/source/images/avatar.gif",
        "hash": "18c53e15eb0c84b139995f9334ed8522b40aeaf6",
        "modified": 1577515674356
      },
      {
        "_id": "themes/next/source/images/cc-by-nc-nd.svg",
        "hash": "c6524ece3f8039a5f612feaf865d21ec8a794564",
        "modified": 1577515674356
      },
      {
        "_id": "themes/next/source/images/cc-by-nc-sa.svg",
        "hash": "3031be41e8753c70508aa88e84ed8f4f653f157e",
        "modified": 1577515674356
      },
      {
        "_id": "themes/next/source/images/cc-by-nc.svg",
        "hash": "8d39b39d88f8501c0d27f8df9aae47136ebc59b7",
        "modified": 1577515674356
      },
      {
        "_id": "themes/next/source/images/cc-by-nd.svg",
        "hash": "c563508ce9ced1e66948024ba1153400ac0e0621",
        "modified": 1577515674357
      },
      {
        "_id": "themes/next/source/images/cc-by.svg",
        "hash": "28a0a4fe355a974a5e42f68031652b76798d4f7e",
        "modified": 1577515674357
      },
      {
        "_id": "themes/next/source/images/cc-by-sa.svg",
        "hash": "aa4742d733c8af8d38d4c183b8adbdcab045872e",
        "modified": 1577515674357
      },
      {
        "_id": "themes/next/source/images/favicon-16x16-next.png",
        "hash": "943a0d67a9cdf8c198109b28f9dbd42f761d11c3",
        "modified": 1577515674357
      },
      {
        "_id": "themes/next/source/images/favicon-32x32-next.png",
        "hash": "0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1",
        "modified": 1577515674357
      },
      {
        "_id": "themes/next/source/images/cc-zero.svg",
        "hash": "87669bf8ac268a91d027a0a4802c92a1473e9030",
        "modified": 1577515674357
      },
      {
        "_id": "themes/next/source/images/logo.svg",
        "hash": "d29cacbae1bdc4bbccb542107ee0524fe55ad6de",
        "modified": 1577515674357
      },
      {
        "_id": "themes/next/source/images/quote-l.svg",
        "hash": "94e870b4c8c48da61d09522196d4dd40e277a98f",
        "modified": 1577515674358
      },
      {
        "_id": "themes/next/source/images/quote-r.svg",
        "hash": "e60ae504f9d99b712c793c3740c6b100d057d4ec",
        "modified": 1577515674358
      },
      {
        "_id": "themes/next/source/js/bookmark.js",
        "hash": "a00945ff886e9f6f835731cdaf29a3a3727c8877",
        "modified": 1577515674358
      },
      {
        "_id": "themes/next/source/js/next-boot.js",
        "hash": "f7045763e277e685c271bd4b4c37e531d699ac63",
        "modified": 1577515674359
      },
      {
        "_id": "themes/next/source/js/algolia-search.js",
        "hash": "f31a633c15391ce0095579735a479f3f92622eab",
        "modified": 1580791905050
      },
      {
        "_id": "themes/next/source/js/utils.js",
        "hash": "a1e70ac9d32697907d5d78f2533d627f4df8ebcb",
        "modified": 1580300584266
      },
      {
        "_id": "themes/next/source/js/motion.js",
        "hash": "72df86f6dfa29cce22abeff9d814c9dddfcf13a9",
        "modified": 1580695389853
      },
      {
        "_id": "themes/next/source/js/local-search.js",
        "hash": "0d30f1c0e4d4a1cc26d494808f3f36132d06ae14",
        "modified": 1580791905051
      },
      {
        "_id": "themes/next/source/lib/anime.min.js",
        "hash": "47cb482a8a488620a793d50ba8f6752324b46af3",
        "modified": 1577515674360
      },
      {
        "_id": "themes/next/source/css/_mixins/Mist.styl",
        "hash": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
        "modified": 1577515674349
      },
      {
        "_id": "themes/next/source/css/_mixins/Muse.styl",
        "hash": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
        "modified": 1577515674349
      },
      {
        "_id": "themes/next/.git/refs/heads/master",
        "hash": "4d2360c9195e5141e4b9e2d245e7c5a9d2f7d9e4",
        "modified": 1580874769289
      },
      {
        "_id": "themes/next/.git/refs/tags/v7.7.0",
        "hash": "b36294c4a5df9cb1df8e582752dee5d4821aad00",
        "modified": 1578230505293
      },
      {
        "_id": "themes/next/.git/refs/tags/v7.7.1",
        "hash": "88c02f7029cb659858b0e0554b79fa64e9f64494",
        "modified": 1580622074994
      },
      {
        "_id": "themes/next/.git/objects/00/4e7e557b32fb66bf6dd893598c3667a600a108",
        "hash": "5379e187745198bea7582e3d8f13db3bcac17191",
        "modified": 1580869487238
      },
      {
        "_id": "themes/next/.git/objects/03/c841ad74af597a2b05fb47e0d0407cd27ce795",
        "hash": "069f76fe5273e747002de1668b1565c67076a0a8",
        "modified": 1580869487231
      },
      {
        "_id": "themes/next/.git/objects/02/6199aabbf5163acc54b123bbd3893d7a405821",
        "hash": "2e99d827433c940a721d7358c1758a11e5847914",
        "modified": 1580384731466
      },
      {
        "_id": "themes/next/.git/objects/00/6798ea1b433f88f6db81b1dd3c794ba8f062ba",
        "hash": "50907af287a838350dac6585cfe7f1ec33fae9ed",
        "modified": 1580791854105
      },
      {
        "_id": "themes/next/.git/objects/03/a65e1917af8b51a0610f34b9d05a95c5cfe6a0",
        "hash": "5ec5bd7d48aa9015586c4cc1703b70c48f1261a9",
        "modified": 1580869487232
      },
      {
        "_id": "themes/next/.git/objects/04/5806d6b637a83e045a5db1688c1d5b59e2e400",
        "hash": "4e311ebee0ab537e1e8bda7670c6db6e2e35baf2",
        "modified": 1580622074958
      },
      {
        "_id": "themes/next/.git/objects/02/89e5068f387031653ff0337210af5c37a16e11",
        "hash": "406eb15c75d1543a1c718b5ff465ca95df928ec6",
        "modified": 1580444760545
      },
      {
        "_id": "themes/next/.git/objects/03/0f40fe4451a910ba8422120a29526e7a639dbd",
        "hash": "0b849cba3ec8819584ca196df1bfbc4a72a17232",
        "modified": 1579160278156
      },
      {
        "_id": "themes/next/.git/objects/04/1d3c333feaaa82f4f552809a4d2b1fe2142dec",
        "hash": "5ff83e3756f57da70fca681754e480b300bbe007",
        "modified": 1579225683671
      },
      {
        "_id": "themes/next/.git/objects/04/24a76f83928e3c769db1b4d2db5d4a016d8cda",
        "hash": "fe789887911b99bf51a2b5ca0790ae119efa8634",
        "modified": 1580478547554
      },
      {
        "_id": "themes/next/.git/objects/00/e7c5411a9270855843d0eb8a865ddd1dc9fcb4",
        "hash": "0cdc25b3d16d931a738bbc3a068ebe3d860fd00c",
        "modified": 1580871959609
      },
      {
        "_id": "themes/next/.git/objects/04/3b7d780dc15829de60c751c3ad95f52888c15a",
        "hash": "5208c8960b6eed99b392878a70b92659817086d4",
        "modified": 1580783580816
      },
      {
        "_id": "themes/next/.git/objects/04/accabbe8372f8ba3dee148846394a8a47ab03b",
        "hash": "ab38c1a5eec023411ab48299df7eccee5991e31e",
        "modified": 1579160278158
      },
      {
        "_id": "themes/next/.git/objects/04/f0064e028e8e181f553f6b16e310905974c17a",
        "hash": "0b2fbbcc938e8c5b6390b4ef90d31fe0a2f7d7ca",
        "modified": 1579160278143
      },
      {
        "_id": "themes/next/.git/objects/0b/189af2acbfd42dec59750cbc3dce3bce086444",
        "hash": "97ef27fcce6a68f083a5695cb74cff3a921939f3",
        "modified": 1580871959606
      },
      {
        "_id": "themes/next/.git/objects/07/d86275a44e8adfb4f9c7466ceb670f2d43b51c",
        "hash": "285f78534c68c6296611f3cf97ce6808b885362d",
        "modified": 1580300445556
      },
      {
        "_id": "themes/next/.git/objects/08/75a095416308bed32ebb7ab826bd90090a1a5d",
        "hash": "7fdf60a4fe1c1f610c5aa9a6d1e2437549eed6a1",
        "modified": 1580300445564
      },
      {
        "_id": "themes/next/.git/objects/08/90fd238e63324cc1f7616c76dfcf65fd59cf21",
        "hash": "65a973714af562ced3a524cf942fbbcf6c500637",
        "modified": 1579160278147
      },
      {
        "_id": "themes/next/.git/objects/0a/fb7114a2bb5466840ce9d6865fd6c29d000b70",
        "hash": "4c3a5c55a47ba749547d6df66039e846cc624745",
        "modified": 1580300445540
      },
      {
        "_id": "themes/next/.git/objects/01/80ebb8794140d236bcaccfe52a7d67bd57f5c8",
        "hash": "02634820ff576e91af1c39513f58bc3503f46c17",
        "modified": 1580869487243
      },
      {
        "_id": "themes/next/.git/objects/0c/38a89fcbc2758b5e0089fd6d985598c8e42d30",
        "hash": "4ff8241914520fe3c7261ddd1c37d7567b1f1645",
        "modified": 1579160278132
      },
      {
        "_id": "themes/next/.git/objects/06/d2fe9b2bf00622170e7eeb5b460647b9b0f83d",
        "hash": "7c1a824f660f058a8378573394c5b0652b4b2882",
        "modified": 1580869487244
      },
      {
        "_id": "themes/next/.git/objects/0c/d2e398d11ff32954e2178c6b7c04665067c150",
        "hash": "c2e2911f4049a02b50e8326da88e9ba51dc7adf2",
        "modified": 1580869093710
      },
      {
        "_id": "themes/next/.git/objects/0e/4b47b1661cfb70d9ca10c3f57e8bf8abf0536a",
        "hash": "815d12cb8020489d5d6e9001514e9fbdf4ef8263",
        "modified": 1580300445557
      },
      {
        "_id": "themes/next/.git/objects/0e/87748cc52ca4480141bf9ac4357e8f678d21d8",
        "hash": "d6809c7d7f402f5a9bad43b6ce292765df2ba1cd",
        "modified": 1580478547526
      },
      {
        "_id": "themes/next/.git/objects/0c/8a19d8b31891841ec537333b2a811f59d018fa",
        "hash": "d4fe3a070431c0c3d53b50f78563f4d4c157b8cd",
        "modified": 1580878067268
      },
      {
        "_id": "themes/next/.git/objects/0f/963a60df9bcb7abc039d1a3623bda8afc6af6c",
        "hash": "d53752f942728406e8e97f39e1c1d6f9a8dfc094",
        "modified": 1580478547571
      },
      {
        "_id": "themes/next/.git/objects/0d/8eb0d6262ecf8b9991562ad33350e6b2060238",
        "hash": "131bd56df9d91e6541d1bbf8f8fdea43faf3d37e",
        "modified": 1580444760547
      },
      {
        "_id": "themes/next/.git/objects/0f/3d90391b19fdba99b2b5b2152a5b2634299caa",
        "hash": "e994d34cc9d6bf903620eeecb5cd5caa189d838d",
        "modified": 1579160278141
      },
      {
        "_id": "themes/next/.git/objects/0f/ea257c9b67745b82f9b63795e13248cac0258f",
        "hash": "15449f462c08467b4e98e4588b1058fe3f6a06c0",
        "modified": 1578230505271
      },
      {
        "_id": "themes/next/.git/objects/11/f30aa40c7b092f5fa993b2d483d0ef6b1d1a1f",
        "hash": "92770be293c7b83c14bb0230e8f3dcfdecde5576",
        "modified": 1580300445545
      },
      {
        "_id": "themes/next/.git/objects/09/6af8e4c4153de39e5ac3edd8e733385519b8cb",
        "hash": "fca97ba5377c5ae36d43d69985c7d8532f07ed63",
        "modified": 1580869487521
      },
      {
        "_id": "themes/next/.git/objects/09/aa66f91f8dfa3483a994d78b88bd5977e6cd84",
        "hash": "0b0c322f9a4d9f89fcb08e402267f613106ed141",
        "modified": 1580869093705
      },
      {
        "_id": "themes/next/.git/objects/09/594f3ae56adcdd8ecf1eb3af4fcd3747d93625",
        "hash": "2c6f152ded3113c6d611631202db542bbeac4d4c",
        "modified": 1580869093708
      },
      {
        "_id": "themes/next/.git/objects/10/9e7912e42ee2d2833a929bbc5550102163962d",
        "hash": "c87eab8803a90308b241b25a07468e00a34f066d",
        "modified": 1580622074959
      },
      {
        "_id": "themes/next/.git/objects/10/29d569b326b2fb0ee0d673dc76c6fda93b837e",
        "hash": "87087b9d2499616392aba1be17a87d51434d533e",
        "modified": 1579160278139
      },
      {
        "_id": "themes/next/.git/objects/10/25fa75f6e1fd920baa12c480f0914031148290",
        "hash": "d96f1f3a6fa5ab3710316d9cc44493d90000cb88",
        "modified": 1578230505276
      },
      {
        "_id": "themes/next/.git/objects/10/6c3831ef6b2e95b105e5d59f2758620dd5af39",
        "hash": "25a40d97ccb28626c5a5ee7e875b05974279e904",
        "modified": 1580783581011
      },
      {
        "_id": "themes/next/.git/objects/13/9f8b2c7ef93c4bf061b24ce81d349ecc12f38a",
        "hash": "bea93832f4efd69743b0e9fe709c93c24eff4f69",
        "modified": 1580869487260
      },
      {
        "_id": "themes/next/.git/objects/19/af5eb0abd9263b3e4c830662a158a0db20a3ef",
        "hash": "606ac2e9f2a3307bcf33d3324e0151bb7b3976d6",
        "modified": 1580300445562
      },
      {
        "_id": "themes/next/.git/objects/12/93b68f064a914d58e45484a20876be083613b0",
        "hash": "e8c8fd1b311511e4cd9433836c71cd7e59d078b7",
        "modified": 1579160278152
      },
      {
        "_id": "themes/next/.git/objects/1a/e62622e76defe06a428562850250355a9cc160",
        "hash": "2f2be33354a46817b0552dcd3b105ae504cd0921",
        "modified": 1580791854106
      },
      {
        "_id": "themes/next/.git/objects/14/0356e4c30e64fc2b403ea4c9787e8722a8c267",
        "hash": "e32ef750cf2202d156196e74f4a48088f5a533f5",
        "modified": 1580869487245
      },
      {
        "_id": "themes/next/.git/objects/15/a8c0c129eebec1274d7aafb7a7acb0ed05f868",
        "hash": "428d245b769cf93bee664aa5505b01382e5d39c5",
        "modified": 1580783581001
      },
      {
        "_id": "themes/next/.git/objects/15/f93827844d32ce2ed8821c3a87442187027eaa",
        "hash": "4294a34a9d981da097a8b88759ca5727f830a6e0",
        "modified": 1580384731461
      },
      {
        "_id": "themes/next/.git/objects/15/ff5f8aa1fe9b1971496a0c63eac47a30aeef90",
        "hash": "cf3c9f7bf56c75c4d95e82a7e79ac5583c62d498",
        "modified": 1580783581002
      },
      {
        "_id": "themes/next/.git/objects/14/1713944bd0c5301acaae2f3ae2d75a01a0ffd2",
        "hash": "194eaa299f580b86f5b61ced69bec2da6b6893a3",
        "modified": 1580478547583
      },
      {
        "_id": "themes/next/.git/objects/12/e48038558ffdfb78cb2ebea959bd9236223b89",
        "hash": "eb051aee13287a634a0e180881053b08e564d663",
        "modified": 1580869487531
      },
      {
        "_id": "themes/next/.git/objects/14/403da0a5aaef27c0b095373a77267f4b686436",
        "hash": "2fdfde6ea3b3b7dfa7ac40997b638115df9ce6ac",
        "modified": 1580878067272
      },
      {
        "_id": "themes/next/.git/objects/1c/dac8a5cc038de66b04f149f5fe5b1741aa3423",
        "hash": "53a798976898360b74568f871799884d43a7b02a",
        "modified": 1580783581003
      },
      {
        "_id": "themes/next/.git/objects/14/659584474aee7188b896b7cea1dd7eb8c2dbad",
        "hash": "bb8f8065bf39edbb206f053a1a1cb40d35ab12eb",
        "modified": 1580478547577
      },
      {
        "_id": "themes/next/.git/objects/20/4a76c15c16f3bfc45c86383d18e25c5e6e8b5d",
        "hash": "714a589b2cc47f5416d52d11b3d4272261550c44",
        "modified": 1580869487255
      },
      {
        "_id": "themes/next/.git/objects/1d/19118b47827aae501da5fcc8ef8aed50eb97c7",
        "hash": "ee0590d96d6bfa9c881f3f5c4d711da71332e6c6",
        "modified": 1580791854099
      },
      {
        "_id": "themes/next/.git/objects/16/6d1466f29d941bc3a53be5c840899dfb2c2fdd",
        "hash": "40fc4a4e1203f177fa9ac6a2f554c6f742efbd8a",
        "modified": 1579225683668
      },
      {
        "_id": "themes/next/.git/objects/16/feac5936bd7683eeabc9c725fc7d1e2e5096c6",
        "hash": "4f2f42ae1999ccd150839b738303e3647a1c9957",
        "modified": 1580300445548
      },
      {
        "_id": "themes/next/.git/objects/20/5f4341a5a8130bb1c07150b96ed0022d8369b9",
        "hash": "3ce48f1d22abd5957ba5506fd28c20baeda13bf9",
        "modified": 1580478547527
      },
      {
        "_id": "themes/next/.git/objects/1b/64c340a66dd408d82ef34a84534cdc476114f2",
        "hash": "96e4141e08db68c35f2b66b4f4908e964099829f",
        "modified": 1579160278127
      },
      {
        "_id": "themes/next/.git/objects/20/74d357ca7aab5e9a92bb4943645a8a2d0df136",
        "hash": "a67fbeb3de539c81ab53d517d2badb282fd2da98",
        "modified": 1580478547552
      },
      {
        "_id": "themes/next/.git/objects/22/a1082c17cb1cd2395c1b87e4f80752ebe2b947",
        "hash": "d1d37eae4958c3de27c7e16c25ce86f89a8bf327",
        "modified": 1580300445560
      },
      {
        "_id": "themes/next/.git/objects/22/1e31a2e75e92a0d4b85d23bd43a9d29f2e709b",
        "hash": "8f27097c8bfa7492398f45c2dcf4164f17d8c771",
        "modified": 1579160278132
      },
      {
        "_id": "themes/next/.git/objects/1b/d4fe88ae32f24feb75c78ef0c1f4e4a97e1d57",
        "hash": "a0ceb5e7b653e78c00e34dc48095269474d11cc1",
        "modified": 1580384731462
      },
      {
        "_id": "themes/next/.git/objects/1f/7e01a62f4db4511daca3a80cb9b4372d8f875f",
        "hash": "216ee5fb8163d47fa625b21f28da56d76d584246",
        "modified": 1579160278160
      },
      {
        "_id": "themes/next/.git/objects/22/d7b87757665e3e3fdb600912665bb4df1069df",
        "hash": "289061e0bef0c697b06931fba7aa909cc8f7336c",
        "modified": 1580478547570
      },
      {
        "_id": "themes/next/.git/objects/27/d7d82c9a66df3a589f82f10c256c22cf128cc7",
        "hash": "c90271809b4bd52bd159fff5af937bac330beac8",
        "modified": 1579225683677
      },
      {
        "_id": "themes/next/.git/objects/27/ee37631e603a724cc9c587d21a93ec802752f0",
        "hash": "ba297ff2587a3afa1c86e17a79bfdeec551bfdda",
        "modified": 1580869487262
      },
      {
        "_id": "themes/next/.git/objects/28/e5e89d336ea680e1f15751f4f5da112fc0dfd0",
        "hash": "71abb6c9db2220a7d26fddd9416c0a74769d5e90",
        "modified": 1580300445547
      },
      {
        "_id": "themes/next/.git/objects/27/a5581363986b6fb15705adfda234be714fd769",
        "hash": "2fbef1124a9c841ce452d886bd33c07cc1cbfd5c",
        "modified": 1579160278137
      },
      {
        "_id": "themes/next/.git/objects/28/c2b92c5138c92a079580b2d5f2b0528da43519",
        "hash": "e2b857c6d114736e46a5c774501560ff953a1f09",
        "modified": 1580869093696
      },
      {
        "_id": "themes/next/.git/objects/1e/0397974dc6833d5120a650fa9bd95fd6052806",
        "hash": "1d6cde09ed73721a934e9c25b28c5de751512785",
        "modified": 1579225683682
      },
      {
        "_id": "themes/next/.git/objects/1e/260a4460b0e2479bf0d430f63527926a6af599",
        "hash": "c26f89f96afd359ac9885ab12534eacbc2daef89",
        "modified": 1580478547528
      },
      {
        "_id": "themes/next/.git/objects/23/f936d65594214b2d3dd0626b1ee105ff4683c6",
        "hash": "acc6361dcf51905085525b2b7d54d620fd7f8909",
        "modified": 1580869287646
      },
      {
        "_id": "themes/next/.git/objects/1e/c463af458848cb1981c4de88da6054b2b02be5",
        "hash": "02473c73528a17bb3e7917ff6a1523f5897c0776",
        "modified": 1578450721897
      },
      {
        "_id": "themes/next/.git/objects/21/2e311a5671d2c27d3cc86593d3851ac570e79b",
        "hash": "7ea97be07a2231e1b9078a584c997e0194d2b36b",
        "modified": 1578230505264
      },
      {
        "_id": "themes/next/.git/objects/2d/7e72e8c8f05b8d9c14c6ac98491fbc6798870d",
        "hash": "0752b303704da310f0fec36d4863a6e3b9d89f28",
        "modified": 1580873548352
      },
      {
        "_id": "themes/next/.git/objects/25/6cf979e5c4558a962ac42d8dd9c4742e59e7f6",
        "hash": "9afc5dc7688c95ca14b513a3cb28695386b67b19",
        "modified": 1580791854110
      },
      {
        "_id": "themes/next/.git/objects/25/44c887723fc2a726f8581fb7b0b782cb256a04",
        "hash": "5dfeeac1bb85ef3048e7a9abeaeaca26d24c0fe2",
        "modified": 1580878067273
      },
      {
        "_id": "themes/next/.git/objects/2d/a5f80e5600bfd9d0b2a3f6b9e96dd79e64d8ee",
        "hash": "a6322211748c00962748c8b7dd993806032fe1bf",
        "modified": 1579160278162
      },
      {
        "_id": "themes/next/.git/objects/25/9e2cb0c810ea1ce88fd1038947dbfa114877ed",
        "hash": "a0a90b52871fb112f99c011497d3133187931a6c",
        "modified": 1580300445553
      },
      {
        "_id": "themes/next/.git/objects/2d/26d925b5453072fcdf2aa147f2fee8eb6260a2",
        "hash": "64624a5f621bb8cc6359e37b68509b8b377dfb74",
        "modified": 1580783581005
      },
      {
        "_id": "themes/next/.git/objects/2b/1dba42bbeae659a9d54522b7b48f3fa87c80d2",
        "hash": "05f4d20c133765b1a56bd364eb61d8ed034da04e",
        "modified": 1580478547564
      },
      {
        "_id": "themes/next/.git/objects/2b/e2bb646a11c3cd3229ecbe5eacb5ce07cd1a09",
        "hash": "579294b452b6885ad5ac5bb48fd3ceea6ef0987f",
        "modified": 1580869487530
      },
      {
        "_id": "themes/next/.git/objects/2b/22c1e686ad1269a6956686adfcbeaa9e56ea75",
        "hash": "6d12f315fb34c1861af2f4ba260f11f6a6612847",
        "modified": 1580869287647
      },
      {
        "_id": "themes/next/.git/objects/2c/49bd7a82aaa1ff883cf26ca6ff7182436067b2",
        "hash": "2eaad4cf95d828fad698583844b0b31e006fc246",
        "modified": 1580783580993
      },
      {
        "_id": "themes/next/.git/objects/30/50124e8f7cc082355255fbff6c4e114371234b",
        "hash": "6020193e1c5a67a9148c82c81c28a0775d560390",
        "modified": 1580869093701
      },
      {
        "_id": "themes/next/.git/objects/2b/234c3e8e4e1bf0aee20711f941e96d655bb729",
        "hash": "4c98711d59b20e6088d6b430c7c9e49fffa2e02f",
        "modified": 1578230505275
      },
      {
        "_id": "themes/next/.git/objects/30/502bef9a65a99fc9d7a2fdae1978efb6e4dc87",
        "hash": "b76bd49b69068ad80e94a569b870d21005b54dfa",
        "modified": 1580869487529
      },
      {
        "_id": "themes/next/.git/objects/30/02a502f642a0c5d0aeb0b013f5ce7a88b4c3de",
        "hash": "dec3608ec12f976e194bc5d6b304276e666c6ecc",
        "modified": 1580878067268
      },
      {
        "_id": "themes/next/.git/objects/33/9d8050841f2b5aeda8cf023c581a04e31f6888",
        "hash": "510f0035800074d538846b50df7c75b7352a2f72",
        "modified": 1579160278162
      },
      {
        "_id": "themes/next/.git/objects/30/7eb205b6e6549a664c26d8c68f7936c366e18a",
        "hash": "0bd2b389d0af1f9fc86346706a1e5e6004074a7d",
        "modified": 1580869487528
      },
      {
        "_id": "themes/next/.git/objects/36/b300ce2e7194c19d41140e40b9835bd973bba2",
        "hash": "c0517eb0d12ec09c949a71c2e19a48e377456fe1",
        "modified": 1580622074962
      },
      {
        "_id": "themes/next/.git/objects/29/9856c77c9403f0dd1d79b039ba49971c48cb70",
        "hash": "8d44647bd5d0e6b71feb3566fb3aacaae2e922e5",
        "modified": 1580478547548
      },
      {
        "_id": "themes/next/.git/objects/32/708c0cc5af8775e9f2c9369e000516de3132e0",
        "hash": "d8eb845c39f554cfcd05665ee640df17eecb228c",
        "modified": 1580478547546
      },
      {
        "_id": "themes/next/.git/objects/2f/dde7337bdac06f8c479599655495ee20f511bc",
        "hash": "6d8e3f5e7b8e1f6e0a05fab9af9c21c12d9539d0",
        "modified": 1580783581013
      },
      {
        "_id": "themes/next/.git/objects/2e/0e95b6786b773be6cb64fc16c02a2fe49086dd",
        "hash": "e05014bf4fcb3623e2e81ba80ecf4c6213c21975",
        "modified": 1580478547523
      },
      {
        "_id": "themes/next/.git/objects/3c/1b467e9b2adf653e0ea77c7bb82c4ee2ecb1f3",
        "hash": "f4db2ded30e46b1b5dd6a91766d472f58fa88aac",
        "modified": 1580478547549
      },
      {
        "_id": "themes/next/.git/objects/34/43ca8e6d2abb6a92fe732b80d6577d20fc9fc9",
        "hash": "4cfa1ac9ecff3fa2b669e3c3292bbf5769987ecc",
        "modified": 1580791854101
      },
      {
        "_id": "themes/next/.git/objects/34/61151044de68cb6aec2fb8d8685e7c636f43ac",
        "hash": "1906bfea67291b5c83874374d7b8127a07854114",
        "modified": 1580878067271
      },
      {
        "_id": "themes/next/.git/objects/34/ecc31ce8d230d5962af3120a7297f0f4a9d8c1",
        "hash": "25d6b7ab05841870a3d49dd04ffe7889e74e5a23",
        "modified": 1580715426037
      },
      {
        "_id": "themes/next/.git/objects/3d/b1be0bef23092490bc563f48be84ec65065b82",
        "hash": "293c86de1b4de89e6663635daa032e9f7aad0175",
        "modified": 1578450721896
      },
      {
        "_id": "themes/next/.git/objects/39/222455ddbd6f2fa8e5b399c8e570d6cbc1334d",
        "hash": "89f5d89760dd5921719d859f176a91f30e966a3a",
        "modified": 1580869487249
      },
      {
        "_id": "themes/next/.git/objects/3d/4f7ceb891128b3b9cfda1635a9957164a2f8a2",
        "hash": "c8d37b67914cdfc255257010edf006fd2761eb8e",
        "modified": 1580478547555
      },
      {
        "_id": "themes/next/.git/objects/39/83f1b176e39ed49d0df30cb4d713e96efa71df",
        "hash": "3faf95beb6526a459cebe57311be09c5aa4fedf3",
        "modified": 1579160278165
      },
      {
        "_id": "themes/next/.git/objects/42/11502ba674bcc053540444295203c7cea3ddeb",
        "hash": "941e16e2a07f11ba4d97018ca0cde13d03bcda7a",
        "modified": 1579160278165
      },
      {
        "_id": "themes/next/.git/objects/39/83c38a5f366dba8f146adb2ff95511f898ed78",
        "hash": "a5395c3a127f3f36c4102c2bfc1539c2b32ee438",
        "modified": 1578230505273
      },
      {
        "_id": "themes/next/.git/objects/3b/ae093a9f4bcfc054604bb2b297b514fffd458b",
        "hash": "5db1e446e2633d6bd4d4a712bd4666e15bc23691",
        "modified": 1580622074955
      },
      {
        "_id": "themes/next/.git/objects/43/05f5e32d92f925f71298a801afcbd4a0debbdf",
        "hash": "897faa0c931f9e7b463c9cf928c0d1e84ab975cc",
        "modified": 1579160278148
      },
      {
        "_id": "themes/next/.git/objects/39/aa704ef2a0b9cb5d686b6d5c634b7f5c0d4893",
        "hash": "a4c7fcf670f82077c1aa7e7aaefb25d3857ce7e6",
        "modified": 1580791854107
      },
      {
        "_id": "themes/next/.git/objects/49/92cf7de7d037e1c353faa779cb35cf22847dcc",
        "hash": "51e17307cd5f1434083b1c23afc1c25de132e5b5",
        "modified": 1580878067266
      },
      {
        "_id": "themes/next/.git/objects/47/5bd953e873e35b06c6a4a4b68163a89d944f3d",
        "hash": "67a646a8ac1024cecf6a57851b2dbaa30473474a",
        "modified": 1580869093707
      },
      {
        "_id": "themes/next/.git/objects/47/4ec5212ec9cc12f0e70275a10bd10fbab11df9",
        "hash": "55ed971da1247be0ea4c29dac34514e7df947b46",
        "modified": 1580869487237
      },
      {
        "_id": "themes/next/.git/objects/44/2269d93c0f1f992cbef773bd7eedb1c0304e15",
        "hash": "f6bdfd911860e4a045b104522e23fa9cb18ae063",
        "modified": 1579225683671
      },
      {
        "_id": "themes/next/.git/objects/46/ae0b8c76bdbe56ea734120fcd60ea0b0813653",
        "hash": "8b5264bb8ab83adc9ec2ec4f56c1e3243b2a89d4",
        "modified": 1579160278148
      },
      {
        "_id": "themes/next/.git/objects/47/7d41fb4a4a782aa5fea6f46f1119185a789696",
        "hash": "38a26336d7f3315c0910e9d313091b679459723f",
        "modified": 1580791854106
      },
      {
        "_id": "themes/next/.git/objects/4b/b1a518dd30036b47d0180b06b008f17a4c486b",
        "hash": "75b5e07e3d322149608176ea0cc2552b6375c5d9",
        "modified": 1580791854108
      },
      {
        "_id": "themes/next/.git/objects/4b/7a213118db798f343121b67148da8fabb8c642",
        "hash": "e71f9daa72816d907a08d7c5a932310616c07409",
        "modified": 1580869487242
      },
      {
        "_id": "themes/next/.git/objects/3a/82676a57f888473feed73be1cc33fbfe082635",
        "hash": "70b7c6d6414835a581841997eab49fdfe031c5e2",
        "modified": 1580869093703
      },
      {
        "_id": "themes/next/.git/objects/3a/51c46b5cf9664e3577e58acb705000d6dc0261",
        "hash": "b58deed4e1baee5e73f46541e0a1dcc7e52a7655",
        "modified": 1580478547570
      },
      {
        "_id": "themes/next/.git/objects/4b/d930aa2a68260614494af47f533985e711f4e1",
        "hash": "abd0326e5619f3c13069f8807086d24a96f16948",
        "modified": 1580869487233
      },
      {
        "_id": "themes/next/.git/objects/4b/fc7f5f1b28bfc1a93bdebcba201755a1aadcfd",
        "hash": "af98ebf07f5c6fff2d40bbce3c143f9654afb270",
        "modified": 1580300445541
      },
      {
        "_id": "themes/next/.git/objects/4d/60908f2864fabfce1b5ce51b5865d37cb543b8",
        "hash": "47403bea01ade8d555e3e4ca9b17af39961b516f",
        "modified": 1580478547549
      },
      {
        "_id": "themes/next/.git/objects/3a/d93ca187c3623e296a629dd8c3e51f26ac3d0b",
        "hash": "2d15b53bff75d78eb7b09d70908d46ff1d0616b0",
        "modified": 1580878067274
      },
      {
        "_id": "themes/next/.git/objects/40/a72f9beb939326409b6a38d1a32a0fd17ed8a3",
        "hash": "487c2c74db3689b1f4c1b240404a1cb6caaec50f",
        "modified": 1580478547573
      },
      {
        "_id": "themes/next/.git/objects/40/11e1a4e3ea8869b3a957c609d9e77ab2d9a1b9",
        "hash": "d5047ad95e4c769cb86db7f98e975aa71f6f53ed",
        "modified": 1580622074957
      },
      {
        "_id": "themes/next/.git/objects/40/b56f457c628d538474293553d513981e0966f5",
        "hash": "f7a989a039b7bf9c10c09431437735bdd89c49c5",
        "modified": 1580869487247
      },
      {
        "_id": "themes/next/.git/objects/56/45ea4a4380c48112f77a0f11de571ba58ac05f",
        "hash": "a968ff0b8f5eba98041ce8a5a00e29104464674a",
        "modified": 1580478547531
      },
      {
        "_id": "themes/next/.git/objects/51/18361cc749943a13b49fc8e98addaee138b5f6",
        "hash": "2b06c5a4e120431244c5081f77473bcb1131b080",
        "modified": 1580478547565
      },
      {
        "_id": "themes/next/.git/objects/48/965ce60f4e4f2a498d44052d39724486fb63f1",
        "hash": "059b8b9d99119514e1d6e48d1576dbda2c6060f8",
        "modified": 1580478547545
      },
      {
        "_id": "themes/next/.git/objects/51/6a861637518bc54cfb54c30852448d88c20810",
        "hash": "bb0b9663b66b815d280a50ddd6e086081d1d17a6",
        "modified": 1579160278133
      },
      {
        "_id": "themes/next/.git/objects/4f/76a7ae3d6e825fecee9ebcf499deb37300565d",
        "hash": "b5eb138328130b44a247fb9296e77108adf99f98",
        "modified": 1578230505267
      },
      {
        "_id": "themes/next/.git/objects/5a/a6bdbb75c7daae40e8772e9f4ab5f566b172c7",
        "hash": "e7e411de9a744b55784442e5abc540c24c0aa51d",
        "modified": 1580791854103
      },
      {
        "_id": "themes/next/.git/objects/48/7dce083010bc5b1687173316a85445a2dd6ee2",
        "hash": "a575f6f57d5ac0ff712caf736754d4137b02c7f6",
        "modified": 1580869487263
      },
      {
        "_id": "themes/next/.git/objects/5a/ef0fa379c20e0e5a8224465d80e22f4aadb6b1",
        "hash": "c940691baf4308bc0b4b557c1f9f2d39627dccf1",
        "modified": 1580869093694
      },
      {
        "_id": "themes/next/.git/objects/5b/18fdd38f478561f710acab81f76e34c67aaaff",
        "hash": "cfec5f65c134c4417bfa4e6842752fcda301f1c3",
        "modified": 1580478547543
      },
      {
        "_id": "themes/next/.git/objects/48/c711a084f00f42eaa349cf315eabb79d40a434",
        "hash": "f6fcf4d2e1f774c79ed9d8c13f4fb8c4563e798a",
        "modified": 1580783580999
      },
      {
        "_id": "themes/next/.git/objects/5a/f12b6abcba6395742e70e23dbf5b2f8cbeed4c",
        "hash": "af02c745b2099ef5ae00cfa988e3ffcb73fd8e08",
        "modified": 1580478547568
      },
      {
        "_id": "themes/next/.git/objects/4c/4fc17fbb05bc5fb93f2360200675c14a514d90",
        "hash": "b62a77532480a43d4618e9b85b9ad76ac05109e2",
        "modified": 1580478547567
      },
      {
        "_id": "themes/next/.git/objects/5a/f23de0a41ea5c96bb78e6badf5bb3b4ab72dce",
        "hash": "97f6ca6110b625c428312f2da8c20064ff9c3f80",
        "modified": 1580715426046
      },
      {
        "_id": "themes/next/.git/objects/52/4890def95dcbdfbef317220fd86febe69ccffd",
        "hash": "33f861da4f5f38e283a247df970824ee531df69c",
        "modified": 1580478547563
      },
      {
        "_id": "themes/next/.git/objects/4c/50610a9857a95238b7943b6be8eb6f75a53568",
        "hash": "6a7fe80235b7c9f91c09a5b443e80e441601e809",
        "modified": 1580478547562
      },
      {
        "_id": "themes/next/.git/objects/58/42b19dc5ab3a835ece54a48a5210302a3613eb",
        "hash": "3899a3e20196731417bd60eda259f53e56fe6865",
        "modified": 1580478547525
      },
      {
        "_id": "themes/next/.git/objects/5b/f0d5ee658f48579215a810dc6ce72262a7f14d",
        "hash": "c4d04a971e652ee461592d807c43dc157026ede3",
        "modified": 1580622074964
      },
      {
        "_id": "themes/next/.git/objects/4c/86b237b309316894c3412dcc0d773dd0955224",
        "hash": "3bd5a889f2f2e7ce89b19f28ebdd066dc489ef6c",
        "modified": 1580791854101
      },
      {
        "_id": "themes/next/.git/objects/58/e4a7a3843d411526645b9b2951e3f04dd16e3d",
        "hash": "99d00f4a0361b3e9d7a7d12652e48074666c4c13",
        "modified": 1580478547538
      },
      {
        "_id": "themes/next/.git/objects/61/99398d6bd7e6372447fdeefb8972932d251edc",
        "hash": "434607df5312a01ad6b9a5a2a6e9027d5cf3bd9a",
        "modified": 1579160278164
      },
      {
        "_id": "themes/next/.git/objects/58/b54fe2ee879697e91d6bc64f6a17d5cf3a4cb7",
        "hash": "ae896276039976cd26df6cddfa8554008c969dca",
        "modified": 1580384731456
      },
      {
        "_id": "themes/next/.git/objects/62/9015b56c81998b0f5a774414fbb0dc40f51975",
        "hash": "1f85abecb2b9aef506fa465d26fcaa9e4a70135e",
        "modified": 1580300445558
      },
      {
        "_id": "themes/next/.git/objects/62/edfa4423e637baba51f02b01185c493b26e44f",
        "hash": "06505e65f0ecad13388ccc19ddbf29aca46ee832",
        "modified": 1578450721900
      },
      {
        "_id": "themes/next/.git/objects/5c/0b2dfc1086e67a099919a5d8940edd0d99c77a",
        "hash": "11e53180d49df136643d61dc592f09ab597462a2",
        "modified": 1580478547558
      },
      {
        "_id": "themes/next/.git/objects/62/f7e4f2943750505c339d360e8c04ea45ebda45",
        "hash": "2320ee352a8e05a59202a9155be6f7b0edecc247",
        "modified": 1580878067267
      },
      {
        "_id": "themes/next/.git/objects/5d/2088024c35add4d9218132094b9092b82738b2",
        "hash": "82defa583a10d9fda53bd73aa35cc2f44a3d3dd6",
        "modified": 1579160278154
      },
      {
        "_id": "themes/next/.git/objects/5c/778a8010b5955b1591404ec17692b2088d139f",
        "hash": "a27e3977764804c930f17cf96ce70898b11ee512",
        "modified": 1580478547569
      },
      {
        "_id": "themes/next/.git/objects/5d/ce8a752970fb11b03c92b5926ddf27414d5121",
        "hash": "b9acbf3c44b503e57890756f50dcfc60e7da2add",
        "modified": 1580478547576
      },
      {
        "_id": "themes/next/.git/objects/5c/2e12ebca0a7140403dd03eeb80c06ab9e182a3",
        "hash": "7f36d29b3853abfc36df70be90e72684c63e8709",
        "modified": 1580783581010
      },
      {
        "_id": "themes/next/.git/objects/60/803bf5632d885b3692c3bf460603f27e8b1fb0",
        "hash": "c3e1c3e1086ae5477be41788506def363c3acf83",
        "modified": 1579225683675
      },
      {
        "_id": "themes/next/.git/objects/5c/ee23bb311c0ffce42891ff502cbbf146aafaf8",
        "hash": "f36d777defaa0104526dfc345353e3febca50184",
        "modified": 1580869487256
      },
      {
        "_id": "themes/next/.git/objects/61/419e971034b5d745b705515397d5dc3beb0388",
        "hash": "ae87b9198944fd3b283aa2b27cd4ef1897d7c180",
        "modified": 1580869093714
      },
      {
        "_id": "themes/next/.git/objects/66/0d5ef85b9bbbfda1accbb0962d4d0f1df40a74",
        "hash": "629a3565133570ae04500691b013bb12415a8e35",
        "modified": 1580869093698
      },
      {
        "_id": "themes/next/.git/objects/61/646d389ef22d6753ca425612d96e88b8ebd8df",
        "hash": "fcc1c64bae5c796d39dec3d608c0f1cdf0dea01f",
        "modified": 1579160278159
      },
      {
        "_id": "themes/next/.git/objects/66/1871310b5b232c3a366a6646c40fbdc9ddfc96",
        "hash": "735f2f710e05f5c80e1fb55721177bd1c57a09ba",
        "modified": 1580869487254
      },
      {
        "_id": "themes/next/.git/objects/66/0584af3395d525dd56c691b7041868069a8a46",
        "hash": "f2fea0ae34f5409ec1a2fd025bc4810f02a94c6c",
        "modified": 1580783580998
      },
      {
        "_id": "themes/next/.git/objects/66/308111f2c654faf5a6c9cad9b6f7a2446ffa07",
        "hash": "38b8bc30ab2f7dc14052d4ae3b5674dd6747fdb2",
        "modified": 1578230505270
      },
      {
        "_id": "themes/next/.git/objects/67/cf0c2b0ac682f1bd2f819a81b3268485fc9612",
        "hash": "d8408ac628eed37f795f4e81391065169c6b24c1",
        "modified": 1580869487245
      },
      {
        "_id": "themes/next/.git/objects/66/7a9a52e2acae81073d89f005b3c56992ea202b",
        "hash": "40f562fc35267285f592abb41e289a0f4b9ba968",
        "modified": 1579225683681
      },
      {
        "_id": "themes/next/.git/objects/68/704036250af2112e01e927f84a663765995444",
        "hash": "df28776fca6c612277d13a374bb448b492cb230a",
        "modified": 1579225683678
      },
      {
        "_id": "themes/next/.git/objects/68/b399a23bc06ce4a0d0309e423c92f3e76be84c",
        "hash": "c88889644df325f7c8b9a0c7bd3c1e8f909d1548",
        "modified": 1580869487520
      },
      {
        "_id": "themes/next/.git/objects/65/6162da6033ccef3e86a3a2a21b0c27a7d76391",
        "hash": "b5f0005266b345ee07a76c2dfd9bf070cfc0742d",
        "modified": 1580478547526
      },
      {
        "_id": "themes/next/.git/objects/68/9a7255855e5dfb78f646bf29051ed65330db74",
        "hash": "5c600dae3e23718278c7cb2fb212ad72cca3e163",
        "modified": 1579225683679
      },
      {
        "_id": "themes/next/.git/objects/65/1b91e8761b1dcbc9a66abd2cd95509b7acc2e9",
        "hash": "3ade7a6304b2c7bc78521af7a2d7bd51d1524277",
        "modified": 1580783581009
      },
      {
        "_id": "themes/next/.git/objects/5e/8b9fdd4dc2c0d8cbe1c7dcbf23058867259153",
        "hash": "054a5c047e16a3f5ac97b243feea860e74aba157",
        "modified": 1580478547529
      },
      {
        "_id": "themes/next/.git/objects/63/50ed63fb91e5023bfe35b25ac04abae9f7c09e",
        "hash": "5240cfc2a170f699b5f67c269953245c86b8cd77",
        "modified": 1580478547538
      },
      {
        "_id": "themes/next/.git/objects/6b/8935585a7c1141ad93b2b8c385dcd7904f3515",
        "hash": "b287adcd423768fac1d6262dfc54a60c0ed9b587",
        "modified": 1579160278153
      },
      {
        "_id": "themes/next/.git/objects/63/df6e5ba8295091760167a3e9f18be77ff52765",
        "hash": "3d719e8e67a3af82a73b79debd1afadbad1d8d35",
        "modified": 1580878067272
      },
      {
        "_id": "themes/next/.git/objects/69/dea04f13473f6b4550a6b08541dbad1d585c7e",
        "hash": "9d144216984716753d07124067c203c22187ff9d",
        "modified": 1580869487257
      },
      {
        "_id": "themes/next/.git/objects/69/fa339e7b52fba5dc476eca4b85d9ccc9434a12",
        "hash": "0821f02b9bc1bc3f116183e8cb3436db71d71de1",
        "modified": 1579160278156
      },
      {
        "_id": "themes/next/.git/objects/69/dcf7252e124285807d20c6063ae374953003cf",
        "hash": "30665f970728efbd4bdf76b60a67d121d074cd22",
        "modified": 1579160278169
      },
      {
        "_id": "themes/next/.git/objects/6e/4ba1fd5bac73dea49e25be33cc854ad5e04c8a",
        "hash": "f1f5cdfb852e620d596a06971c3300d67b7cdf47",
        "modified": 1579160278153
      },
      {
        "_id": "themes/next/.git/objects/69/f1bb6c8fe3b1cb6012e1ab96aaba7f33e4cbdf",
        "hash": "06356148a6532cd9ffb59295824a93be97b5e9fc",
        "modified": 1580715426041
      },
      {
        "_id": "themes/next/.git/objects/6a/367d49abc74c04b68ffd96c30b0bfe7c4043f9",
        "hash": "ad906fa13e4ec8c4566fdd12fe65a739180fe0c1",
        "modified": 1580869487525
      },
      {
        "_id": "themes/next/.git/objects/6f/76b65b5afefb6ba20d008883d2dabf97aed347",
        "hash": "bbd7aa6b1127987f091e18f869f999b46b0a5a7a",
        "modified": 1580869487235
      },
      {
        "_id": "themes/next/.git/objects/70/1f62ea09e54c830e3178f937f327045105618b",
        "hash": "0e3e21fe6a9065788750ae6b6e7652dea4875138",
        "modified": 1580478547560
      },
      {
        "_id": "themes/next/.git/objects/6a/9750c985535141d44db1c67acddf366a12ae92",
        "hash": "460ad8ae961a8c11a4ed72291cfc0d7caa44072b",
        "modified": 1580869487235
      },
      {
        "_id": "themes/next/.git/objects/70/92c55a861453fbee4a8fad4fcaea256902904e",
        "hash": "c76a7b19bc5f24f00a1db4900ef15b0c3315c3d0",
        "modified": 1579160278134
      },
      {
        "_id": "themes/next/.git/objects/71/f57d603c3593b727787933c69b01094d707781",
        "hash": "fdf472cf3786d2f00e46ad310d783bfcd98390dd",
        "modified": 1579225683670
      },
      {
        "_id": "themes/next/.git/objects/6d/04789f8ed3fee85347c9fea1839660c7d3c6c0",
        "hash": "e7c8e9c564959af5884774731761beadab63e21b",
        "modified": 1580478547553
      },
      {
        "_id": "themes/next/.git/objects/6a/65a36001c71864e7e54544e727d7d0f26bd68a",
        "hash": "0d2faf56afa92d17cb1aaa1319226ef91d8c3c83",
        "modified": 1580478547575
      },
      {
        "_id": "themes/next/.git/objects/71/05dc2895d369557826d789147d8fba4dc84a9c",
        "hash": "4bd64291176b8d3d519032420daf110e4c8b6b2a",
        "modified": 1580622074964
      },
      {
        "_id": "themes/next/.git/objects/6d/c143134e41732c6c3aa7dc2e6728f296e0e141",
        "hash": "697cf74e32b4b4f6288232c2868b4d0ca6c1d3b6",
        "modified": 1580478547551
      },
      {
        "_id": "themes/next/.git/objects/75/6ca90935cd0f90291b0f04d4ec7ce20757789d",
        "hash": "611351f15c1db014760d438d1764f4ae14d5b23a",
        "modified": 1578450721897
      },
      {
        "_id": "themes/next/.git/objects/76/51f22923482303270798b64f384d28e4ec987f",
        "hash": "c27d0b5ec17af27a50de7715c671a1f97094a7f5",
        "modified": 1580478547542
      },
      {
        "_id": "themes/next/.git/objects/6d/a4c12d4fb7b8405bdb5b0d9167c85ac3cd05df",
        "hash": "586fb34641aabec4c6ced045b25e836f492151bc",
        "modified": 1580478547576
      },
      {
        "_id": "themes/next/.git/objects/6d/9076d633892d23f789ecee077fa3223632a2f1",
        "hash": "a77a53cedf76ed69cb77c05cc08635412fcbc282",
        "modified": 1580878067269
      },
      {
        "_id": "themes/next/.git/objects/78/57a5af5e0a174950c90ea5310ce8d3943f4875",
        "hash": "044c021266643f23199dbfa4f5e0e32d593b18ac",
        "modified": 1580478547536
      },
      {
        "_id": "themes/next/.git/objects/6c/0b239a44394fec05572e6fe4a92b497a1ccc11",
        "hash": "36da525067d46c4a06bab67f7c02c706f855572d",
        "modified": 1580869487247
      },
      {
        "_id": "themes/next/.git/objects/78/0cd8709820245e1d18baf3590b53e5f4d3d2c8",
        "hash": "baa57d79aeaa19b270efe61c6398f89dcf079e59",
        "modified": 1580869093719
      },
      {
        "_id": "themes/next/.git/objects/7b/f7e06422f602bc8e1355086bf78e41d9964d1f",
        "hash": "cc5df4ffe36c8506cdc4fee93c3ceff828e0f6e4",
        "modified": 1579225683663
      },
      {
        "_id": "themes/next/.git/objects/78/cfca57c01ea20153ec4ea4a44761e0dbdf154b",
        "hash": "f7bf0ea7ff38b2843bdbc0a6968dbfa692dd838f",
        "modified": 1580478547580
      },
      {
        "_id": "themes/next/.git/objects/7e/0c90b4c20d9bca8b0f9f3339cb5a854aa3bc1a",
        "hash": "bd87f04b92582c22fe3a4502a6cd9f073850e57f",
        "modified": 1580300445550
      },
      {
        "_id": "themes/next/.git/objects/7f/6a35ea20bd04ab9fd3438de1a72b7d822b7f95",
        "hash": "6eacb57b63018acadfa96a3c700fb0df3257d05c",
        "modified": 1580478547559
      },
      {
        "_id": "themes/next/.git/objects/7e/2c69926c2166e656c6cabda7ca9711e6df8ede",
        "hash": "8eed424b32a030fbd22308a302b68aeb02e72fda",
        "modified": 1580873548355
      },
      {
        "_id": "themes/next/.git/objects/7e/4a2a09ace1f9ee4241d59bd774216483b73c9f",
        "hash": "02a36dea79e66a8191e06a21ea84d85aa055d930",
        "modified": 1579160278130
      },
      {
        "_id": "themes/next/.git/objects/7f/0eb7e6940dee1632dbd4d34446611907fd8454",
        "hash": "66089a33c9ee3f80a9260d02104a9e7afcc7bd91",
        "modified": 1580871959607
      },
      {
        "_id": "themes/next/.git/objects/82/1d545e25548e5f16ff928ef4b27c65947e4aac",
        "hash": "0821216431e19ef4cd21b0d9cee411e06059e306",
        "modified": 1580478547572
      },
      {
        "_id": "themes/next/.git/objects/82/66110f985ac2c91a6ef9c0c54c6d88f2565aa5",
        "hash": "6141737fa3145570933739f588c44624fa6a8783",
        "modified": 1578230505266
      },
      {
        "_id": "themes/next/.git/objects/7d/4c7b0ac4d51f7f2a664495804ae532f42104c2",
        "hash": "400f5345eb26f68b37c275a025d73cc6e795c310",
        "modified": 1579225683681
      },
      {
        "_id": "themes/next/.git/objects/7d/200ec2877ec248fc58329f94f876c7c6a8e8d0",
        "hash": "f2cb1356bea7e1f63e213c2f01da249e9e6faca1",
        "modified": 1580869487527
      },
      {
        "_id": "themes/next/.git/objects/83/5f55e92f3293054488c0a31ae25a39d54c2082",
        "hash": "1fecaef5da24c1a66b1590e647ec4ba78f54877d",
        "modified": 1578450721899
      },
      {
        "_id": "themes/next/.git/objects/84/03e8fd98452ae8d05ee42dfcf366b8ada1fd0a",
        "hash": "4271f252f6457934e378ea8a3a6e711340e43586",
        "modified": 1578450721901
      },
      {
        "_id": "themes/next/.git/objects/82/d628e4824ff2a1153bc904166be9f06fea1476",
        "hash": "19e4c36d7c3408e6753bfb42c2028630034fa51b",
        "modified": 1579160278167
      },
      {
        "_id": "themes/next/.git/objects/72/40b02ae1d1fa959ba067a27d022197baa457cf",
        "hash": "beb1f31ca0d4bfe717575262daaf7f199093f21d",
        "modified": 1579160278121
      },
      {
        "_id": "themes/next/.git/objects/84/a611f56aa11a961b536a220cc0827b869db381",
        "hash": "ebe5b1e0e73e9386573bb13bf168231c532eafd9",
        "modified": 1580869487236
      },
      {
        "_id": "themes/next/.git/objects/86/1ac828a1626c07e5759c14cd3b5e7ad8ae3d2c",
        "hash": "ec3b1d634781e55d40ea4dc660b34a5e7b58303f",
        "modified": 1580300445561
      },
      {
        "_id": "themes/next/.git/objects/87/305b105696b9c28859dfd2ee1487d9fa63516a",
        "hash": "2eeeacd87befc15699f1196c584ffe03cc246985",
        "modified": 1580622074956
      },
      {
        "_id": "themes/next/.git/objects/72/6ce63d8478039ee4f549bedea74fd55d1a112d",
        "hash": "197049eea00cc9031256150fea7735341b132e8d",
        "modified": 1579160278151
      },
      {
        "_id": "themes/next/.git/objects/87/be56779f6a6f9e173dada6d1f18d8380c7c8c5",
        "hash": "c84f6134e70951591830880ad9a9868a7f7fc367",
        "modified": 1580478547547
      },
      {
        "_id": "themes/next/.git/objects/87/9149e11756fb5b7bc156fade45869958ef2cb6",
        "hash": "d066662be6561643a16e51541066b76b9aeb524c",
        "modified": 1580783580996
      },
      {
        "_id": "themes/next/.git/objects/88/1112e15dcc3c37eb4c857577c69db94e82c5ac",
        "hash": "01af509fc4ed0fcf784b8b5bf9b2be1f6f4f3933",
        "modified": 1580869093709
      },
      {
        "_id": "themes/next/.git/objects/87/9fefc9b3c323d100300114e8ee1737134e380f",
        "hash": "98fa4fc8ce5c63fc4703eb2183ad390910ba177e",
        "modified": 1580878067274
      },
      {
        "_id": "themes/next/.git/objects/88/e91eee9debffaa3f3786a464149b30223de569",
        "hash": "cde0819047ce1d9215ba6601407b7b73c70f1040",
        "modified": 1580478547557
      },
      {
        "_id": "themes/next/.git/objects/87/f1a442a0d89565ae8e5d6aca0c8e72ef3707a9",
        "hash": "71397cbdc6e5aba1025ee1bbaba7ca3f1748fb71",
        "modified": 1580878067276
      },
      {
        "_id": "themes/next/.git/objects/89/20c62642100d592b50496f93a06e2348ab734d",
        "hash": "4a2a0c2b7013b36a628a417e50c5807f86be0c0d",
        "modified": 1580869487246
      },
      {
        "_id": "themes/next/.git/objects/85/5c9df6bccdf46961ef664af0dfa9ecaaa69dd0",
        "hash": "8d28f396dae7be7909756f504816ad9ac30c4cbc",
        "modified": 1580384731465
      },
      {
        "_id": "themes/next/.git/objects/89/0d6412262a857bfb7e79132a50505908ff9180",
        "hash": "1cf3af6e6fa66bb582aa16a8bf62ee7d580e7df3",
        "modified": 1580869487234
      },
      {
        "_id": "themes/next/.git/objects/80/9f071d74836bfd69888e6c949463293297e2c6",
        "hash": "cfa4a1016893dcc44173a9e80fd47c28d47609f2",
        "modified": 1580300445563
      },
      {
        "_id": "themes/next/.git/objects/89/716f9c751d6ca7f87f6e838e3ef1d7046128aa",
        "hash": "2eed4d2575a51627c17e03ddfc896771c6a37d1d",
        "modified": 1580869093716
      },
      {
        "_id": "themes/next/.git/objects/79/05ed1c54bc74bd4bd582dc17fcf469a7e90584",
        "hash": "6c6b161c8cb8f758f944452ed601939a620830aa",
        "modified": 1580478547534
      },
      {
        "_id": "themes/next/.git/objects/8a/a5b29b03bdbdf69bab1eb8cf5ba73ce740dc8d",
        "hash": "fedd55a55af46584016be675c66dd41b5d577e29",
        "modified": 1580300445537
      },
      {
        "_id": "themes/next/.git/objects/79/63bfc6e84f5feefae2d90140bf47a08e652fda",
        "hash": "dc12872dec580b256c6702734699e6ac8ed61f3a",
        "modified": 1580869487261
      },
      {
        "_id": "themes/next/.git/objects/89/b1b1127939a597aaef7c3f41af94adf7df178e",
        "hash": "8756752f9e2255310f6164c912570e55b10e64bc",
        "modified": 1580869093713
      },
      {
        "_id": "themes/next/.git/objects/79/f5226c8bd8ffa2ae9a7b7c11c15fc0b181c9b8",
        "hash": "5a01458271af1b50b82190ab48e2970f03af333c",
        "modified": 1579160278170
      },
      {
        "_id": "themes/next/.git/objects/90/d7e2048c914602331ee518c1be01b86d0deef7",
        "hash": "342e8db994512fe03d26e3dd3ecd421cb289997f",
        "modified": 1580869487239
      },
      {
        "_id": "themes/next/.git/objects/90/6e0ecb897cecb1a0ede43f62f8d6d466899b3a",
        "hash": "029dc26c32348e13bed99032e8a1bd2a4251691e",
        "modified": 1578230505277
      },
      {
        "_id": "themes/next/.git/objects/8b/4a6d2cd1174e0e4e00779d4f38a445e9e8586b",
        "hash": "05f2b86afa740ac22fa486cab6726519c95edc27",
        "modified": 1579160278124
      },
      {
        "_id": "themes/next/.git/objects/8f/81c0576dbeeda353ba7f3913f973a6dfdd6ef7",
        "hash": "aecb39bbb0a34d546a5c53cedb16f4a937a3a53a",
        "modified": 1580791854109
      },
      {
        "_id": "themes/next/.git/objects/94/84a3cf156a17c189d78166e90f74b013581e5d",
        "hash": "16b8add044eef7f718f5720ae3befae92dc57378",
        "modified": 1579225683672
      },
      {
        "_id": "themes/next/.git/objects/8f/91fd5e3faa77cf7465e3e50afc3fedbfa92b63",
        "hash": "894787756bff7f4f4b624c010cbd33aedaccff39",
        "modified": 1579225683667
      },
      {
        "_id": "themes/next/.git/objects/8e/2ce6b692f9dd87ef101608e658cf0b2a0048fe",
        "hash": "c2807ff1098629adc1248050ed785a27cc966819",
        "modified": 1580869093715
      },
      {
        "_id": "themes/next/.git/objects/94/5e886b0b37de302c7bbb9969fe60cac6546280",
        "hash": "2842354bd5b3e38ce1b0889f34e61b5a552336da",
        "modified": 1578230505269
      },
      {
        "_id": "themes/next/.git/objects/8e/125ef511c4bb2de762550c41acc1c861cf38ee",
        "hash": "0f6982fad749ba34f5a57bc0a2f3d4301db45a30",
        "modified": 1579160278155
      },
      {
        "_id": "themes/next/.git/objects/8c/2e3525d7bf5159e43990d94addf63455222ad0",
        "hash": "db211190beda4b53b9f929aadbbb57e216892a2b",
        "modified": 1580869487239
      },
      {
        "_id": "themes/next/.git/objects/94/686b2d34666675efc1f66068cfa810e2fb0ac4",
        "hash": "c1768753621d9b1cdf40fd1974129c2eaf5d345e",
        "modified": 1579160278166
      },
      {
        "_id": "themes/next/.git/objects/94/c05112982a36ffa67f1321a93a70d50095a463",
        "hash": "84096a8981ed68de54be5f647284d7d203cc332f",
        "modified": 1580622074961
      },
      {
        "_id": "themes/next/.git/objects/94/9f3db20004deebd7e006634b67a78b62ba8164",
        "hash": "093be454a156f4a570628b5a5c5651ce65579d83",
        "modified": 1580869093720
      },
      {
        "_id": "themes/next/.git/objects/8c/6ae5ce93e02ce24081047b841493f3189c5964",
        "hash": "eaa1f0005e633c12fd4a1ee2e628ccd6f7238e87",
        "modified": 1579160278168
      },
      {
        "_id": "themes/next/.git/objects/8c/9bff8309306d653767fd5e2dde70580e0a184d",
        "hash": "4721f55e52ddf27d04a47fb741f912e3a14e7238",
        "modified": 1580622074963
      },
      {
        "_id": "themes/next/.git/objects/8c/aa7001c50f15bb4c2f917765550d8b31c8f38c",
        "hash": "a5bdb824aeb3b39f721598ff9694c77345a64b1c",
        "modified": 1578230505279
      },
      {
        "_id": "themes/next/.git/objects/8c/c79e5ba775b63499644bcc22662991ef372da2",
        "hash": "b8afd8d2dc9ea8abe4ddfa8fb58437b9eaeda104",
        "modified": 1579160278124
      },
      {
        "_id": "themes/next/.git/objects/8c/a2a54779501b6306515e90d097eaad520f707a",
        "hash": "aaead1c23c5f10e6f5bc8bc8a61c5b1a8ce21462",
        "modified": 1580878067273
      },
      {
        "_id": "themes/next/.git/objects/96/d1a9fadae951bb91a5b69d1eaea66cfea53a82",
        "hash": "b427d42faa6a3cfd3279ece42d81a0c6bb91265e",
        "modified": 1580300445559
      },
      {
        "_id": "themes/next/.git/objects/98/fec246c5557baf7135a3a8c8126ad12016eb1b",
        "hash": "140f1b0ff6695b1a22109331da0842ba6ef55ec6",
        "modified": 1580869487242
      },
      {
        "_id": "themes/next/.git/objects/9e/05a79e1b609b337a4b0d5fafffeff757e1ba76",
        "hash": "0cb7363ac686b3e01a801fd09ed9872bec312e62",
        "modified": 1580869487254
      },
      {
        "_id": "themes/next/.git/objects/97/df81cd0616229af2340261f00238994bf45f98",
        "hash": "ae79e96e6170bd8c5fb1c9821b67d5f9906765fc",
        "modified": 1580783581012
      },
      {
        "_id": "themes/next/.git/objects/95/895afa4a47577e1448828493a061f1318e9916",
        "hash": "7601c82eff15fba8d64b2327c5b417d827fd9666",
        "modified": 1579160278138
      },
      {
        "_id": "themes/next/.git/objects/9e/9facfe0a1d1d9252947b1d608732d2c3d4114e",
        "hash": "739abae0d9f02a3cd7007a1aeae477cb2b3cbe3a",
        "modified": 1580478547579
      },
      {
        "_id": "themes/next/.git/objects/98/c1b14e21f2a6f5de357ba18f066ad7003d823b",
        "hash": "2564490358d797b0eb6d72688ed8e180695eca91",
        "modified": 1579160278157
      },
      {
        "_id": "themes/next/.git/objects/92/7416ebbb8a4d41db165fcf8e453053e3400760",
        "hash": "54af4222a26c405752c4725f33e5ed1be389b0d1",
        "modified": 1580869487244
      },
      {
        "_id": "themes/next/.git/objects/a2/7ff82efd26e028764046fe4295d474dbe72adc",
        "hash": "b8b93f6a7bcc77c24ef4783fe8ffacb6ff62edb2",
        "modified": 1580300445539
      },
      {
        "_id": "themes/next/.git/objects/9f/f54e2843b753bf4fbae3004943cbb7edda71d2",
        "hash": "cfdbeeea5af62462a1f91314e356fd26256e0ded",
        "modified": 1580300445559
      },
      {
        "_id": "themes/next/.git/objects/a2/bf69d389d2ba165b2372460335e956b60d4e98",
        "hash": "cb45f1c6cf236b9aca600ebee2ce0b30f3377a7f",
        "modified": 1580869487241
      },
      {
        "_id": "themes/next/.git/objects/9e/eaa08fc39e8517179e38c629c74b34aa7084f0",
        "hash": "3834dea81112eac9ca691b690dcc8770f8ee477e",
        "modified": 1580871959608
      },
      {
        "_id": "themes/next/.git/objects/92/301ac48b02ab5ae29d8866c637026f10aa68ee",
        "hash": "41c7f0f01f67adee1acc727aada3c016fd883d5d",
        "modified": 1580622074960
      },
      {
        "_id": "themes/next/.git/objects/a1/6b202da63a3332cc4156024e977e8d74d275b0",
        "hash": "edbc71e18102d59b171bfbf23dcfe0dd0e53d0c0",
        "modified": 1579160278168
      },
      {
        "_id": "themes/next/.git/objects/a7/eb82723e7e4e6251b26789f597b63fdd62a6a8",
        "hash": "716e866a729fbd72ca5a5674ea8b3674b2fb31f9",
        "modified": 1580478547573
      },
      {
        "_id": "themes/next/.git/objects/a7/4087513a01af8567c9752d26eb98f384d17650",
        "hash": "26488eb76caf1a3106df62792be9a799651da97c",
        "modified": 1580791854098
      },
      {
        "_id": "themes/next/.git/objects/a1/249b3711a3551ae7af05c5ca33968521ecbb39",
        "hash": "13a0309ef478729f88f0470135630fbca9b4191c",
        "modified": 1579160278135
      },
      {
        "_id": "themes/next/.git/objects/a7/1175bc41a24da5dc0062784f616c2fa829dce2",
        "hash": "c5fe34b93d4456d611eb957f588a186acffd321b",
        "modified": 1578450721900
      },
      {
        "_id": "themes/next/.git/objects/a8/1bcf99b5c2596a5e8c089586f3128d6cc050eb",
        "hash": "b9394e3db961e54a41634613763f5f68818cd9e3",
        "modified": 1580478547529
      },
      {
        "_id": "themes/next/.git/objects/a8/6418b87c839fe976725814e36979c56e21da2b",
        "hash": "a588434d051a47c8d56446cf3a41e204d70fa4dc",
        "modified": 1580869487259
      },
      {
        "_id": "themes/next/.git/objects/a9/310e75d494510df6f48de06d2d7ae30b672200",
        "hash": "d14915112f4b0982a7382f8aa81fd457fe6bb4c1",
        "modified": 1580869487241
      },
      {
        "_id": "themes/next/.git/objects/a8/15070eb5d004304894c7c462777ed14df15ed0",
        "hash": "1319887108a2c91899b1c704f6cb0cc1a6c9e486",
        "modified": 1579160278159
      },
      {
        "_id": "themes/next/.git/objects/a8/aead6dad8b1e4acd471250c5db2f0708e11329",
        "hash": "3b71e3a6cf056ea9199834e295dfc57f890e8855",
        "modified": 1580869287645
      },
      {
        "_id": "themes/next/.git/objects/a9/be0d2b4191f3f610175fc46b18cf1f7be750fb",
        "hash": "43d52816bbf39ccfba4171d316593c8b2d976307",
        "modified": 1579160278155
      },
      {
        "_id": "themes/next/.git/objects/9c/e6542845caf291bfdc25b7dd9d88d4cf4bd6c9",
        "hash": "9cd2624b755735b6e7914524bada4a01ac133c30",
        "modified": 1580869287644
      },
      {
        "_id": "themes/next/.git/objects/a9/4f03aad79868864050c330a740ed1bb42cc8b2",
        "hash": "7cab15babb426b79fdad42b7083e12f1cc809ea5",
        "modified": 1580300445543
      },
      {
        "_id": "themes/next/.git/objects/a9/d6249e91b135a5a2236eb28fff5a6be2735949",
        "hash": "123032801593359e52cd025dc1a8bd01fb1bc39a",
        "modified": 1580300445555
      },
      {
        "_id": "themes/next/.git/objects/a9/e8defc6f36d06e71437ae6375e779739d1a82c",
        "hash": "9376e0073e38b42f64e1b25b9b2abc73f9df1f18",
        "modified": 1579160278161
      },
      {
        "_id": "themes/next/.git/objects/9c/c258511297e5fc4d6f5ff867da1dc44da4e96f",
        "hash": "4166daa0920e2cbe8374efbefebb05cd00ab191c",
        "modified": 1580869093717
      },
      {
        "_id": "themes/next/.git/objects/9d/fc13db55dc112fc550021964f744548e7504cd",
        "hash": "6e5549d954abd0d5887499505d6a31f8782ae887",
        "modified": 1580869487250
      },
      {
        "_id": "themes/next/.git/objects/9d/5de6053bff83db466d4f72637bc8173d8f2ba8",
        "hash": "b07b99274dfadd7490dc8f6a21baa6907e4bd381",
        "modified": 1580869093699
      },
      {
        "_id": "themes/next/.git/objects/a5/9dda71e17813bb8f10116153f50f773fa69c30",
        "hash": "a29c1aef4c6b2f4ead538a4883d954e64ba3876f",
        "modified": 1580715426043
      },
      {
        "_id": "themes/next/.git/objects/a5/cebed657721555301064d746a53c48869ff3de",
        "hash": "000bbd23c62b61c29d019f3e8408787f4eb4522f",
        "modified": 1580869487523
      },
      {
        "_id": "themes/next/.git/objects/ab/23ba0503fac9d01a5373fe8b5b80189c3e045e",
        "hash": "ef37c8c386f69d5b2ad025e75742554cb4502323",
        "modified": 1580783581004
      },
      {
        "_id": "themes/next/.git/objects/ab/87c2d81d502398fe25502cb18bc49a36cff784",
        "hash": "f73d48870cfe7b4f5d749e363a3c088ab0341f3a",
        "modified": 1579160278131
      },
      {
        "_id": "themes/next/.git/objects/ab/eafb7785ea170a47aa469374d00323b2ffebe4",
        "hash": "f36224c299b1f2a53fc6bb7f68ad6c5e783f5972",
        "modified": 1579160278152
      },
      {
        "_id": "themes/next/.git/objects/ab/a17e86b26d3d45c61f5b795f334915bb3e70cc",
        "hash": "a05c065fa66fb44fb46bc56627251fa10e53b723",
        "modified": 1579160278150
      },
      {
        "_id": "themes/next/.git/objects/ad/f29b40da83e4821c62804809d71fcd6134b193",
        "hash": "d3023b032b5db81703a323458ec955c2d89d5dc7",
        "modified": 1580300445550
      },
      {
        "_id": "themes/next/.git/objects/a3/ea8605f1c3ad10a8375e2588f174d4adccb5fc",
        "hash": "731a1eea1a5a9600b694dc1582b34df67feb434d",
        "modified": 1580715426045
      },
      {
        "_id": "themes/next/.git/objects/b1/4457d132ec962377678cd693a5e40a70e27c1c",
        "hash": "793a8e949373c54af69b099b7b79b7c3ebf2bd75",
        "modified": 1579225683674
      },
      {
        "_id": "themes/next/.git/objects/b4/0294a6385e47b8b15e6b1481e9d461b2160ea0",
        "hash": "6a702d8603afdd278e2d76e451e589bab9b8d88f",
        "modified": 1580478547562
      },
      {
        "_id": "themes/next/.git/objects/ad/40c18ec73c9497ccca5136d3cf7b3094c9319b",
        "hash": "d8b91e404a9523dcd19936d9e49d2f2d1fce0a8b",
        "modified": 1580783580815
      },
      {
        "_id": "themes/next/.git/objects/b4/06e0280f6a14057f5127a23b45669aaa76a1db",
        "hash": "993054e0ec902c17846aaa4adab41e1a3d8e6e6e",
        "modified": 1580478547550
      },
      {
        "_id": "themes/next/.git/objects/ae/9ab8e4ad4f23efa2d3a80c5c04fa6d759c3ab5",
        "hash": "094937a189185793832dfb0f5c2f984af685f635",
        "modified": 1580869487258
      },
      {
        "_id": "themes/next/.git/objects/b6/6a79e3afd51cef32abffb4bae0accc99926730",
        "hash": "4926b547aa28e6177bc7a6117b028c995ae939e6",
        "modified": 1579160278160
      },
      {
        "_id": "themes/next/.git/objects/bb/1f2cd04318a52517b59d9b12b51948a3b03435",
        "hash": "96caa12c6908a21245dc8005a2eb45bf59ec1a99",
        "modified": 1580478547536
      },
      {
        "_id": "themes/next/.git/objects/b7/6951162573240d1d9050d260aa41b355057c90",
        "hash": "38c4912811307b3cbc4353771e994a9c1e3ae48a",
        "modified": 1580444760548
      },
      {
        "_id": "themes/next/.git/objects/b0/93fb530fd27babdaf70701b13483e1a3ad2342",
        "hash": "4a099d623ee53ff643b7e37036c4fa7aba765c0f",
        "modified": 1580478547563
      },
      {
        "_id": "themes/next/.git/objects/b8/1e47a4a67cb2d7fbb9c9f16ff6a6b854c60fea",
        "hash": "8f584a2c19333fea6fec5045f480d47069fa16d8",
        "modified": 1580869487256
      },
      {
        "_id": "themes/next/.git/objects/b0/189110a1f17a498113c46ba530fd48fe959ff2",
        "hash": "619e0a5ed447f7cb7c8d5e342dd02d102653e622",
        "modified": 1579160278146
      },
      {
        "_id": "themes/next/.git/objects/b7/b4ae3091b5801095852b36cb2bea388a2e1b97",
        "hash": "316e420995e7e670acc4bf59c80a0c4ddc314a94",
        "modified": 1579225683665
      },
      {
        "_id": "themes/next/.git/objects/bd/56c0ff203a39433e1b88808217ae155690f48d",
        "hash": "2cb9703765e0cc4151cf48477f8a5d988d32ade7",
        "modified": 1579225683664
      },
      {
        "_id": "themes/next/.git/objects/bd/45710bf60e5dd036a1b8c5bc46c5c511143ca2",
        "hash": "8af971691618e8e5615fe96ce3cd7f01a8032530",
        "modified": 1580869487263
      },
      {
        "_id": "themes/next/.git/objects/bd/ad016ecc30eebf975bc5e6aad12dbef1575f8f",
        "hash": "17d529dfdc132fe2e051660490933515bbacb6a3",
        "modified": 1580300445544
      },
      {
        "_id": "themes/next/.git/objects/bd/e6d4b5db8dbbe2285fec5e1483d7beab50e4c2",
        "hash": "0f7bb80357274ad61754870289d50d4b0db700b5",
        "modified": 1579160278126
      },
      {
        "_id": "themes/next/.git/objects/ac/d0565bf9f62b59bf650b5802e3600194f03586",
        "hash": "2edde72b5860b1da4aa3a477aba4c2b2f1c8829e",
        "modified": 1580478547582
      },
      {
        "_id": "themes/next/.git/objects/bf/bd4ce50e6c5549b5b81881d0a039064f009b84",
        "hash": "5eac41180e6559c6257fb960456135e8ade62d81",
        "modified": 1580478547547
      },
      {
        "_id": "themes/next/.git/objects/bd/c8ab682b6670216ee2625c2e7d22bbecad8d8d",
        "hash": "eef166dc090ab4ccdd3a284a3f6038840a15e521",
        "modified": 1580783580995
      },
      {
        "_id": "themes/next/.git/objects/be/537e24cadd52388c7bd3b55aeeabf87c41deb2",
        "hash": "6ffb5534cc3ca43f8caf557aec49c5ca7325abc1",
        "modified": 1580869487248
      },
      {
        "_id": "themes/next/.git/objects/c1/258742fd726606a48908603ed675a854916fec",
        "hash": "fc6ec36734cb34017c611fd61d5584d33a0dbf24",
        "modified": 1580384731464
      },
      {
        "_id": "themes/next/.git/objects/c0/c5921d11a1c284cc17c41340b0762a10010c05",
        "hash": "51a756db9a5f5490c7e93ee44fd24c4d1a41c17d",
        "modified": 1580384731457
      },
      {
        "_id": "themes/next/.git/objects/c0/638cfe562e55741c9fb715d179196d3914ef3f",
        "hash": "bd2bbbb2fb81312a9ac855c94db659838b6a75b5",
        "modified": 1579160278158
      },
      {
        "_id": "themes/next/.git/objects/c4/4c84300343430e3b9aadb1997e85c2ea59efdd",
        "hash": "73655f261dee0a5f0cbc1d15cce8262591a7e79d",
        "modified": 1579160278131
      },
      {
        "_id": "themes/next/.git/objects/c4/bbe405840f255f04f72d8a533bf6cb5853ddea",
        "hash": "271925ab9e180837912303d7c6d517a9c8fc7a35",
        "modified": 1580478547566
      },
      {
        "_id": "themes/next/.git/objects/c3/06b583f2b57ab535008206121ca9510fea885a",
        "hash": "a0acd6defb4bbc2339f55ad8515c039cefdcfc8e",
        "modified": 1580478547540
      },
      {
        "_id": "themes/next/.git/objects/c3/4578f955b21a81bf18988710374d4528568ae6",
        "hash": "a3742cb1370564fefccae406d01d12da590e983e",
        "modified": 1580478547539
      },
      {
        "_id": "themes/next/.git/objects/c1/663c072909770cbca29ef4f863b70365914433",
        "hash": "369aed6f7de4373e7fbc5d2d6fbe3fa01f04dbc4",
        "modified": 1580783580817
      },
      {
        "_id": "themes/next/.git/objects/c3/9a85e91732b1635fc65ed40a9beda69a70dc0d",
        "hash": "2a72291cc870edba0e44065c00d536ab842ca2fe",
        "modified": 1580478547567
      },
      {
        "_id": "themes/next/.git/objects/c4/5bf7ea335028c86bd2d341cf213d31242e6f82",
        "hash": "1c570dbc7834ef88718f3353058680fa84222112",
        "modified": 1578230505265
      },
      {
        "_id": "themes/next/.git/objects/ca/7e7139dff1c4c373c0b181100e975838f32ef7",
        "hash": "b05dac312069f12bcb76bfe14b8588087ffcea0a",
        "modified": 1580869093704
      },
      {
        "_id": "themes/next/.git/objects/c4/d1f767ce5a6395fa6d62e4afb2fce6eac0ce3f",
        "hash": "5fe968db9e9d6146523f2f317740a58981760999",
        "modified": 1580300445537
      },
      {
        "_id": "themes/next/.git/objects/c4/796bdeb50d38d4c1ee581156b9ea66223be938",
        "hash": "31f21c2ecccbe218400425e7bcacbb378ea2b9ae",
        "modified": 1579160278122
      },
      {
        "_id": "themes/next/.git/objects/cb/18458063de25711a4d82c303cfd9c9dae0a1fd",
        "hash": "f286778135ae1ed9e7eb58551f1f61ad0a6ba868",
        "modified": 1580300445554
      },
      {
        "_id": "themes/next/.git/objects/cc/a24cac5cb5f300869356d674499641db6387d1",
        "hash": "a7c484010dfe4ec8c9392b3e4db3f8b312543919",
        "modified": 1580869093720
      },
      {
        "_id": "themes/next/.git/objects/cc/97f6c36d52511d5242ed63149bed85970d68e1",
        "hash": "45b5831cc77595826d6852f468b2811d981ec0e7",
        "modified": 1580300445542
      },
      {
        "_id": "themes/next/.git/objects/cc/afb172a5629b4cf0a2ef7b232ed6db05ab12f1",
        "hash": "7d3612efd25b01b72a90157da6f71b1237c5a2cb",
        "modified": 1579160278127
      },
      {
        "_id": "themes/next/.git/objects/cd/4b12119a202b146fa4eb670510a192502b0785",
        "hash": "5a36acd0fe861f65a728c77db909579838d9d38f",
        "modified": 1580478547524
      },
      {
        "_id": "themes/next/.git/objects/ce/7e03d8723ca1d47481fe4e55b74c6b2d107c84",
        "hash": "3fdf56f3aaa904ec4ff831a079f4f99e98ff7697",
        "modified": 1580869093708
      },
      {
        "_id": "themes/next/.git/objects/c6/ed63130700d5ca099aefef2f425fc8c67989e2",
        "hash": "6da5c0bd8c2182b530e2e8e0049415ecd4c74a1c",
        "modified": 1580478547522
      },
      {
        "_id": "themes/next/.git/objects/ce/5464138e5438a2c0cd4c895d8e06646b8b5bda",
        "hash": "ceccb78df59df44210ba41b5d3cbe9962b69fea8",
        "modified": 1578230505274
      },
      {
        "_id": "themes/next/.git/objects/bc/8cfe06e2807bd6de8e0343c4127fc6eb2985bf",
        "hash": "8f0187f090553d67ea14eaa9876963e021526995",
        "modified": 1580478547568
      },
      {
        "_id": "themes/next/.git/objects/d3/014390bc3aebc19b2aa95c860e874ef2cebc9c",
        "hash": "6a90745cf635aeceb4488d945b8f689a818fbf27",
        "modified": 1580478547581
      },
      {
        "_id": "themes/next/.git/objects/d5/5a0fa8e84510958244abb0507c22767f701775",
        "hash": "7af8d92b0a1073e98480edbf8aa93ff0e8c55ffe",
        "modified": 1580478547557
      },
      {
        "_id": "themes/next/.git/objects/d2/28536cb9c0fc394dc7744c11f2103be68de64e",
        "hash": "5ec0302b03120e09f8277a46c70e1a954354bb1c",
        "modified": 1580300445551
      },
      {
        "_id": "themes/next/.git/objects/bc/7e80eaee994e0cfdf37f2d25ce81f0d386e86e",
        "hash": "c540f88d1dd1f690fb3602bfab54396c65de5576",
        "modified": 1580869487262
      },
      {
        "_id": "themes/next/.git/objects/d0/4333da837b329449ca81db75bbd85b0acb087e",
        "hash": "a97aab7cb3ff3c24d601621386418a537cf04fcf",
        "modified": 1580783581005
      },
      {
        "_id": "themes/next/.git/objects/d2/f36f683a979c6dcfe4abcd25ec634620e413c2",
        "hash": "19657f8637e010c5306c2ef3c9f642100c156381",
        "modified": 1579225683673
      },
      {
        "_id": "themes/next/.git/objects/da/5aef984f5c128fc154a690bca08b94712f7c12",
        "hash": "9f0c1796eac7786deafb1ac83cc15b442f1c5ec5",
        "modified": 1580869487249
      },
      {
        "_id": "themes/next/.git/objects/d6/3416d304ae4b42ebee2355703a468a8c2e60b1",
        "hash": "7019410c4f30b9aef64dc4601f0bbe299f60f001",
        "modified": 1578230505277
      },
      {
        "_id": "themes/next/.git/objects/d3/c87b06326e476d72536e74793d8b00f1433b47",
        "hash": "b50ed54a0af086df926a0f319eafd50c9b25e715",
        "modified": 1579160278163
      },
      {
        "_id": "themes/next/.git/objects/da/99072b45d6af58964da4188fb4c48ef16e54a9",
        "hash": "e2fdbeb9471d390027b7b78be2987fd2a53f4ec6",
        "modified": 1580478547541
      },
      {
        "_id": "themes/next/.git/objects/d7/c47d3c3a2698024e33d9b82e47e0adea51a3c2",
        "hash": "e5f40e036c1c82d854297fa144e30435097d8c91",
        "modified": 1578450721894
      },
      {
        "_id": "themes/next/.git/objects/d1/9f4fb87e3fefa3fa0c9b44dae3d41f55143a28",
        "hash": "6295ee357168f9c4bc3a4288f6a58263a1423cbe",
        "modified": 1580873548355
      },
      {
        "_id": "themes/next/.git/objects/d9/cb8aaeeec625b475ded796be711fee61f9f71a",
        "hash": "c598156b81e4d5dddb8944f4418f16f98f334274",
        "modified": 1580478547532
      },
      {
        "_id": "themes/next/.git/objects/db/201f7243ee2faa1d0bb5eb972227f3e70caad4",
        "hash": "c70b1f2741dc7586d45d70e4bf7ccb8b5f89ace0",
        "modified": 1580478547535
      },
      {
        "_id": "themes/next/.git/objects/dc/a85ad881f987c5d156763e56f7df62d3561ac0",
        "hash": "a16043291e2f2553cb8d66d40f34bf39f5bb4e7e",
        "modified": 1580873548353
      },
      {
        "_id": "themes/next/.git/objects/da/a3e1e58555ba05c112bed299a42a1b79254ba8",
        "hash": "43eed2c637a5605bb128c15a20b7b1c59ea0fe43",
        "modified": 1578230505268
      },
      {
        "_id": "themes/next/.git/objects/df/bbf8453040a9298faf6b928dccac08d460b387",
        "hash": "10618bfb41d2fcdfdc0f21f246a7a7654cddc70f",
        "modified": 1580478547556
      },
      {
        "_id": "themes/next/.git/objects/db/6423e62aceefe6415ca28d4039aeb4ba57df51",
        "hash": "9a42bf519b99707f249f6d557388ff983bedbad0",
        "modified": 1580869093718
      },
      {
        "_id": "themes/next/.git/objects/df/d0399c681467dd6355e18f2a665c6103967836",
        "hash": "8b326f3d2faf65b86abc7f4bf346c5b6668c9377",
        "modified": 1580478547561
      },
      {
        "_id": "themes/next/.git/objects/e2/7efbd64063882e952727c13ff1c18bf96d2eee",
        "hash": "a322521e0e89b641f18b67e17aa59a1383dcf03b",
        "modified": 1580791854109
      },
      {
        "_id": "themes/next/.git/objects/dc/a93d2ad0131daecad1a0ab3c44e1804ca9e5fd",
        "hash": "bf3b7fb76f6836d82fe73665ea7a9ce6b7a13589",
        "modified": 1580384731463
      },
      {
        "_id": "themes/next/.git/objects/df/cd5c5873a832f0326e2e209edf86d362859824",
        "hash": "3836047e2161e99d0d32fffc52e5f3318d1416a9",
        "modified": 1580384731459
      },
      {
        "_id": "themes/next/.git/objects/d8/32235abb4e6ff2cb22bb13bccbfb63a3776cd8",
        "hash": "e854cbca1b93adaed327e401ccca909d48ae6429",
        "modified": 1580869093702
      },
      {
        "_id": "themes/next/.git/objects/e5/032b59d3a3a5f71949ea60ff6592b315f0b887",
        "hash": "8ce76e2072b4acc77d8e78f508e47d4d98104d20",
        "modified": 1580791854103
      },
      {
        "_id": "themes/next/.git/objects/e2/757c39d5c777ce9ee729bb0caeba3edacca02c",
        "hash": "d026724301cd2cd2129f93b7f8825e5f7402f08c",
        "modified": 1580300445538
      },
      {
        "_id": "themes/next/.git/objects/e6/c63cea9716d13c82e3b08943cac6806c1e2a38",
        "hash": "492ced68e08eb6280b12bb96a93dd678cbfe6ad2",
        "modified": 1579160278136
      },
      {
        "_id": "themes/next/.git/objects/e0/02137a9b7372178c2fb060da5a89e5b40899c0",
        "hash": "f504c6e2cd06350cff43ae905297f3d8e5c92730",
        "modified": 1580869093699
      },
      {
        "_id": "themes/next/.git/objects/e0/7c0c38415764ee2c7a887c85db8827b844b386",
        "hash": "00f73324d063b67f0ce3933f2837ed1a128a08db",
        "modified": 1579160278150
      },
      {
        "_id": "themes/next/.git/objects/e0/cb0fe4541edf9d4572c6afa22851ddbfaa9c5b",
        "hash": "3ceaa6299d99f651ad1ba89db48b1867f09058b1",
        "modified": 1579225683680
      },
      {
        "_id": "themes/next/.git/objects/e4/6574f93950116a89eab6f4de6cd4eaa07747b3",
        "hash": "2ada5a150e97298481d240f8e62187570f44dda5",
        "modified": 1580478547544
      },
      {
        "_id": "themes/next/.git/objects/e4/6b4cd9780abb0442a1a11ea8e0477eabd3ef23",
        "hash": "665e24a50191c7462bb7b9377531d28374e0671b",
        "modified": 1580478547565
      },
      {
        "_id": "themes/next/.git/objects/e8/78ac3d76969d037c070ba74fbadf728436c386",
        "hash": "8c653cb16de5feccff252f2ad854a21794cdf578",
        "modified": 1580478547544
      },
      {
        "_id": "themes/next/.git/objects/e9/3b8aaa737695d65e77c39a34ac7f7a59055b67",
        "hash": "445448e3f4fd73d8df762b7b5c4d701d62aba63c",
        "modified": 1580869487240
      },
      {
        "_id": "themes/next/.git/objects/ba/b1cb4057667e54006e9687efa99044417cf021",
        "hash": "eaad8fdcc176f229cb8b4786cf8b06cbc7846c40",
        "modified": 1580444760546
      },
      {
        "_id": "themes/next/.git/objects/ea/1daf3e9498d2e2f8ef07282e2324a5c341f47d",
        "hash": "416276dbf79089930348f185e11c4f5e4467512b",
        "modified": 1580300445546
      },
      {
        "_id": "themes/next/.git/objects/ba/c59f1db0c9ded4cba45a29fe02d872ddf3772b",
        "hash": "b8f588da6ee40ee3be4c8df29243e792c5975b9c",
        "modified": 1580869487261
      },
      {
        "_id": "themes/next/.git/objects/e7/58eb6aed0315fca27aa6c72ac057c4e3628a7e",
        "hash": "b9d52a79a7730a0eeada55ce287a79b2f51ab356",
        "modified": 1580878067270
      },
      {
        "_id": "themes/next/.git/objects/ea/6787e736f5096b043f56afb2b26dc9e4aa3d64",
        "hash": "b3006d0cff4322da86f84208a34a70d8ce9c30b9",
        "modified": 1580478547530
      },
      {
        "_id": "themes/next/.git/objects/ee/081bea1ddc430f6702a17c5ba62b8cbca62f60",
        "hash": "f4c17af11a1affa8e378c7a4c3b686c111fa43ac",
        "modified": 1580300445552
      },
      {
        "_id": "themes/next/.git/objects/eb/4b730984126cc7d744309cedf3ef256797099a",
        "hash": "f84aecaf65280070b12a0f8be779cf505208f9a9",
        "modified": 1580869093702
      },
      {
        "_id": "themes/next/.git/objects/ef/a5441aa44d66b3233d0b909c9bc5329543eb93",
        "hash": "9e16b630fc88e5b4c52c229795cd86d19a9feaf9",
        "modified": 1580478547561
      },
      {
        "_id": "themes/next/.git/objects/ea/6b2b4343e04467bb98c5bdacf8bd71ff5eaa47",
        "hash": "7ea0b97accaf10d60ddd92fe21718fa436119908",
        "modified": 1580871959608
      },
      {
        "_id": "themes/next/.git/objects/ee/17f1b64a1001e23db5b7970588abe9ec7e652a",
        "hash": "ec7e96f62cdd6a2f869b9de5c0424b62dd5a6edf",
        "modified": 1580783580991
      },
      {
        "_id": "themes/next/.git/objects/ec/80c640c1f0485f56cb9550533aef1322fa0c21",
        "hash": "b4a98c0bd109a850474feb2632776b5b0e93e590",
        "modified": 1579160278123
      },
      {
        "_id": "themes/next/.git/objects/f4/05d1dee78556af398bdaad0afa3195fa67e2c4",
        "hash": "d77b393663c1ab32f7d8d3d474712c0da6ce40cc",
        "modified": 1580791854097
      },
      {
        "_id": "themes/next/.git/objects/f1/70e4ba313a3a596aea6fd60c9bfda08ebacc72",
        "hash": "ecd2733fafabb69dea600f3cca02b706af4c6abb",
        "modified": 1580873548354
      },
      {
        "_id": "themes/next/.git/objects/f3/8d341b039b9e3c1b96880da9f62d8b3e4d7ba8",
        "hash": "700956124e8aa54ac53befb0eb296807cdc2a03c",
        "modified": 1579225683666
      },
      {
        "_id": "themes/next/.git/objects/f1/a26d9f7ea675b22523a282ba0a135f76122d78",
        "hash": "0bb196091b2873f319e2d98f9b1c3256c232ca32",
        "modified": 1579160278167
      },
      {
        "_id": "themes/next/.git/objects/f1/e7acb4d6d0edd11c851e8218617eade4139913",
        "hash": "f9afa5aac9f905353e8243fe2eed33767ac5cd1e",
        "modified": 1580869093695
      },
      {
        "_id": "themes/next/.git/objects/f6/26f2da69f72ab8aa00f382e4f2784c604b33b8",
        "hash": "dbf35100100dcbfd27717ede1a5fc598169e6d12",
        "modified": 1579225683677
      },
      {
        "_id": "themes/next/.git/objects/f1/e5e15e222934e5045710f3156276f1c72e7e6a",
        "hash": "e3ad395a3d7da0df4c1051833425d26d5c260460",
        "modified": 1580715426038
      },
      {
        "_id": "themes/next/.git/objects/f0/1bf7486591300a900823e9bce87526b30bc196",
        "hash": "319241c8c79b28adcadd23eadeb8b39a1b3b01f5",
        "modified": 1580869093693
      },
      {
        "_id": "themes/next/.git/objects/f0/df87c82488141f2ccc46018d755df0d938bfd2",
        "hash": "99f5b15bb99441e7282276ededfc49b9ceca2aac",
        "modified": 1579225683676
      },
      {
        "_id": "themes/next/.git/objects/f0/e85fa693c4dea5e209c30f287fc6ada49a535e",
        "hash": "69148e0a625db335e25b7514f1dff2808722283f",
        "modified": 1580869487530
      },
      {
        "_id": "themes/next/.git/objects/f2/4b41b2acb4050843c039dd1df04378221f01ef",
        "hash": "a021a13bdce660b314cea58204ebf9efd1f0e422",
        "modified": 1580869487259
      },
      {
        "_id": "themes/next/.git/objects/f9/1c02c3de6142073a087cb0bb2c4815a9babef6",
        "hash": "ddd3db727237b6d1d49a9205c3092e3ce494e207",
        "modified": 1580791854104
      },
      {
        "_id": "themes/next/.git/objects/f7/7a3b8192ef5e85fbb66d58f35db146d86a4856",
        "hash": "0566a947b68958f930be74ed0f9aca5db79ec52c",
        "modified": 1580783581007
      },
      {
        "_id": "themes/next/.git/objects/ed/eecede24f05acf3fa67520c75304cfd49faad4",
        "hash": "b41ac896ae379ff57027dda73ffa95a3421cc1eb",
        "modified": 1580478547578
      },
      {
        "_id": "themes/next/.git/objects/f7/8ee6bdcc5abf044d686fa3b8285f5991ddfe1f",
        "hash": "9f5d2748763146ecd9b0bfbc9526320c676baad5",
        "modified": 1580869487524
      },
      {
        "_id": "themes/next/.git/objects/f5/8633240485cc86b17b77ab3e804d8db58f20da",
        "hash": "4815f91b0207bd0c442e0948593387646f0a2c39",
        "modified": 1580869487258
      },
      {
        "_id": "themes/next/.git/objects/f9/26de0c0bc34e838c5ec1d3a032be0267d4096b",
        "hash": "3c2da73ce2ac5ffbef75521b11c5b124a746ba4f",
        "modified": 1579160278144
      },
      {
        "_id": "themes/next/.git/objects/f5/9b3b6dadfa21536e4df3578e8768d54813b43e",
        "hash": "5b7bb572e2bd4da886b608958557b77d8cfedefa",
        "modified": 1579160278142
      },
      {
        "_id": "themes/next/.git/objects/f5/c208813d9f03bc3e3062e0ddbc4739d07e86aa",
        "hash": "608cd1af06f74dcc7f414afd77d6c28a11dee2fd",
        "modified": 1580478547533
      },
      {
        "_id": "themes/next/.git/objects/f5/79a0da3ea904b0d4ee0d6aff4b6f9df1072153",
        "hash": "dbd25bc6d135066c7651c343d1baaec1bad6d9fe",
        "modified": 1580869287645
      },
      {
        "_id": "themes/next/.git/objects/fe/b1429323e6b97672b7b1c7e32a239afa517f40",
        "hash": "da52420cc04c6a75c6dc0443d1caa7517764a657",
        "modified": 1580478547572
      },
      {
        "_id": "themes/next/.git/objects/fe/1b1c0709476bf3ea3418f9c56621a9fb58f573",
        "hash": "910f5ab3eaaa839cf25f616b1f07333de09583aa",
        "modified": 1580478547581
      },
      {
        "_id": "themes/next/.git/objects/fe/d5f15855aeba55a0b9ba32698dcfea2c98b6c6",
        "hash": "9be3ad5403b405c5aa3eefbad2794cd6409ea85d",
        "modified": 1580869487251
      },
      {
        "_id": "themes/next/.git/objects/fd/5d0c06509edbe0314c351da47605abe9b7a184",
        "hash": "711445b94c260178c3039c3dbe4c25c29913bd20",
        "modified": 1578450721895
      },
      {
        "_id": "themes/next/.git/objects/f8/5f26dde4340e3cae4f5a6c1657acc8eef69d3c",
        "hash": "9cf393d9612bf14b477cf9a491bf33a9e2d779dd",
        "modified": 1580869487252
      },
      {
        "_id": "themes/next/.git/objects/f8/64d44f25189035aa5f7c92ce466b035c7763e0",
        "hash": "a9cb0f8afcce1ca8339f3eca7ea96bbcca905cf4",
        "modified": 1580783580814
      },
      {
        "_id": "themes/next/.git/objects/fb/73be769eae42726331c007676a6f68316adf98",
        "hash": "2d511fc0ff857449feb953527875f9aa365bb639",
        "modified": 1580869487253
      },
      {
        "_id": "themes/next/.git/objects/fb/8e04c31f8c965a107ecf719f52d61db3ae09bb",
        "hash": "db263d5a4d89bb08e390940eaaadadb86352ea32",
        "modified": 1580300445557
      },
      {
        "_id": "themes/next/.git/objects/fc/a796ac42e70ff0726009fe0c1d10897cc6b067",
        "hash": "6961c73f7960d3a7c05ebb054b9884a2c9f4e731",
        "modified": 1580869093711
      },
      {
        "_id": "themes/next/layout/_partials/head/head-unique.swig",
        "hash": "1638483d2d2dad1da4c841a6fb9f6ee96b850187",
        "modified": 1577515674321
      },
      {
        "_id": "themes/next/layout/_partials/head/head.swig",
        "hash": "0172055d118d1d7f4c8379c8495c1ee1aa50c7d9",
        "modified": 1580875128320
      },
      {
        "_id": "themes/next/layout/_partials/header/brand.swig",
        "hash": "7487ca8f0e4b16351ea0d6b35dc52b0d32176d57",
        "modified": 1577515674321
      },
      {
        "_id": "themes/next/layout/_partials/header/index.swig",
        "hash": "30528a8da30994b1ef9355a72b09b2cd85a7c0e9",
        "modified": 1577515674322
      },
      {
        "_id": "themes/next/layout/_partials/header/menu-item.swig",
        "hash": "e6076865dba066c5f0008e22217efb850d5af69c",
        "modified": 1577515674322
      },
      {
        "_id": "themes/next/layout/_partials/header/menu.swig",
        "hash": "bbf0c8e42491fac70f4f8165224f1d7d92a040d7",
        "modified": 1577515674322
      },
      {
        "_id": "themes/next/layout/_partials/header/sub-menu.swig",
        "hash": "54ba9508a901c295a02c8e34e9cece7c7dcad518",
        "modified": 1577515674322
      },
      {
        "_id": "themes/next/layout/_partials/page/page-header.swig",
        "hash": "a56e4f6ad95c106f361d354f828d1ef4810b1d76",
        "modified": 1577515674322
      },
      {
        "_id": "themes/next/layout/_partials/page/breadcrumb.swig",
        "hash": "c851717497ca64789f2176c9ecd1dedab237b752",
        "modified": 1577515674322
      },
      {
        "_id": "themes/next/layout/_partials/post/post-copyright.swig",
        "hash": "94d54b0c65d504f772af1e62424952e092b6c21d",
        "modified": 1577515674323
      },
      {
        "_id": "themes/next/layout/_partials/post/post-footer.swig",
        "hash": "8f14f3f8a1b2998d5114cc56b680fb5c419a6b07",
        "modified": 1577515674323
      },
      {
        "_id": "themes/next/layout/_partials/post/post-related.swig",
        "hash": "f79c44692451db26efce704813f7a8872b7e63a0",
        "modified": 1577515674323
      },
      {
        "_id": "themes/next/layout/_partials/post/post-reward.swig",
        "hash": "1b7faa20a458b46369779b57bcc695bbc5d1c13a",
        "modified": 1580875128321
      },
      {
        "_id": "themes/next/layout/_partials/search/algolia-search.swig",
        "hash": "48430bd03b8f19c9b8cdb2642005ed67d56c6e0b",
        "modified": 1580791905048
      },
      {
        "_id": "themes/next/layout/_partials/search/index.swig",
        "hash": "d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93",
        "modified": 1577515674324
      },
      {
        "_id": "themes/next/layout/_partials/search/localsearch.swig",
        "hash": "2791a8dc20a276704fc8b03f9822f76578a9152d",
        "modified": 1580791905048
      },
      {
        "_id": "themes/next/layout/_partials/sidebar/site-overview.swig",
        "hash": "716b78cd90addc4216413719554721cb362b0c18",
        "modified": 1577515674324
      },
      {
        "_id": "themes/next/layout/_partials/post/post-followme.swig",
        "hash": "14c33bd544903e74388739599fffe3ecb66ed4b0",
        "modified": 1580695389846
      },
      {
        "_id": "themes/next/layout/_scripts/schemes/gemini.swig",
        "hash": "1c910fc066c06d5fbbe9f2b0c47447539e029af7",
        "modified": 1577515674325
      },
      {
        "_id": "themes/next/layout/_scripts/schemes/mist.swig",
        "hash": "7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f",
        "modified": 1577515674325
      },
      {
        "_id": "themes/next/layout/_scripts/schemes/muse.swig",
        "hash": "7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f",
        "modified": 1577515674325
      },
      {
        "_id": "themes/next/layout/_scripts/pages/schedule.swig",
        "hash": "a2bb0bec243685e670b60a3d54142950adc03af0",
        "modified": 1577515674325
      },
      {
        "_id": "themes/next/layout/_scripts/schemes/pisces.swig",
        "hash": "1c910fc066c06d5fbbe9f2b0c47447539e029af7",
        "modified": 1577515674325
      },
      {
        "_id": "themes/next/layout/_third-party/analytics/baidu-analytics.swig",
        "hash": "4790058691b7d36cf6d2d6b4e93795a7b8d608ad",
        "modified": 1577515674326
      },
      {
        "_id": "themes/next/layout/_third-party/analytics/google-analytics.swig",
        "hash": "2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b",
        "modified": 1577515674326
      },
      {
        "_id": "themes/next/layout/_third-party/analytics/growingio.swig",
        "hash": "5adea065641e8c55994dd2328ddae53215604928",
        "modified": 1577515674326
      },
      {
        "_id": "themes/next/layout/_third-party/analytics/index.swig",
        "hash": "1472cabb0181f60a6a0b7fec8899a4d03dfb2040",
        "modified": 1577515674326
      },
      {
        "_id": "themes/next/layout/_third-party/chat/chatra.swig",
        "hash": "fdcf006e1ba2e53eab65e901b6c63159538307ef",
        "modified": 1577515674327
      },
      {
        "_id": "themes/next/layout/_third-party/chat/tidio.swig",
        "hash": "cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1",
        "modified": 1577515674327
      },
      {
        "_id": "themes/next/layout/_third-party/comments/changyan.swig",
        "hash": "f39a5bf3ce9ee9adad282501235e0c588e4356ec",
        "modified": 1577515674327
      },
      {
        "_id": "themes/next/layout/_third-party/comments/disqusjs.swig",
        "hash": "d3dc3e051e6816cdd576d00cc70b18b8a4c6a495",
        "modified": 1577515674327
      },
      {
        "_id": "themes/next/layout/_third-party/comments/gitalk.swig",
        "hash": "ed236103bccbcf608f7d5d5b33b9f995d2f1a7de",
        "modified": 1577515674327
      },
      {
        "_id": "themes/next/layout/_third-party/comments/livere.swig",
        "hash": "f7a9eca599a682479e8ca863db59be7c9c7508c8",
        "modified": 1577515674327
      },
      {
        "_id": "themes/next/layout/_third-party/comments/valine.swig",
        "hash": "4d6f9e09ca4056ff6a5d4923e202126a75242183",
        "modified": 1577515674327
      },
      {
        "_id": "themes/next/layout/_third-party/comments/disqus.swig",
        "hash": "b14908644225d78c864cd0a9b60c52407de56183",
        "modified": 1579162108009
      },
      {
        "_id": "themes/next/layout/_third-party/math/katex.swig",
        "hash": "4791c977a730f29c846efcf6c9c15131b9400ead",
        "modified": 1577515674328
      },
      {
        "_id": "themes/next/layout/_third-party/math/index.swig",
        "hash": "6c5976621efd5db5f7c4c6b4f11bc79d6554885f",
        "modified": 1577515674328
      },
      {
        "_id": "themes/next/layout/_third-party/math/mathjax.swig",
        "hash": "fb27a38f9a4b8fcba4f637b03904f7a83cc73416",
        "modified": 1577515674328
      },
      {
        "_id": "themes/next/layout/_third-party/search/algolia-search.swig",
        "hash": "d35a999d67f4c302f76fdf13744ceef3c6506481",
        "modified": 1580791905048
      },
      {
        "_id": "themes/next/layout/_third-party/search/localsearch.swig",
        "hash": "767b6c714c22588bcd26ba70b0fc19b6810cbacd",
        "modified": 1577515674329
      },
      {
        "_id": "themes/next/layout/_third-party/search/swiftype.swig",
        "hash": "ba0dbc06b9d244073a1c681ff7a722dcbf920b51",
        "modified": 1577515674329
      },
      {
        "_id": "themes/next/layout/_third-party/statistics/busuanzi-counter.swig",
        "hash": "d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4",
        "modified": 1577515674329
      },
      {
        "_id": "themes/next/layout/_third-party/statistics/cnzz-analytics.swig",
        "hash": "a17ace37876822327a2f9306a472974442c9005d",
        "modified": 1577515674329
      },
      {
        "_id": "themes/next/layout/_third-party/statistics/firestore.swig",
        "hash": "0ea0bac09b0747bc16fde852164c0eaab2efe02c",
        "modified": 1577515674329
      },
      {
        "_id": "themes/next/layout/_third-party/statistics/index.swig",
        "hash": "5f6a966c509680dbfa70433f9d658cee59c304d7",
        "modified": 1577515674330
      },
      {
        "_id": "themes/next/layout/_third-party/statistics/lean-analytics.swig",
        "hash": "801e1d2f59f7d2db4096c4788b8469b4165f4965",
        "modified": 1577515674330
      },
      {
        "_id": "themes/next/layout/_third-party/tags/mermaid.swig",
        "hash": "4958fa997ff6df2b2ce05341f40cc3a81b0f91bb",
        "modified": 1577515674330
      },
      {
        "_id": "themes/next/layout/_third-party/tags/pdf.swig",
        "hash": "7fa72dc60c078842979861622839b109683e05a3",
        "modified": 1577515674330
      },
      {
        "_id": "themes/next/scripts/events/lib/config.js",
        "hash": "b205d72a56b1827681f0a260c266e0c02065fd08",
        "modified": 1577515674332
      },
      {
        "_id": "themes/next/scripts/events/lib/injects-point.js",
        "hash": "6661c1c91c7cbdefc6a5e6a034b443b8811235a1",
        "modified": 1577515674332
      },
      {
        "_id": "themes/next/scripts/events/lib/injects.js",
        "hash": "f233d8d0103ae7f9b861344aa65c1a3c1de8a845",
        "modified": 1577515674332
      },
      {
        "_id": "themes/next/scripts/filters/comment/changyan.js",
        "hash": "1f20213af8da3127701e6bb9da995e5c91be2051",
        "modified": 1577515674333
      },
      {
        "_id": "themes/next/scripts/filters/comment/common.js",
        "hash": "0803d4f4d3d02c24417c163ad0b27b60fda79250",
        "modified": 1577515674333
      },
      {
        "_id": "themes/next/scripts/filters/comment/default-config.js",
        "hash": "7f2d93af012c1e14b8596fecbfc7febb43d9b7f5",
        "modified": 1577515674333
      },
      {
        "_id": "themes/next/scripts/filters/comment/disqus.js",
        "hash": "19cbd24880d0fbbd4d5698cd54da598f03b942da",
        "modified": 1580300584259
      },
      {
        "_id": "themes/next/scripts/filters/comment/disqusjs.js",
        "hash": "7f8b92913d21070b489457fa5ed996d2a55f2c32",
        "modified": 1577515674333
      },
      {
        "_id": "themes/next/scripts/filters/comment/gitalk.js",
        "hash": "e51dc3072c1ba0ea3008f09ecae8b46242ec6021",
        "modified": 1577515674333
      },
      {
        "_id": "themes/next/scripts/filters/comment/livere.js",
        "hash": "d5fefc31fba4ab0188305b1af1feb61da49fdeb0",
        "modified": 1577515674333
      },
      {
        "_id": "themes/next/scripts/filters/comment/valine.js",
        "hash": "6a72b5928cdab9526a288177991e4b2aedd028cf",
        "modified": 1580300584260
      },
      {
        "_id": "themes/next/source/css/_mixins/Gemini.styl",
        "hash": "2315dd8a7a2c7aabd29efa6193df08e805cb15fc",
        "modified": 1577515674349
      },
      {
        "_id": "themes/next/source/css/_mixins/base.styl",
        "hash": "0a25f3df1b5c39794365efde387647da81da884a",
        "modified": 1577515674350
      },
      {
        "_id": "themes/next/source/css/_mixins/Pisces.styl",
        "hash": "644c1f0b02be9bf59955ebdf496136b3fa4b660b",
        "modified": 1577515674350
      },
      {
        "_id": "themes/next/source/css/_variables/Gemini.styl",
        "hash": "52550138127ae9ebbe049bcdacd94d767c003855",
        "modified": 1577515674354
      },
      {
        "_id": "themes/next/source/css/_variables/Muse.styl",
        "hash": "c261d685c5ed0df34718d94bb2ba977c0ed443e6",
        "modified": 1577515674354
      },
      {
        "_id": "themes/next/source/css/_variables/Mist.styl",
        "hash": "b9d7058db61df7bbd2b58779efe45621a06ffc18",
        "modified": 1577515674354
      },
      {
        "_id": "themes/next/source/css/_variables/Pisces.styl",
        "hash": "50bc57e66331c0f15a4527010b4ca3316ac92403",
        "modified": 1577515674354
      },
      {
        "_id": "themes/next/source/css/_variables/base.styl",
        "hash": "d4e817e2b238ace5d7ac568ce0c5380196a6d039",
        "modified": 1577515674355
      },
      {
        "_id": "themes/next/source/lib/font-awesome/.gitignore",
        "hash": "69d152fa46b517141ec3b1114dd6134724494d83",
        "modified": 1577515674360
      },
      {
        "_id": "themes/next/source/js/schemes/pisces.js",
        "hash": "f068b46f8c305c7436c2767492a6bed42dcd764c",
        "modified": 1579225799050
      },
      {
        "_id": "themes/next/source/js/schemes/muse.js",
        "hash": "ae2a2502b77203e83f75a040c43e86a7ecb4873c",
        "modified": 1579162108023
      },
      {
        "_id": "themes/next/source/lib/font-awesome/.bower.json",
        "hash": "a2aaaf12378db56bd10596ba3daae30950eac051",
        "modified": 1577515674360
      },
      {
        "_id": "themes/next/source/lib/font-awesome/.npmignore",
        "hash": "dcf470ab3a358103bb896a539cc03caeda10fa8b",
        "modified": 1577515674360
      },
      {
        "_id": "themes/next/source/lib/font-awesome/bower.json",
        "hash": "279a8a718ab6c930a67c41237f0aac166c1b9440",
        "modified": 1577515674360
      },
      {
        "_id": "themes/next/source/lib/font-awesome/HELP-US-OUT.txt",
        "hash": "4f7bf961f1bed448f6ba99aeb9219fabf930ba96",
        "modified": 1577515674360
      },
      {
        "_id": "themes/next/source/lib/velocity/velocity.min.js",
        "hash": "2f1afadc12e4cf59ef3b405308d21baa97e739c6",
        "modified": 1577515674364
      },
      {
        "_id": "themes/next/source/lib/velocity/velocity.ui.min.js",
        "hash": "ed5e534cd680a25d8d14429af824f38a2c7d9908",
        "modified": 1577515674364
      },
      {
        "_id": "themes/next/.git/objects/pack/pack-cf0f6750d2108f554ea25bc7233f82e26511a9a5.idx",
        "hash": "7c466dcc3346008f7b335783ba98d9933e06e441",
        "modified": 1580869862424
      },
      {
        "_id": "themes/next/.git/refs/remotes/origin/HEAD",
        "hash": "d9427cda09aba1cdde5c69c2b13c905bddb0bc51",
        "modified": 1577515674301
      },
      {
        "_id": "themes/next/.git/refs/remotes/origin/i18n",
        "hash": "673b2faa2a5f7f3855754dfa44559d7d254172e3",
        "modified": 1580869862436
      },
      {
        "_id": "themes/next/.git/refs/remotes/origin/next-config",
        "hash": "a119a38caeb66ec03e7ea18844e637f1bfb60fe1",
        "modified": 1580871959620
      },
      {
        "_id": "themes/next/.git/refs/remotes/origin/master",
        "hash": "9d6f0ece786b6bf923cdaed97e14217819092485",
        "modified": 1580878067290
      },
      {
        "_id": "themes/next/.git/logs/refs/heads/master",
        "hash": "565c53c927e2d6fe1ee3fb16068b532a88e9fffa",
        "modified": 1580874769290
      },
      {
        "_id": "themes/next/source/css/_common/components/components.styl",
        "hash": "112f5e8f1fe5cec4419e87acfbdef0e615ed23f3",
        "modified": 1577515674337
      },
      {
        "_id": "themes/next/source/css/_common/components/back-to-top.styl",
        "hash": "47ee915d7b0a97e74140a25fbfc01c04d6781534",
        "modified": 1577515674337
      },
      {
        "_id": "themes/next/source/css/_common/components/back-to-top-sidebar.styl",
        "hash": "80d359661d08b80ad561b97f8508766b3e1f6d01",
        "modified": 1577515674337
      },
      {
        "_id": "themes/next/source/css/_common/components/reading-progress.styl",
        "hash": "170c4598cbbe49cd1527f94158d97d2320a6b906",
        "modified": 1577515674341
      },
      {
        "_id": "themes/next/source/css/_common/components/rainbow.styl",
        "hash": "bc87cea0b534f2d75db60f300b069456f6516d1b",
        "modified": 1579162108011
      },
      {
        "_id": "themes/next/source/css/_common/outline/mobile.styl",
        "hash": "990bd301ce2de0a6b936781c58318f3945d81bc2",
        "modified": 1577515674343
      },
      {
        "_id": "themes/next/source/css/_common/outline/outline.styl",
        "hash": "44fe82eadbdbb2f66adda37ac83ebd0f85876bfc",
        "modified": 1577515674343
      },
      {
        "_id": "themes/next/source/css/_common/scaffolding/buttons.styl",
        "hash": "d8ba44b8e1a0332c5c1079ff65fc83d2918a5865",
        "modified": 1577515674346
      },
      {
        "_id": "themes/next/source/css/_common/scaffolding/base.styl",
        "hash": "4f7879a50d4608c46cc2061c725a2564597a45bd",
        "modified": 1577515674345
      },
      {
        "_id": "themes/next/source/css/_common/scaffolding/comments.styl",
        "hash": "3faa8a7cdb05ef3f3b02920d381773dfd54270a5",
        "modified": 1577515674346
      },
      {
        "_id": "themes/next/source/css/_common/scaffolding/normalize.styl",
        "hash": "b56367ea676ea8e8783ea89cd4ab150c7da7a060",
        "modified": 1577515674347
      },
      {
        "_id": "themes/next/source/css/_common/scaffolding/scaffolding.styl",
        "hash": "523fb7b653b87ae37fc91fc8813e4ffad87b0d7e",
        "modified": 1577515674347
      },
      {
        "_id": "themes/next/source/css/_common/scaffolding/pagination.styl",
        "hash": "8f58570a1bbc34c4989a47a1b7d42a8030f38b06",
        "modified": 1577515674347
      },
      {
        "_id": "themes/next/source/css/_common/scaffolding/tables.styl",
        "hash": "8e1cc5e3b20d804a7265f945b877388bffee39eb",
        "modified": 1579162108019
      },
      {
        "_id": "themes/next/source/css/_schemes/Muse/_header.styl",
        "hash": "3646e915b0a55f3b66e41d802b082aba88a76e06",
        "modified": 1577515674351
      },
      {
        "_id": "themes/next/source/css/_common/scaffolding/toggles.styl",
        "hash": "179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42",
        "modified": 1577515674349
      },
      {
        "_id": "themes/next/source/css/_schemes/Gemini/index.styl",
        "hash": "1693ec6b53758ac15d2c7798c789d6ae8af913ea",
        "modified": 1577515674350
      },
      {
        "_id": "themes/next/source/css/_schemes/Muse/_layout.styl",
        "hash": "4d1c17345d2d39ef7698f7acf82dfc0f59308c34",
        "modified": 1577515674351
      },
      {
        "_id": "themes/next/source/css/_schemes/Muse/_menu.styl",
        "hash": "a54662bd4cbbe316048a811d3b5c83fb6df63739",
        "modified": 1579225799048
      },
      {
        "_id": "themes/next/source/css/_schemes/Muse/_sub-menu.styl",
        "hash": "c48ccd8d6651fe1a01faff8f01179456d39ba9b1",
        "modified": 1577515674352
      },
      {
        "_id": "themes/next/source/css/_schemes/Muse/_sidebar.styl",
        "hash": "5adf2fdea25630893283e1ad5ba1721b698d6e95",
        "modified": 1580300584262
      },
      {
        "_id": "themes/next/source/css/_schemes/Muse/index.styl",
        "hash": "6ad168288b213cec357e9b5a97674ff2ef3a910c",
        "modified": 1577515674352
      },
      {
        "_id": "themes/next/source/css/_schemes/Mist/_header.styl",
        "hash": "4fb385d8533877678440c8faa08b68fa793cb1a2",
        "modified": 1577515674351
      },
      {
        "_id": "themes/next/source/css/_schemes/Mist/_layout.styl",
        "hash": "24a086a6904bbf5355a354403c9b0e6069f7eb01",
        "modified": 1577515674351
      },
      {
        "_id": "themes/next/source/css/_schemes/Mist/_posts-expand.styl",
        "hash": "e321bd62f5e04d1fdc101a470ec13604e99816a5",
        "modified": 1577515674351
      },
      {
        "_id": "themes/next/source/css/_schemes/Mist/_menu.styl",
        "hash": "48743ac61af37a4de2026667e15a65de5e8cf542",
        "modified": 1577515674351
      },
      {
        "_id": "themes/next/source/css/_schemes/Mist/index.styl",
        "hash": "a717969829fa6ef88225095737df3f8ee86c286b",
        "modified": 1577515674351
      },
      {
        "_id": "themes/next/source/css/_schemes/Pisces/_layout.styl",
        "hash": "b797c693378d94160121a2b8d9df0622a76cdbda",
        "modified": 1580300584263
      },
      {
        "_id": "themes/next/source/css/_schemes/Pisces/_header.styl",
        "hash": "f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d",
        "modified": 1577515674352
      },
      {
        "_id": "themes/next/source/css/_schemes/Pisces/_menu.styl",
        "hash": "71a3d7f2242706f7a6b79933a67ef3664cca3a24",
        "modified": 1577515674353
      },
      {
        "_id": "themes/next/source/css/_schemes/Pisces/index.styl",
        "hash": "6ad168288b213cec357e9b5a97674ff2ef3a910c",
        "modified": 1577515674353
      },
      {
        "_id": "themes/next/source/css/_schemes/Pisces/_sidebar.styl",
        "hash": "84a3b8fe07fc790082ee988dd8f6c2536fde72de",
        "modified": 1580300584264
      },
      {
        "_id": "themes/next/source/css/_schemes/Pisces/_sub-menu.styl",
        "hash": "0424a1fcffa1ae82fe70935972a894aca885bf9a",
        "modified": 1577515674353
      },
      {
        "_id": "themes/next/source/lib/font-awesome/css/font-awesome.css",
        "hash": "0140952c64e3f2b74ef64e050f2fe86eab6624c8",
        "modified": 1577515674361
      },
      {
        "_id": "themes/next/source/lib/font-awesome/css/font-awesome.css.map",
        "hash": "0189d278706509412bac4745f96c83984e1d59f4",
        "modified": 1577515674361
      },
      {
        "_id": "themes/next/source/lib/font-awesome/css/font-awesome.min.css",
        "hash": "512c7d79033e3028a9be61b540cf1a6870c896f8",
        "modified": 1577515674361
      },
      {
        "_id": "themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff",
        "hash": "28b782240b3e76db824e12c02754a9731a167527",
        "modified": 1577515674363
      },
      {
        "_id": "themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2",
        "hash": "d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c",
        "modified": 1577515674364
      },
      {
        "_id": "themes/next/.git/logs/refs/remotes/origin/next-config",
        "hash": "da015c6cad98c95a6c14713755cb2e8137418a8a",
        "modified": 1580871959621
      },
      {
        "_id": "themes/next/.git/logs/refs/remotes/origin/i18n",
        "hash": "02a9020c1265fa5ca225df591364aa5ac3db34d3",
        "modified": 1580869862437
      },
      {
        "_id": "themes/next/.git/logs/refs/remotes/origin/HEAD",
        "hash": "13dd512148227d35cecc5b8b9210f9e16a3dd26a",
        "modified": 1577515674301
      },
      {
        "_id": "themes/next/.git/logs/refs/remotes/origin/master",
        "hash": "8d83ab2c9371ba35c85c4d53f1789966ef9274aa",
        "modified": 1580878067290
      },
      {
        "_id": "themes/next/source/css/_common/components/pages/categories.styl",
        "hash": "2bd0eb1512415325653b26d62a4463e6de83c5ac",
        "modified": 1577515674337
      },
      {
        "_id": "themes/next/source/css/_common/components/pages/pages.styl",
        "hash": "7504dbc5c70262b048143b2c37d2b5aa2809afa2",
        "modified": 1577515674338
      },
      {
        "_id": "themes/next/source/css/_common/components/pages/breadcrumb.styl",
        "hash": "fafc96c86926b22afba8bb9418c05e6afbc05a57",
        "modified": 1577515674337
      },
      {
        "_id": "themes/next/source/css/_common/components/pages/schedule.styl",
        "hash": "6336c2b129db802221b1fd75e5fbe8aab85c0a1f",
        "modified": 1577515674338
      },
      {
        "_id": "themes/next/source/css/_common/components/pages/tag-cloud.styl",
        "hash": "7ddb7453bf9b85b01bff136e9d10a7f06baac9e8",
        "modified": 1577515674338
      },
      {
        "_id": "themes/next/source/css/_common/components/post/post-copyright.styl",
        "hash": "4b84f35e7040f9adb5cc540c366d7f9eb4c48bcc",
        "modified": 1577515674338
      },
      {
        "_id": "themes/next/source/css/_common/components/post/post-eof.styl",
        "hash": "e3ade812b5541eca5b863ad3ff234ea95925bf31",
        "modified": 1577515674338
      },
      {
        "_id": "themes/next/source/css/_common/components/post/post-expand.styl",
        "hash": "5d5c022aa3b2f89c2f2a178212338bb64804dd75",
        "modified": 1577515674339
      },
      {
        "_id": "themes/next/source/css/_common/components/post/post-collapse.styl",
        "hash": "af182c0d1e52f94280f6108936914f04ed541eee",
        "modified": 1579162108010
      },
      {
        "_id": "themes/next/source/css/_common/components/post/post-gallery.styl",
        "hash": "72d495a88f7d6515af425c12cbc67308a57d88ea",
        "modified": 1577515674339
      },
      {
        "_id": "themes/next/source/css/_common/components/post/post-header.styl",
        "hash": "bcba503e956e4b737b062faa66341bd880f16c10",
        "modified": 1577515674339
      },
      {
        "_id": "themes/next/source/css/_common/components/post/post-nav.styl",
        "hash": "9df5ba77e6cf36129bddc270407215c23c60ff38",
        "modified": 1577515674339
      },
      {
        "_id": "themes/next/source/css/_common/components/post/post-followme.styl",
        "hash": "60ed14e9ddcb138837ca22efb8886f9bff2a3dd2",
        "modified": 1580695389849
      },
      {
        "_id": "themes/next/source/css/_common/components/post/post-reward.styl",
        "hash": "eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df",
        "modified": 1577515674339
      },
      {
        "_id": "themes/next/source/css/_common/components/post/post-widgets.styl",
        "hash": "5b5649b9749e3fd8b63aef22ceeece0a6e1df605",
        "modified": 1577515674340
      },
      {
        "_id": "themes/next/source/css/_common/components/post/post-tags.styl",
        "hash": "99e12c9ce3d14d4837e3d3f12fc867ba9c565317",
        "modified": 1577515674340
      },
      {
        "_id": "themes/next/source/css/_common/components/post/post-rtl.styl",
        "hash": "f5c2788a78790aca1a2f37f7149d6058afb539e0",
        "modified": 1577515674339
      },
      {
        "_id": "themes/next/source/css/_common/components/third-party/gitalk.styl",
        "hash": "8a7fc03a568b95be8d3337195e38bc7ec5ba2b23",
        "modified": 1577515674341
      },
      {
        "_id": "themes/next/source/css/_common/components/third-party/related-posts.styl",
        "hash": "e2992846b39bf3857b5104675af02ba73e72eed5",
        "modified": 1577515674341
      },
      {
        "_id": "themes/next/source/css/_common/components/third-party/math.styl",
        "hash": "ef66c0a08e4243a25e41408d70ca66682b8dcea1",
        "modified": 1577515674341
      },
      {
        "_id": "themes/next/source/css/_common/components/post/post.styl",
        "hash": "c7939407797acbd1ae0d8bae8e13b2bf045f870e",
        "modified": 1580695389850
      },
      {
        "_id": "themes/next/source/css/_common/components/third-party/search.styl",
        "hash": "418890a2041e4d623e235890951143d183df6f03",
        "modified": 1580791905049
      },
      {
        "_id": "themes/next/source/css/_common/components/third-party/third-party.styl",
        "hash": "9a878d0119785a2316f42aebcceaa05a120b9a7a",
        "modified": 1577515674342
      },
      {
        "_id": "themes/next/source/css/_common/outline/footer/footer.styl",
        "hash": "f5821481440a0624c8aec5fc85f093de1527095f",
        "modified": 1577515674342
      },
      {
        "_id": "themes/next/source/css/_common/outline/header/bookmark.styl",
        "hash": "e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407",
        "modified": 1577515674342
      },
      {
        "_id": "themes/next/source/css/_common/outline/header/github-banner.styl",
        "hash": "0672ea2acf28dcc2cfc5244da36d3387d71a17cb",
        "modified": 1577515674342
      },
      {
        "_id": "themes/next/source/css/_common/outline/header/header.styl",
        "hash": "4b237e2344f35e9d1f6dbc3842d5e432d478ebfd",
        "modified": 1577515674343
      },
      {
        "_id": "themes/next/source/css/_common/outline/header/headerband.styl",
        "hash": "0caf32492692ba8e854da43697a2ec8a41612194",
        "modified": 1577515674343
      },
      {
        "_id": "themes/next/source/css/_common/outline/header/menu.styl",
        "hash": "d5d85d3646d184e0340924addcfd2523fb289d00",
        "modified": 1577515674343
      },
      {
        "_id": "themes/next/source/css/_common/outline/header/site-nav.styl",
        "hash": "c27b3056d5e22d3c66d8a152a23634314d5c4a60",
        "modified": 1577515674343
      },
      {
        "_id": "themes/next/source/css/_common/outline/header/site-meta.styl",
        "hash": "a7ed54e2f52185a7b6bb9a8201f6c3aa74b0cb00",
        "modified": 1577515674343
      },
      {
        "_id": "themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl",
        "hash": "2cb1876e9e0c9ac32160888af27b1178dbcb0616",
        "modified": 1577515674344
      },
      {
        "_id": "themes/next/source/css/_common/outline/sidebar/sidebar-author.styl",
        "hash": "9b3ff4aa24069eab0e9771437013f45e450d4217",
        "modified": 1577515674344
      },
      {
        "_id": "themes/next/source/css/_common/outline/sidebar/sidebar-button.styl",
        "hash": "a237c290e8934d1a8cbbf22b3f30503d9663021d",
        "modified": 1577515674344
      },
      {
        "_id": "themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl",
        "hash": "95339b71ac90553fb1634c536c9749055e0c788a",
        "modified": 1577515674344
      },
      {
        "_id": "themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl",
        "hash": "9b479c2f9a9bfed77885e5093b8245cc5d768ec7",
        "modified": 1577515674344
      },
      {
        "_id": "themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl",
        "hash": "b3220db827e1adbca7880c2bb23e78fa7cbe95cb",
        "modified": 1577515674345
      },
      {
        "_id": "themes/next/source/css/_common/outline/sidebar/sidebar.styl",
        "hash": "6d8680894e24a516e2b5263af86b485767c3be63",
        "modified": 1580300584261
      },
      {
        "_id": "themes/next/source/css/_common/outline/sidebar/site-state.styl",
        "hash": "9a18b186b08ec220d1b17cf83812bcdd06077814",
        "modified": 1577515674345
      },
      {
        "_id": "themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl",
        "hash": "521534f483440434e808f92377bc3fc73667c89a",
        "modified": 1579162108017
      },
      {
        "_id": "themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl",
        "hash": "a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec",
        "modified": 1579162108015
      },
      {
        "_id": "themes/next/source/css/_common/scaffolding/highlight/copy-code.styl",
        "hash": "b492a45422773ab2af06ee345d527ba4c6bbc608",
        "modified": 1577515674346
      },
      {
        "_id": "themes/next/source/css/_common/scaffolding/highlight/diff.styl",
        "hash": "d3f73688bb7423e3ab0de1efdf6db46db5e34f80",
        "modified": 1577515674346
      },
      {
        "_id": "themes/next/source/css/_common/scaffolding/highlight/highlight.styl",
        "hash": "b4923515ca8e44aa62e839ce948f759cfd1f896f",
        "modified": 1577515674346
      },
      {
        "_id": "themes/next/source/css/_common/scaffolding/highlight/theme.styl",
        "hash": "3b3acc5caa0b95a2598bef4eeacb21bab21bea56",
        "modified": 1577515674347
      },
      {
        "_id": "themes/next/source/css/_common/scaffolding/tags/label.styl",
        "hash": "5bf28a03ef021c27cfd713971caca5a0b9466fd1",
        "modified": 1577515674348
      },
      {
        "_id": "themes/next/source/css/_common/scaffolding/tags/group-pictures.styl",
        "hash": "709d10f763e357e1472d6471f8be384ec9e2d983",
        "modified": 1577515674348
      },
      {
        "_id": "themes/next/source/css/_common/scaffolding/tags/note.styl",
        "hash": "1a14c1b92d8a4dd8aabb5949333ac0ac79094c6c",
        "modified": 1577515674348
      },
      {
        "_id": "themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl",
        "hash": "7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f",
        "modified": 1577515674347
      },
      {
        "_id": "themes/next/source/css/_common/scaffolding/tags/tabs.styl",
        "hash": "d2f0f2171722533bba308f944a2ec727b083582c",
        "modified": 1577515674348
      },
      {
        "_id": "themes/next/source/css/_common/scaffolding/tags/pdf.styl",
        "hash": "2dc2a5b7becb11de1d4bdab6b5195588ae878cfc",
        "modified": 1577515674348
      },
      {
        "_id": "themes/next/source/css/_common/scaffolding/tags/tags.styl",
        "hash": "9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7",
        "modified": 1577515674349
      },
      {
        "_id": "themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot",
        "hash": "d980c2ce873dc43af460d4d572d441304499f400",
        "modified": 1577515674363
      },
      {
        "_id": "themes/next/.git/objects/pack/pack-af38791b7cae7524f13916f622b150f2378bab9c.idx",
        "hash": "daf66b07b3abafe17cd311f509184622fdef0f14",
        "modified": 1577515674290
      },
      {
        "_id": "themes/next/.git/objects/pack/pack-cf0f6750d2108f554ea25bc7233f82e26511a9a5.pack",
        "hash": "5140b6260db302bb1e332b01733e7da1f1edaab7",
        "modified": 1580869862423
      },
      {
        "_id": "themes/next/.git/objects/pack/pack-af38791b7cae7524f13916f622b150f2378bab9c.pack",
        "hash": "f04c3159780985a3ad4c0aedc0f71dddbb49d0af",
        "modified": 1577515674286
      },
      { "_id": "themes/next/.DS_Store", "hash": "14d500cb962d583abccc40a772fdfaf02b37aab4", "modified": 1580885833180 }
    ],
    "Category": [
      { "name": "javascript", "_id": "ck68yj5uq00049zey4dgafdqn" },
      { "name": "CrossPlatform", "_id": "ck68yj5uv00099zeyf4005v3u" },
      { "name": "ReactNative", "parent": "ck68yj5uv00099zeyf4005v3u", "_id": "ck68yj5v5000k9zey82ajcd7f" },
      { "name": "状态管理", "_id": "ck68yj5v5000n9zeyba4r23i7" }
    ],
    "Data": [],
    "Page": [],
    "Post": [
      {
        "_content": "## 自我评价\n\n## 工作回顾\n\n### 架构\n\n- 技术迭代: react-native 版本从 0.57 到 0.58 再到 0.59，移动端项目全面接入了 typescript 并在移动端团队内推广开，并相应地帮助团队新人\n  快速熟悉和上手项目。\n- 模块化思想: 这是一个持续的话题，在过去半年，共创造并主要维护了近 20 个私有及团队公有库以及为了适应业务需求而 clone 修改的库。并在 6 月份的时候在前端团队内布道了 npm 包开发及发布流程，现在 PC 端也和移动端一样开始广泛使用私有库进行开发，这是后期架构升级的基础。\n- 编码规范: 引入并根据团队实际情况调教了 eslint+airbnb+prettier+lint-staged+husky+editorConfig 这一套前端代码规范统一的工具，近期更是利用 eslint 的 `override` 特性编写了一个 `@sishuguojixuefu/eslint-config` 统一了整个前端团队的代码规范。之后无论新起项目或者插件都可以使用这一份插件即可。这个举措主要是为了让开发专注于业务，让架构人员有更多的时间做更有意义的工作。\n- 未来的架构: 以往由于前端技术迭代升级导致项目架构不得不调整时，我们面临的就是一个两难的境地，直接在现有项目重写架构，会影响业务开发，就算并行新起项目，之后也不可避免的大面积修改原有代码。未来的架构将会解决以上两个问题，彻底解耦业务开发与架构、核心组件的关系。\n\n### 开发\n\n- 为 `veronica` 及 `betty` 项目编写了超过 95% 的公用组件以及架构之处编写的 utils 方法，这些组件和方法皆得到了广泛的使用，比如 `createAsyncIterator` 方法利用迭代器的思想解决了前端分页麻烦的问题并应用在了每一个需要分页需求的页面。`ScheduleView` 组件服务于所有需要课表的页面，`LinkageList` 服务于订单页面，实现了产品左右列表联动，跳转指定位置等复杂订单列表页需求。\n- 为移动端同事提供组件选型、组件设计、算法设计等服务\n- 在团队临时有人离职，开发任务紧急的情况下能快速投入实际业务开发，并保持低 BUG 的状态，这得益于和产品及前后端同事的良好沟通。\n\n### 其他\n\n- 引入 verdaccio 替代原来的 cnpm 私有库，优势是该库通过简单的配置即可实现权限管理。在新架构中这是很重要的，开发只有编写源码的权利，发库及发版的权利可以收到运维手中。\n- 社区影响: 主要维护了 https://github.com/sishuguojixuefu，其中 react-native-screenshot、react-native-office-viewer、react-native-qiniu、react-native-qrcode-scanner、react-native-template-sishu 不仅服务于团队内部需求，也为社区填补了一小片空白。个人的 wx-promise-pro 虽然已经近 1 年没有维护，但是关注和使用量依然在持续增加，截止目前 star 已有 568，fork 也有 111。已关闭的 PR 也有 11 个。\n\n## 问题及改进\n\n1. 旧架构不能很好服务于异地协同开发: 新架构的设计把该问题列为了首要解决问题，现在核心代码和设计已完成，经过本人的实际体验，有信心很好的解决了这个问题。\n2. 新人培训问题: 主要问题是我之前也没有分的清架构问题和业务问题，新人的接受程度往往不太高，讲太多架构的东西往往适得其反。新架构的设计考虑了这个问题，既然接受程度是客观决定的，那么就把架构和业务解耦。新人可以专注于语法、业务的熟悉。等到成长到一定阶段，再和他讲解架构也不迟。另一方面，新架构天然地倒逼产品把模块划分清晰，这样在分任务时也能尽可能让新人负责独立的模块，减小上手难度。如果团队有人员变动，由于每个模块的代码规范以及文档规范都是严格统一的，接手的人也能很快的上手。就算代码很烂，要重构，只要暴露的东西不修改，重构也对外部造不成任何影响。\n3. react-native、react 迭代持续跟进: 目前 react 社区十分活跃，必须紧跟脚步。深度研究官方文档\n4. 大前端: 现在的问题是移动端相关知识已经驾轻就熟，在持续改进架构和技术迭代之外，我希望自己能够涉猎更广泛的前端知识\n5. code review: 这个需要和运维一起把 sonar 用起来，作为辅助的 review 手段，然后制定更严格的 typescript 使用规范。\n\n## 工作反馈\n\n1. 原生方面学习的指导: 自己学习基本处于懵逼状态，对我来说，运维和后端都有接触过，唯独原生开发处于小白，尤其是 ios。这方面如何学习需要指导。\n2. 对于技术团队可能需要的是和谐的技术讨论氛围，可能定期的技术交流和业务研讨能很好的沟通感情\n",
        "source": "_drafts/reviewe-2019.md",
        "raw": "## 自我评价\n\n## 工作回顾\n\n### 架构\n\n- 技术迭代: react-native 版本从 0.57 到 0.58 再到 0.59，移动端项目全面接入了 typescript 并在移动端团队内推广开，并相应地帮助团队新人\n  快速熟悉和上手项目。\n- 模块化思想: 这是一个持续的话题，在过去半年，共创造并主要维护了近 20 个私有及团队公有库以及为了适应业务需求而 clone 修改的库。并在 6 月份的时候在前端团队内布道了 npm 包开发及发布流程，现在 PC 端也和移动端一样开始广泛使用私有库进行开发，这是后期架构升级的基础。\n- 编码规范: 引入并根据团队实际情况调教了 eslint+airbnb+prettier+lint-staged+husky+editorConfig 这一套前端代码规范统一的工具，近期更是利用 eslint 的 `override` 特性编写了一个 `@sishuguojixuefu/eslint-config` 统一了整个前端团队的代码规范。之后无论新起项目或者插件都可以使用这一份插件即可。这个举措主要是为了让开发专注于业务，让架构人员有更多的时间做更有意义的工作。\n- 未来的架构: 以往由于前端技术迭代升级导致项目架构不得不调整时，我们面临的就是一个两难的境地，直接在现有项目重写架构，会影响业务开发，就算并行新起项目，之后也不可避免的大面积修改原有代码。未来的架构将会解决以上两个问题，彻底解耦业务开发与架构、核心组件的关系。\n\n### 开发\n\n- 为 `veronica` 及 `betty` 项目编写了超过 95% 的公用组件以及架构之处编写的 utils 方法，这些组件和方法皆得到了广泛的使用，比如 `createAsyncIterator` 方法利用迭代器的思想解决了前端分页麻烦的问题并应用在了每一个需要分页需求的页面。`ScheduleView` 组件服务于所有需要课表的页面，`LinkageList` 服务于订单页面，实现了产品左右列表联动，跳转指定位置等复杂订单列表页需求。\n- 为移动端同事提供组件选型、组件设计、算法设计等服务\n- 在团队临时有人离职，开发任务紧急的情况下能快速投入实际业务开发，并保持低 BUG 的状态，这得益于和产品及前后端同事的良好沟通。\n\n### 其他\n\n- 引入 verdaccio 替代原来的 cnpm 私有库，优势是该库通过简单的配置即可实现权限管理。在新架构中这是很重要的，开发只有编写源码的权利，发库及发版的权利可以收到运维手中。\n- 社区影响: 主要维护了 https://github.com/sishuguojixuefu，其中 react-native-screenshot、react-native-office-viewer、react-native-qiniu、react-native-qrcode-scanner、react-native-template-sishu 不仅服务于团队内部需求，也为社区填补了一小片空白。个人的 wx-promise-pro 虽然已经近 1 年没有维护，但是关注和使用量依然在持续增加，截止目前 star 已有 568，fork 也有 111。已关闭的 PR 也有 11 个。\n\n## 问题及改进\n\n1. 旧架构不能很好服务于异地协同开发: 新架构的设计把该问题列为了首要解决问题，现在核心代码和设计已完成，经过本人的实际体验，有信心很好的解决了这个问题。\n2. 新人培训问题: 主要问题是我之前也没有分的清架构问题和业务问题，新人的接受程度往往不太高，讲太多架构的东西往往适得其反。新架构的设计考虑了这个问题，既然接受程度是客观决定的，那么就把架构和业务解耦。新人可以专注于语法、业务的熟悉。等到成长到一定阶段，再和他讲解架构也不迟。另一方面，新架构天然地倒逼产品把模块划分清晰，这样在分任务时也能尽可能让新人负责独立的模块，减小上手难度。如果团队有人员变动，由于每个模块的代码规范以及文档规范都是严格统一的，接手的人也能很快的上手。就算代码很烂，要重构，只要暴露的东西不修改，重构也对外部造不成任何影响。\n3. react-native、react 迭代持续跟进: 目前 react 社区十分活跃，必须紧跟脚步。深度研究官方文档\n4. 大前端: 现在的问题是移动端相关知识已经驾轻就熟，在持续改进架构和技术迭代之外，我希望自己能够涉猎更广泛的前端知识\n5. code review: 这个需要和运维一起把 sonar 用起来，作为辅助的 review 手段，然后制定更严格的 typescript 使用规范。\n\n## 工作反馈\n\n1. 原生方面学习的指导: 自己学习基本处于懵逼状态，对我来说，运维和后端都有接触过，唯独原生开发处于小白，尤其是 ios。这方面如何学习需要指导。\n2. 对于技术团队可能需要的是和谐的技术讨论氛围，可能定期的技术交流和业务研讨能很好的沟通感情\n",
        "slug": "reviewe-2019",
        "published": 0,
        "date": "2020-01-09T02:26:23.043Z",
        "updated": "2020-01-09T04:04:21.276Z",
        "title": "reviewe-2019",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ck68yj5ub00009zey6mpc5zzg",
        "content": "<h2 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h2><h2 id=\"工作回顾\"><a href=\"#工作回顾\" class=\"headerlink\" title=\"工作回顾\"></a>工作回顾</h2><h3 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h3><ul>\n<li>技术迭代: react-native 版本从 0.57 到 0.58 再到 0.59，移动端项目全面接入了 typescript 并在移动端团队内推广开，并相应地帮助团队新人<br>快速熟悉和上手项目。</li>\n<li>模块化思想: 这是一个持续的话题，在过去半年，共创造并主要维护了近 20 个私有及团队公有库以及为了适应业务需求而 clone 修改的库。并在 6 月份的时候在前端团队内布道了 npm 包开发及发布流程，现在 PC 端也和移动端一样开始广泛使用私有库进行开发，这是后期架构升级的基础。</li>\n<li>编码规范: 引入并根据团队实际情况调教了 eslint+airbnb+prettier+lint-staged+husky+editorConfig 这一套前端代码规范统一的工具，近期更是利用 eslint 的 <code>override</code> 特性编写了一个 <code>@sishuguojixuefu/eslint-config</code> 统一了整个前端团队的代码规范。之后无论新起项目或者插件都可以使用这一份插件即可。这个举措主要是为了让开发专注于业务，让架构人员有更多的时间做更有意义的工作。</li>\n<li>未来的架构: 以往由于前端技术迭代升级导致项目架构不得不调整时，我们面临的就是一个两难的境地，直接在现有项目重写架构，会影响业务开发，就算并行新起项目，之后也不可避免的大面积修改原有代码。未来的架构将会解决以上两个问题，彻底解耦业务开发与架构、核心组件的关系。</li>\n</ul>\n<h3 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h3><ul>\n<li>为 <code>veronica</code> 及 <code>betty</code> 项目编写了超过 95% 的公用组件以及架构之处编写的 utils 方法，这些组件和方法皆得到了广泛的使用，比如 <code>createAsyncIterator</code> 方法利用迭代器的思想解决了前端分页麻烦的问题并应用在了每一个需要分页需求的页面。<code>ScheduleView</code> 组件服务于所有需要课表的页面，<code>LinkageList</code> 服务于订单页面，实现了产品左右列表联动，跳转指定位置等复杂订单列表页需求。</li>\n<li>为移动端同事提供组件选型、组件设计、算法设计等服务</li>\n<li>在团队临时有人离职，开发任务紧急的情况下能快速投入实际业务开发，并保持低 BUG 的状态，这得益于和产品及前后端同事的良好沟通。</li>\n</ul>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li>引入 verdaccio 替代原来的 cnpm 私有库，优势是该库通过简单的配置即可实现权限管理。在新架构中这是很重要的，开发只有编写源码的权利，发库及发版的权利可以收到运维手中。</li>\n<li>社区影响: 主要维护了 <a href=\"https://github.com/sishuguojixuefu，其中\" target=\"_blank\" rel=\"noopener\">https://github.com/sishuguojixuefu，其中</a> react-native-screenshot、react-native-office-viewer、react-native-qiniu、react-native-qrcode-scanner、react-native-template-sishu 不仅服务于团队内部需求，也为社区填补了一小片空白。个人的 wx-promise-pro 虽然已经近 1 年没有维护，但是关注和使用量依然在持续增加，截止目前 star 已有 568，fork 也有 111。已关闭的 PR 也有 11 个。</li>\n</ul>\n<h2 id=\"问题及改进\"><a href=\"#问题及改进\" class=\"headerlink\" title=\"问题及改进\"></a>问题及改进</h2><ol>\n<li>旧架构不能很好服务于异地协同开发: 新架构的设计把该问题列为了首要解决问题，现在核心代码和设计已完成，经过本人的实际体验，有信心很好的解决了这个问题。</li>\n<li>新人培训问题: 主要问题是我之前也没有分的清架构问题和业务问题，新人的接受程度往往不太高，讲太多架构的东西往往适得其反。新架构的设计考虑了这个问题，既然接受程度是客观决定的，那么就把架构和业务解耦。新人可以专注于语法、业务的熟悉。等到成长到一定阶段，再和他讲解架构也不迟。另一方面，新架构天然地倒逼产品把模块划分清晰，这样在分任务时也能尽可能让新人负责独立的模块，减小上手难度。如果团队有人员变动，由于每个模块的代码规范以及文档规范都是严格统一的，接手的人也能很快的上手。就算代码很烂，要重构，只要暴露的东西不修改，重构也对外部造不成任何影响。</li>\n<li>react-native、react 迭代持续跟进: 目前 react 社区十分活跃，必须紧跟脚步。深度研究官方文档</li>\n<li>大前端: 现在的问题是移动端相关知识已经驾轻就熟，在持续改进架构和技术迭代之外，我希望自己能够涉猎更广泛的前端知识</li>\n<li>code review: 这个需要和运维一起把 sonar 用起来，作为辅助的 review 手段，然后制定更严格的 typescript 使用规范。</li>\n</ol>\n<h2 id=\"工作反馈\"><a href=\"#工作反馈\" class=\"headerlink\" title=\"工作反馈\"></a>工作反馈</h2><ol>\n<li>原生方面学习的指导: 自己学习基本处于懵逼状态，对我来说，运维和后端都有接触过，唯独原生开发处于小白，尤其是 ios。这方面如何学习需要指导。</li>\n<li>对于技术团队可能需要的是和谐的技术讨论氛围，可能定期的技术交流和业务研讨能很好的沟通感情</li>\n</ol>\n",
        "site": { "data": {} },
        "excerpt": "",
        "more": "<h2 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h2><h2 id=\"工作回顾\"><a href=\"#工作回顾\" class=\"headerlink\" title=\"工作回顾\"></a>工作回顾</h2><h3 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h3><ul>\n<li>技术迭代: react-native 版本从 0.57 到 0.58 再到 0.59，移动端项目全面接入了 typescript 并在移动端团队内推广开，并相应地帮助团队新人<br>快速熟悉和上手项目。</li>\n<li>模块化思想: 这是一个持续的话题，在过去半年，共创造并主要维护了近 20 个私有及团队公有库以及为了适应业务需求而 clone 修改的库。并在 6 月份的时候在前端团队内布道了 npm 包开发及发布流程，现在 PC 端也和移动端一样开始广泛使用私有库进行开发，这是后期架构升级的基础。</li>\n<li>编码规范: 引入并根据团队实际情况调教了 eslint+airbnb+prettier+lint-staged+husky+editorConfig 这一套前端代码规范统一的工具，近期更是利用 eslint 的 <code>override</code> 特性编写了一个 <code>@sishuguojixuefu/eslint-config</code> 统一了整个前端团队的代码规范。之后无论新起项目或者插件都可以使用这一份插件即可。这个举措主要是为了让开发专注于业务，让架构人员有更多的时间做更有意义的工作。</li>\n<li>未来的架构: 以往由于前端技术迭代升级导致项目架构不得不调整时，我们面临的就是一个两难的境地，直接在现有项目重写架构，会影响业务开发，就算并行新起项目，之后也不可避免的大面积修改原有代码。未来的架构将会解决以上两个问题，彻底解耦业务开发与架构、核心组件的关系。</li>\n</ul>\n<h3 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h3><ul>\n<li>为 <code>veronica</code> 及 <code>betty</code> 项目编写了超过 95% 的公用组件以及架构之处编写的 utils 方法，这些组件和方法皆得到了广泛的使用，比如 <code>createAsyncIterator</code> 方法利用迭代器的思想解决了前端分页麻烦的问题并应用在了每一个需要分页需求的页面。<code>ScheduleView</code> 组件服务于所有需要课表的页面，<code>LinkageList</code> 服务于订单页面，实现了产品左右列表联动，跳转指定位置等复杂订单列表页需求。</li>\n<li>为移动端同事提供组件选型、组件设计、算法设计等服务</li>\n<li>在团队临时有人离职，开发任务紧急的情况下能快速投入实际业务开发，并保持低 BUG 的状态，这得益于和产品及前后端同事的良好沟通。</li>\n</ul>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li>引入 verdaccio 替代原来的 cnpm 私有库，优势是该库通过简单的配置即可实现权限管理。在新架构中这是很重要的，开发只有编写源码的权利，发库及发版的权利可以收到运维手中。</li>\n<li>社区影响: 主要维护了 <a href=\"https://github.com/sishuguojixuefu，其中\" target=\"_blank\" rel=\"noopener\">https://github.com/sishuguojixuefu，其中</a> react-native-screenshot、react-native-office-viewer、react-native-qiniu、react-native-qrcode-scanner、react-native-template-sishu 不仅服务于团队内部需求，也为社区填补了一小片空白。个人的 wx-promise-pro 虽然已经近 1 年没有维护，但是关注和使用量依然在持续增加，截止目前 star 已有 568，fork 也有 111。已关闭的 PR 也有 11 个。</li>\n</ul>\n<h2 id=\"问题及改进\"><a href=\"#问题及改进\" class=\"headerlink\" title=\"问题及改进\"></a>问题及改进</h2><ol>\n<li>旧架构不能很好服务于异地协同开发: 新架构的设计把该问题列为了首要解决问题，现在核心代码和设计已完成，经过本人的实际体验，有信心很好的解决了这个问题。</li>\n<li>新人培训问题: 主要问题是我之前也没有分的清架构问题和业务问题，新人的接受程度往往不太高，讲太多架构的东西往往适得其反。新架构的设计考虑了这个问题，既然接受程度是客观决定的，那么就把架构和业务解耦。新人可以专注于语法、业务的熟悉。等到成长到一定阶段，再和他讲解架构也不迟。另一方面，新架构天然地倒逼产品把模块划分清晰，这样在分任务时也能尽可能让新人负责独立的模块，减小上手难度。如果团队有人员变动，由于每个模块的代码规范以及文档规范都是严格统一的，接手的人也能很快的上手。就算代码很烂，要重构，只要暴露的东西不修改，重构也对外部造不成任何影响。</li>\n<li>react-native、react 迭代持续跟进: 目前 react 社区十分活跃，必须紧跟脚步。深度研究官方文档</li>\n<li>大前端: 现在的问题是移动端相关知识已经驾轻就熟，在持续改进架构和技术迭代之外，我希望自己能够涉猎更广泛的前端知识</li>\n<li>code review: 这个需要和运维一起把 sonar 用起来，作为辅助的 review 手段，然后制定更严格的 typescript 使用规范。</li>\n</ol>\n<h2 id=\"工作反馈\"><a href=\"#工作反馈\" class=\"headerlink\" title=\"工作反馈\"></a>工作反馈</h2><ol>\n<li>原生方面学习的指导: 自己学习基本处于懵逼状态，对我来说，运维和后端都有接触过，唯独原生开发处于小白，尤其是 ios。这方面如何学习需要指导。</li>\n<li>对于技术团队可能需要的是和谐的技术讨论氛围，可能定期的技术交流和业务研讨能很好的沟通感情</li>\n</ol>\n"
      },
      {
        "title": "营养素基础知识",
        "date": "2020-02-03T11:01:25.000Z",
        "_content": "\n## 营养素的概念\n\n人通过各种食物组成的膳食，获得人体**需要的各种物质**，以维持生长发育、新陈代谢所必需，这些物质称为**营养素**。\n\n## 营养素的分类\n\n三大能量营养素: 蛋白质、脂类、碳水化合物\n\n- 宏量营养素\n  - 蛋白质\n  - 脂类\n  - 碳水化合物\n- 微量营养素\n  - 矿物质\n    - 常量元素\n    - 微量元素\n  - 维生素\n- 其他营养素\n  - 膳食纤维\n  - 水\n\n## 人体消化系统\n\n1. 口腔\n2. 咽喉\n3. 食道\n4. 胃\n5. 十二指肠\n6. 小肠\n   - 空肠\n   - 回肠\n7. 大肠\n   - 升结肠\n   - 横结肠\n   - 降结肠\n   - 乙状结肠\n8. 直肠\n9. 肛门\n\n## 人体所需能量的来源及分配\n\n营养素(g) = 人体每日所需能量(kcal)\\*能量营养素占比/卡价(kcal/g)\n\n### 卡价\n\n人体摄入每克营养素所产生的的能量\n\n![WX20200203-192337@2x.png](https://i.loli.net/2020/02/03/qWzGJ8hvMtn2HxP.png)\n\n### 能量营养素占比\n\n![WX20200203-192414@2x.png](https://i.loli.net/2020/02/03/M6n9zDexIVTJbBi.png)\n\n### 人体每日所需能量\n\n![image.png](https://i.loli.net/2020/02/03/H8ieaWlFJvdyGZq.png)\n\n## 蛋白质\n\n### 蛋白质作用\n\n结构作用、调节作用、运输作用、能量作用\n\n### 氨基酸\n\n- 必需氨基酸(8): 不能在人体内合成或必需由食物提供\n- 非必需氨基酸(12): 可在体内合成 不需要额外摄入\n\n> 限制性氨基酸: 影响食物蛋白质的整体吸收率（木桶原理），我们可以人为地把氨基酸补齐\n\n### PDCAAS 蛋白质消化率校正的氨基酸计分\n\n基于人体需求: 越接近人体所需要的氨基酸模式，蛋白质评分越高\n\n记分=1.00，吸收利用率 100%\n\n> 大豆分离蛋白是消化利用率可以达到百分之百，吸收利用率越高，对人体肝肾压力越小\n\n## 脂肪\n\n### 脂肪的消化吸收\n\n1. 摄入\n2. 吸收\n3. 合成\n4. 囤积\n\n### 脂肪的作用\n\n1. 构成人体的主要成分\n2. 维持体温，保护脏器\n3. 产生能量\n4. 为人体提供必需脂肪酸\n5. 促进脂溶性维生素的吸收\n\n### 脂肪分类\n\n- 甘油三脂\n- 饱和脂肪酸\n- 单不饱和脂肪酸\n- **多不饱和脂肪酸**: Ω-3（海鱼鱼油）、Ω-6（菜籽油、豆油）、Ω-9（动物油）\n- 反式脂肪酸\n- 类脂\n  - 磷脂\n  - 糖脂\n  - **固醇**\n\n### Ω-3 不饱和脂肪酸\n\n- EPA 二十碳五烯酸: 降血脂，防止动脉硬化、减缓血小板凝集，延缓血栓形成、预防心血管疾病\n- DHA 二十二碳六烯酸: 降血脂，降低血液甘油三酯，抑制血小板凝聚，防止动脉粥样硬化；母婴健康，视功能和大脑发育的必需成分，减轻视力衰退的程度，增强记忆力\n\n### 好脂肪\n\n家禽畜类、蔬菜水果 > 淡水鱼类 > 海洋鱼类与贝壳类 > 深海鲑鱼\n\n### 谁不适合吃鱼油\n\n重要得内出血和有出血倾向的病人不建议吃鱼油\n\n## 碳水化合物\n\n### 碳水化合物的分类\n\n- 单糖：构成糖类的基本单位\n  - 葡萄糖\n  - 果糖\n  - 半乳糖\n- 双糖：两分子单糖组成\n  - 麦芽糖\n  - 蔗糖\n  - 乳糖\n- 低聚糖：3-9 个单糖分子组成\n  - 低聚果糖\n  - 大豆低聚糖\n- 多糖\n  - 不能被人体消化吸收的：纤维素、果胶等\n  - 能被人体吸收的：淀粉\n\n### 碳水化合物的作用\n\n1. 储存和提供能量\n2. 节约蛋白质的作用\n3. 调节脂类代谢\n4. 构成组织及重要生命物质\n5. 增强肠道功能\n\n## 膳食纤维\n\n### 膳食纤维分类\n\n- 可溶性膳食纤维\n- 不可溶性膳食纤维\n\n### 膳食纤维的作用\n\n- 促进排便：增加肠道食物残渣体积、加速排便、缩短有害物质存留时间\n- 助消化：易发酵分解、协助食物消化吸收\n\n## 蛋白质的十个问题\n\n### 蛋白质为什么能增强免疫力？\n\n- 酶是有寿命的，且越是重要得酶寿命越短\n- 缺乏蛋白质，不能合成酶\n- 蛋白质能够抗疲劳\n\n### 吃多了蛋白质会不会拉肚子上火？\n\n- 越缺乏蛋白质，消化蛋白质的能力越差。应该逐渐增加蛋白质建立良性循环\n- 针对吃蛋白质拉肚子的人，应该补充 VC\n\n### 吃蛋白质会不会长胖？\n\n- 人体没有把蛋白质转换成脂肪的机理，导致人体发胖的是脂肪和碳水化合物。\n\n### 大豆分离蛋白和豆浆有什么区别\n\n天然大豆存在大豆蛋白抑制因子，抑制人体对生大豆的吸收；但是熟豆子含有产气因子，容易放屁；大豆含有大量脂肪；大豆含有大量纤维；大豆中缺少蛋氨酸导致大豆各种氨基酸吸收率都不高。\n\n- 大豆分离蛋白去除了大豆中不需要的物质，通过小麦蛋白和豌豆蛋白添加缺少的蛋氨酸。\n",
        "source": "_drafts/ying-yang-su-ji-chu-zhishi.md",
        "raw": "---\ntitle: 营养素基础知识\ndate: 2020-02-03 19:01:25\n---\n\n## 营养素的概念\n\n人通过各种食物组成的膳食，获得人体**需要的各种物质**，以维持生长发育、新陈代谢所必需，这些物质称为**营养素**。\n\n## 营养素的分类\n\n三大能量营养素: 蛋白质、脂类、碳水化合物\n\n- 宏量营养素\n  - 蛋白质\n  - 脂类\n  - 碳水化合物\n- 微量营养素\n  - 矿物质\n    - 常量元素\n    - 微量元素\n  - 维生素\n- 其他营养素\n  - 膳食纤维\n  - 水\n\n## 人体消化系统\n\n1. 口腔\n2. 咽喉\n3. 食道\n4. 胃\n5. 十二指肠\n6. 小肠\n   - 空肠\n   - 回肠\n7. 大肠\n   - 升结肠\n   - 横结肠\n   - 降结肠\n   - 乙状结肠\n8. 直肠\n9. 肛门\n\n## 人体所需能量的来源及分配\n\n营养素(g) = 人体每日所需能量(kcal)\\*能量营养素占比/卡价(kcal/g)\n\n### 卡价\n\n人体摄入每克营养素所产生的的能量\n\n![WX20200203-192337@2x.png](https://i.loli.net/2020/02/03/qWzGJ8hvMtn2HxP.png)\n\n### 能量营养素占比\n\n![WX20200203-192414@2x.png](https://i.loli.net/2020/02/03/M6n9zDexIVTJbBi.png)\n\n### 人体每日所需能量\n\n![image.png](https://i.loli.net/2020/02/03/H8ieaWlFJvdyGZq.png)\n\n## 蛋白质\n\n### 蛋白质作用\n\n结构作用、调节作用、运输作用、能量作用\n\n### 氨基酸\n\n- 必需氨基酸(8): 不能在人体内合成或必需由食物提供\n- 非必需氨基酸(12): 可在体内合成 不需要额外摄入\n\n> 限制性氨基酸: 影响食物蛋白质的整体吸收率（木桶原理），我们可以人为地把氨基酸补齐\n\n### PDCAAS 蛋白质消化率校正的氨基酸计分\n\n基于人体需求: 越接近人体所需要的氨基酸模式，蛋白质评分越高\n\n记分=1.00，吸收利用率 100%\n\n> 大豆分离蛋白是消化利用率可以达到百分之百，吸收利用率越高，对人体肝肾压力越小\n\n## 脂肪\n\n### 脂肪的消化吸收\n\n1. 摄入\n2. 吸收\n3. 合成\n4. 囤积\n\n### 脂肪的作用\n\n1. 构成人体的主要成分\n2. 维持体温，保护脏器\n3. 产生能量\n4. 为人体提供必需脂肪酸\n5. 促进脂溶性维生素的吸收\n\n### 脂肪分类\n\n- 甘油三脂\n- 饱和脂肪酸\n- 单不饱和脂肪酸\n- **多不饱和脂肪酸**: Ω-3（海鱼鱼油）、Ω-6（菜籽油、豆油）、Ω-9（动物油）\n- 反式脂肪酸\n- 类脂\n  - 磷脂\n  - 糖脂\n  - **固醇**\n\n### Ω-3 不饱和脂肪酸\n\n- EPA 二十碳五烯酸: 降血脂，防止动脉硬化、减缓血小板凝集，延缓血栓形成、预防心血管疾病\n- DHA 二十二碳六烯酸: 降血脂，降低血液甘油三酯，抑制血小板凝聚，防止动脉粥样硬化；母婴健康，视功能和大脑发育的必需成分，减轻视力衰退的程度，增强记忆力\n\n### 好脂肪\n\n家禽畜类、蔬菜水果 > 淡水鱼类 > 海洋鱼类与贝壳类 > 深海鲑鱼\n\n### 谁不适合吃鱼油\n\n重要得内出血和有出血倾向的病人不建议吃鱼油\n\n## 碳水化合物\n\n### 碳水化合物的分类\n\n- 单糖：构成糖类的基本单位\n  - 葡萄糖\n  - 果糖\n  - 半乳糖\n- 双糖：两分子单糖组成\n  - 麦芽糖\n  - 蔗糖\n  - 乳糖\n- 低聚糖：3-9 个单糖分子组成\n  - 低聚果糖\n  - 大豆低聚糖\n- 多糖\n  - 不能被人体消化吸收的：纤维素、果胶等\n  - 能被人体吸收的：淀粉\n\n### 碳水化合物的作用\n\n1. 储存和提供能量\n2. 节约蛋白质的作用\n3. 调节脂类代谢\n4. 构成组织及重要生命物质\n5. 增强肠道功能\n\n## 膳食纤维\n\n### 膳食纤维分类\n\n- 可溶性膳食纤维\n- 不可溶性膳食纤维\n\n### 膳食纤维的作用\n\n- 促进排便：增加肠道食物残渣体积、加速排便、缩短有害物质存留时间\n- 助消化：易发酵分解、协助食物消化吸收\n\n## 蛋白质的十个问题\n\n### 蛋白质为什么能增强免疫力？\n\n- 酶是有寿命的，且越是重要得酶寿命越短\n- 缺乏蛋白质，不能合成酶\n- 蛋白质能够抗疲劳\n\n### 吃多了蛋白质会不会拉肚子上火？\n\n- 越缺乏蛋白质，消化蛋白质的能力越差。应该逐渐增加蛋白质建立良性循环\n- 针对吃蛋白质拉肚子的人，应该补充 VC\n\n### 吃蛋白质会不会长胖？\n\n- 人体没有把蛋白质转换成脂肪的机理，导致人体发胖的是脂肪和碳水化合物。\n\n### 大豆分离蛋白和豆浆有什么区别\n\n天然大豆存在大豆蛋白抑制因子，抑制人体对生大豆的吸收；但是熟豆子含有产气因子，容易放屁；大豆含有大量脂肪；大豆含有大量纤维；大豆中缺少蛋氨酸导致大豆各种氨基酸吸收率都不高。\n\n- 大豆分离蛋白去除了大豆中不需要的物质，通过小麦蛋白和豌豆蛋白添加缺少的蛋氨酸。\n",
        "slug": "ying-yang-su-ji-chu-zhishi",
        "published": 0,
        "updated": "2020-02-04T11:11:30.503Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ck68yj5uj00019zey6fwweavf",
        "content": "<h2 id=\"营养素的概念\"><a href=\"#营养素的概念\" class=\"headerlink\" title=\"营养素的概念\"></a>营养素的概念</h2><p>人通过各种食物组成的膳食，获得人体<strong>需要的各种物质</strong>，以维持生长发育、新陈代谢所必需，这些物质称为<strong>营养素</strong>。</p>\n<h2 id=\"营养素的分类\"><a href=\"#营养素的分类\" class=\"headerlink\" title=\"营养素的分类\"></a>营养素的分类</h2><p>三大能量营养素: 蛋白质、脂类、碳水化合物</p>\n<ul>\n<li>宏量营养素<ul>\n<li>蛋白质</li>\n<li>脂类</li>\n<li>碳水化合物</li>\n</ul>\n</li>\n<li>微量营养素<ul>\n<li>矿物质<ul>\n<li>常量元素</li>\n<li>微量元素</li>\n</ul>\n</li>\n<li>维生素</li>\n</ul>\n</li>\n<li>其他营养素<ul>\n<li>膳食纤维</li>\n<li>水</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"人体消化系统\"><a href=\"#人体消化系统\" class=\"headerlink\" title=\"人体消化系统\"></a>人体消化系统</h2><ol>\n<li>口腔</li>\n<li>咽喉</li>\n<li>食道</li>\n<li>胃</li>\n<li>十二指肠</li>\n<li>小肠<ul>\n<li>空肠</li>\n<li>回肠</li>\n</ul>\n</li>\n<li>大肠<ul>\n<li>升结肠</li>\n<li>横结肠</li>\n<li>降结肠</li>\n<li>乙状结肠</li>\n</ul>\n</li>\n<li>直肠</li>\n<li>肛门</li>\n</ol>\n<h2 id=\"人体所需能量的来源及分配\"><a href=\"#人体所需能量的来源及分配\" class=\"headerlink\" title=\"人体所需能量的来源及分配\"></a>人体所需能量的来源及分配</h2><p>营养素(g) = 人体每日所需能量(kcal)*能量营养素占比/卡价(kcal/g)</p>\n<h3 id=\"卡价\"><a href=\"#卡价\" class=\"headerlink\" title=\"卡价\"></a>卡价</h3><p>人体摄入每克营养素所产生的的能量</p>\n<p><img src=\"https://i.loli.net/2020/02/03/qWzGJ8hvMtn2HxP.png\" alt=\"WX20200203-192337@2x.png\"></p>\n<h3 id=\"能量营养素占比\"><a href=\"#能量营养素占比\" class=\"headerlink\" title=\"能量营养素占比\"></a>能量营养素占比</h3><p><img src=\"https://i.loli.net/2020/02/03/M6n9zDexIVTJbBi.png\" alt=\"WX20200203-192414@2x.png\"></p>\n<h3 id=\"人体每日所需能量\"><a href=\"#人体每日所需能量\" class=\"headerlink\" title=\"人体每日所需能量\"></a>人体每日所需能量</h3><p><img src=\"https://i.loli.net/2020/02/03/H8ieaWlFJvdyGZq.png\" alt=\"image.png\"></p>\n<h2 id=\"蛋白质\"><a href=\"#蛋白质\" class=\"headerlink\" title=\"蛋白质\"></a>蛋白质</h2><h3 id=\"蛋白质作用\"><a href=\"#蛋白质作用\" class=\"headerlink\" title=\"蛋白质作用\"></a>蛋白质作用</h3><p>结构作用、调节作用、运输作用、能量作用</p>\n<h3 id=\"氨基酸\"><a href=\"#氨基酸\" class=\"headerlink\" title=\"氨基酸\"></a>氨基酸</h3><ul>\n<li>必需氨基酸(8): 不能在人体内合成或必需由食物提供</li>\n<li>非必需氨基酸(12): 可在体内合成 不需要额外摄入</li>\n</ul>\n<blockquote>\n<p>限制性氨基酸: 影响食物蛋白质的整体吸收率（木桶原理），我们可以人为地把氨基酸补齐</p>\n</blockquote>\n<h3 id=\"PDCAAS-蛋白质消化率校正的氨基酸计分\"><a href=\"#PDCAAS-蛋白质消化率校正的氨基酸计分\" class=\"headerlink\" title=\"PDCAAS 蛋白质消化率校正的氨基酸计分\"></a>PDCAAS 蛋白质消化率校正的氨基酸计分</h3><p>基于人体需求: 越接近人体所需要的氨基酸模式，蛋白质评分越高</p>\n<p>记分=1.00，吸收利用率 100%</p>\n<blockquote>\n<p>大豆分离蛋白是消化利用率可以达到百分之百，吸收利用率越高，对人体肝肾压力越小</p>\n</blockquote>\n<h2 id=\"脂肪\"><a href=\"#脂肪\" class=\"headerlink\" title=\"脂肪\"></a>脂肪</h2><h3 id=\"脂肪的消化吸收\"><a href=\"#脂肪的消化吸收\" class=\"headerlink\" title=\"脂肪的消化吸收\"></a>脂肪的消化吸收</h3><ol>\n<li>摄入</li>\n<li>吸收</li>\n<li>合成</li>\n<li>囤积</li>\n</ol>\n<h3 id=\"脂肪的作用\"><a href=\"#脂肪的作用\" class=\"headerlink\" title=\"脂肪的作用\"></a>脂肪的作用</h3><ol>\n<li>构成人体的主要成分</li>\n<li>维持体温，保护脏器</li>\n<li>产生能量</li>\n<li>为人体提供必需脂肪酸</li>\n<li>促进脂溶性维生素的吸收</li>\n</ol>\n<h3 id=\"脂肪分类\"><a href=\"#脂肪分类\" class=\"headerlink\" title=\"脂肪分类\"></a>脂肪分类</h3><ul>\n<li>甘油三脂</li>\n<li>饱和脂肪酸</li>\n<li>单不饱和脂肪酸</li>\n<li><strong>多不饱和脂肪酸</strong>: Ω-3（海鱼鱼油）、Ω-6（菜籽油、豆油）、Ω-9（动物油）</li>\n<li>反式脂肪酸</li>\n<li>类脂<ul>\n<li>磷脂</li>\n<li>糖脂</li>\n<li><strong>固醇</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Ω-3-不饱和脂肪酸\"><a href=\"#Ω-3-不饱和脂肪酸\" class=\"headerlink\" title=\"Ω-3 不饱和脂肪酸\"></a>Ω-3 不饱和脂肪酸</h3><ul>\n<li>EPA 二十碳五烯酸: 降血脂，防止动脉硬化、减缓血小板凝集，延缓血栓形成、预防心血管疾病</li>\n<li>DHA 二十二碳六烯酸: 降血脂，降低血液甘油三酯，抑制血小板凝聚，防止动脉粥样硬化；母婴健康，视功能和大脑发育的必需成分，减轻视力衰退的程度，增强记忆力</li>\n</ul>\n<h3 id=\"好脂肪\"><a href=\"#好脂肪\" class=\"headerlink\" title=\"好脂肪\"></a>好脂肪</h3><p>家禽畜类、蔬菜水果 &gt; 淡水鱼类 &gt; 海洋鱼类与贝壳类 &gt; 深海鲑鱼</p>\n<h3 id=\"谁不适合吃鱼油\"><a href=\"#谁不适合吃鱼油\" class=\"headerlink\" title=\"谁不适合吃鱼油\"></a>谁不适合吃鱼油</h3><p>重要得内出血和有出血倾向的病人不建议吃鱼油</p>\n<h2 id=\"碳水化合物\"><a href=\"#碳水化合物\" class=\"headerlink\" title=\"碳水化合物\"></a>碳水化合物</h2><h3 id=\"碳水化合物的分类\"><a href=\"#碳水化合物的分类\" class=\"headerlink\" title=\"碳水化合物的分类\"></a>碳水化合物的分类</h3><ul>\n<li>单糖：构成糖类的基本单位<ul>\n<li>葡萄糖</li>\n<li>果糖</li>\n<li>半乳糖</li>\n</ul>\n</li>\n<li>双糖：两分子单糖组成<ul>\n<li>麦芽糖</li>\n<li>蔗糖</li>\n<li>乳糖</li>\n</ul>\n</li>\n<li>低聚糖：3-9 个单糖分子组成<ul>\n<li>低聚果糖</li>\n<li>大豆低聚糖</li>\n</ul>\n</li>\n<li>多糖<ul>\n<li>不能被人体消化吸收的：纤维素、果胶等</li>\n<li>能被人体吸收的：淀粉</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"碳水化合物的作用\"><a href=\"#碳水化合物的作用\" class=\"headerlink\" title=\"碳水化合物的作用\"></a>碳水化合物的作用</h3><ol>\n<li>储存和提供能量</li>\n<li>节约蛋白质的作用</li>\n<li>调节脂类代谢</li>\n<li>构成组织及重要生命物质</li>\n<li>增强肠道功能</li>\n</ol>\n<h2 id=\"膳食纤维\"><a href=\"#膳食纤维\" class=\"headerlink\" title=\"膳食纤维\"></a>膳食纤维</h2><h3 id=\"膳食纤维分类\"><a href=\"#膳食纤维分类\" class=\"headerlink\" title=\"膳食纤维分类\"></a>膳食纤维分类</h3><ul>\n<li>可溶性膳食纤维</li>\n<li>不可溶性膳食纤维</li>\n</ul>\n<h3 id=\"膳食纤维的作用\"><a href=\"#膳食纤维的作用\" class=\"headerlink\" title=\"膳食纤维的作用\"></a>膳食纤维的作用</h3><ul>\n<li>促进排便：增加肠道食物残渣体积、加速排便、缩短有害物质存留时间</li>\n<li>助消化：易发酵分解、协助食物消化吸收</li>\n</ul>\n<h2 id=\"蛋白质的十个问题\"><a href=\"#蛋白质的十个问题\" class=\"headerlink\" title=\"蛋白质的十个问题\"></a>蛋白质的十个问题</h2><h3 id=\"蛋白质为什么能增强免疫力？\"><a href=\"#蛋白质为什么能增强免疫力？\" class=\"headerlink\" title=\"蛋白质为什么能增强免疫力？\"></a>蛋白质为什么能增强免疫力？</h3><ul>\n<li>酶是有寿命的，且越是重要得酶寿命越短</li>\n<li>缺乏蛋白质，不能合成酶</li>\n<li>蛋白质能够抗疲劳</li>\n</ul>\n<h3 id=\"吃多了蛋白质会不会拉肚子上火？\"><a href=\"#吃多了蛋白质会不会拉肚子上火？\" class=\"headerlink\" title=\"吃多了蛋白质会不会拉肚子上火？\"></a>吃多了蛋白质会不会拉肚子上火？</h3><ul>\n<li>越缺乏蛋白质，消化蛋白质的能力越差。应该逐渐增加蛋白质建立良性循环</li>\n<li>针对吃蛋白质拉肚子的人，应该补充 VC</li>\n</ul>\n<h3 id=\"吃蛋白质会不会长胖？\"><a href=\"#吃蛋白质会不会长胖？\" class=\"headerlink\" title=\"吃蛋白质会不会长胖？\"></a>吃蛋白质会不会长胖？</h3><ul>\n<li>人体没有把蛋白质转换成脂肪的机理，导致人体发胖的是脂肪和碳水化合物。</li>\n</ul>\n<h3 id=\"大豆分离蛋白和豆浆有什么区别\"><a href=\"#大豆分离蛋白和豆浆有什么区别\" class=\"headerlink\" title=\"大豆分离蛋白和豆浆有什么区别\"></a>大豆分离蛋白和豆浆有什么区别</h3><p>天然大豆存在大豆蛋白抑制因子，抑制人体对生大豆的吸收；但是熟豆子含有产气因子，容易放屁；大豆含有大量脂肪；大豆含有大量纤维；大豆中缺少蛋氨酸导致大豆各种氨基酸吸收率都不高。</p>\n<ul>\n<li>大豆分离蛋白去除了大豆中不需要的物质，通过小麦蛋白和豌豆蛋白添加缺少的蛋氨酸。</li>\n</ul>\n",
        "site": { "data": {} },
        "excerpt": "",
        "more": "<h2 id=\"营养素的概念\"><a href=\"#营养素的概念\" class=\"headerlink\" title=\"营养素的概念\"></a>营养素的概念</h2><p>人通过各种食物组成的膳食，获得人体<strong>需要的各种物质</strong>，以维持生长发育、新陈代谢所必需，这些物质称为<strong>营养素</strong>。</p>\n<h2 id=\"营养素的分类\"><a href=\"#营养素的分类\" class=\"headerlink\" title=\"营养素的分类\"></a>营养素的分类</h2><p>三大能量营养素: 蛋白质、脂类、碳水化合物</p>\n<ul>\n<li>宏量营养素<ul>\n<li>蛋白质</li>\n<li>脂类</li>\n<li>碳水化合物</li>\n</ul>\n</li>\n<li>微量营养素<ul>\n<li>矿物质<ul>\n<li>常量元素</li>\n<li>微量元素</li>\n</ul>\n</li>\n<li>维生素</li>\n</ul>\n</li>\n<li>其他营养素<ul>\n<li>膳食纤维</li>\n<li>水</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"人体消化系统\"><a href=\"#人体消化系统\" class=\"headerlink\" title=\"人体消化系统\"></a>人体消化系统</h2><ol>\n<li>口腔</li>\n<li>咽喉</li>\n<li>食道</li>\n<li>胃</li>\n<li>十二指肠</li>\n<li>小肠<ul>\n<li>空肠</li>\n<li>回肠</li>\n</ul>\n</li>\n<li>大肠<ul>\n<li>升结肠</li>\n<li>横结肠</li>\n<li>降结肠</li>\n<li>乙状结肠</li>\n</ul>\n</li>\n<li>直肠</li>\n<li>肛门</li>\n</ol>\n<h2 id=\"人体所需能量的来源及分配\"><a href=\"#人体所需能量的来源及分配\" class=\"headerlink\" title=\"人体所需能量的来源及分配\"></a>人体所需能量的来源及分配</h2><p>营养素(g) = 人体每日所需能量(kcal)*能量营养素占比/卡价(kcal/g)</p>\n<h3 id=\"卡价\"><a href=\"#卡价\" class=\"headerlink\" title=\"卡价\"></a>卡价</h3><p>人体摄入每克营养素所产生的的能量</p>\n<p><img src=\"https://i.loli.net/2020/02/03/qWzGJ8hvMtn2HxP.png\" alt=\"WX20200203-192337@2x.png\"></p>\n<h3 id=\"能量营养素占比\"><a href=\"#能量营养素占比\" class=\"headerlink\" title=\"能量营养素占比\"></a>能量营养素占比</h3><p><img src=\"https://i.loli.net/2020/02/03/M6n9zDexIVTJbBi.png\" alt=\"WX20200203-192414@2x.png\"></p>\n<h3 id=\"人体每日所需能量\"><a href=\"#人体每日所需能量\" class=\"headerlink\" title=\"人体每日所需能量\"></a>人体每日所需能量</h3><p><img src=\"https://i.loli.net/2020/02/03/H8ieaWlFJvdyGZq.png\" alt=\"image.png\"></p>\n<h2 id=\"蛋白质\"><a href=\"#蛋白质\" class=\"headerlink\" title=\"蛋白质\"></a>蛋白质</h2><h3 id=\"蛋白质作用\"><a href=\"#蛋白质作用\" class=\"headerlink\" title=\"蛋白质作用\"></a>蛋白质作用</h3><p>结构作用、调节作用、运输作用、能量作用</p>\n<h3 id=\"氨基酸\"><a href=\"#氨基酸\" class=\"headerlink\" title=\"氨基酸\"></a>氨基酸</h3><ul>\n<li>必需氨基酸(8): 不能在人体内合成或必需由食物提供</li>\n<li>非必需氨基酸(12): 可在体内合成 不需要额外摄入</li>\n</ul>\n<blockquote>\n<p>限制性氨基酸: 影响食物蛋白质的整体吸收率（木桶原理），我们可以人为地把氨基酸补齐</p>\n</blockquote>\n<h3 id=\"PDCAAS-蛋白质消化率校正的氨基酸计分\"><a href=\"#PDCAAS-蛋白质消化率校正的氨基酸计分\" class=\"headerlink\" title=\"PDCAAS 蛋白质消化率校正的氨基酸计分\"></a>PDCAAS 蛋白质消化率校正的氨基酸计分</h3><p>基于人体需求: 越接近人体所需要的氨基酸模式，蛋白质评分越高</p>\n<p>记分=1.00，吸收利用率 100%</p>\n<blockquote>\n<p>大豆分离蛋白是消化利用率可以达到百分之百，吸收利用率越高，对人体肝肾压力越小</p>\n</blockquote>\n<h2 id=\"脂肪\"><a href=\"#脂肪\" class=\"headerlink\" title=\"脂肪\"></a>脂肪</h2><h3 id=\"脂肪的消化吸收\"><a href=\"#脂肪的消化吸收\" class=\"headerlink\" title=\"脂肪的消化吸收\"></a>脂肪的消化吸收</h3><ol>\n<li>摄入</li>\n<li>吸收</li>\n<li>合成</li>\n<li>囤积</li>\n</ol>\n<h3 id=\"脂肪的作用\"><a href=\"#脂肪的作用\" class=\"headerlink\" title=\"脂肪的作用\"></a>脂肪的作用</h3><ol>\n<li>构成人体的主要成分</li>\n<li>维持体温，保护脏器</li>\n<li>产生能量</li>\n<li>为人体提供必需脂肪酸</li>\n<li>促进脂溶性维生素的吸收</li>\n</ol>\n<h3 id=\"脂肪分类\"><a href=\"#脂肪分类\" class=\"headerlink\" title=\"脂肪分类\"></a>脂肪分类</h3><ul>\n<li>甘油三脂</li>\n<li>饱和脂肪酸</li>\n<li>单不饱和脂肪酸</li>\n<li><strong>多不饱和脂肪酸</strong>: Ω-3（海鱼鱼油）、Ω-6（菜籽油、豆油）、Ω-9（动物油）</li>\n<li>反式脂肪酸</li>\n<li>类脂<ul>\n<li>磷脂</li>\n<li>糖脂</li>\n<li><strong>固醇</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Ω-3-不饱和脂肪酸\"><a href=\"#Ω-3-不饱和脂肪酸\" class=\"headerlink\" title=\"Ω-3 不饱和脂肪酸\"></a>Ω-3 不饱和脂肪酸</h3><ul>\n<li>EPA 二十碳五烯酸: 降血脂，防止动脉硬化、减缓血小板凝集，延缓血栓形成、预防心血管疾病</li>\n<li>DHA 二十二碳六烯酸: 降血脂，降低血液甘油三酯，抑制血小板凝聚，防止动脉粥样硬化；母婴健康，视功能和大脑发育的必需成分，减轻视力衰退的程度，增强记忆力</li>\n</ul>\n<h3 id=\"好脂肪\"><a href=\"#好脂肪\" class=\"headerlink\" title=\"好脂肪\"></a>好脂肪</h3><p>家禽畜类、蔬菜水果 &gt; 淡水鱼类 &gt; 海洋鱼类与贝壳类 &gt; 深海鲑鱼</p>\n<h3 id=\"谁不适合吃鱼油\"><a href=\"#谁不适合吃鱼油\" class=\"headerlink\" title=\"谁不适合吃鱼油\"></a>谁不适合吃鱼油</h3><p>重要得内出血和有出血倾向的病人不建议吃鱼油</p>\n<h2 id=\"碳水化合物\"><a href=\"#碳水化合物\" class=\"headerlink\" title=\"碳水化合物\"></a>碳水化合物</h2><h3 id=\"碳水化合物的分类\"><a href=\"#碳水化合物的分类\" class=\"headerlink\" title=\"碳水化合物的分类\"></a>碳水化合物的分类</h3><ul>\n<li>单糖：构成糖类的基本单位<ul>\n<li>葡萄糖</li>\n<li>果糖</li>\n<li>半乳糖</li>\n</ul>\n</li>\n<li>双糖：两分子单糖组成<ul>\n<li>麦芽糖</li>\n<li>蔗糖</li>\n<li>乳糖</li>\n</ul>\n</li>\n<li>低聚糖：3-9 个单糖分子组成<ul>\n<li>低聚果糖</li>\n<li>大豆低聚糖</li>\n</ul>\n</li>\n<li>多糖<ul>\n<li>不能被人体消化吸收的：纤维素、果胶等</li>\n<li>能被人体吸收的：淀粉</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"碳水化合物的作用\"><a href=\"#碳水化合物的作用\" class=\"headerlink\" title=\"碳水化合物的作用\"></a>碳水化合物的作用</h3><ol>\n<li>储存和提供能量</li>\n<li>节约蛋白质的作用</li>\n<li>调节脂类代谢</li>\n<li>构成组织及重要生命物质</li>\n<li>增强肠道功能</li>\n</ol>\n<h2 id=\"膳食纤维\"><a href=\"#膳食纤维\" class=\"headerlink\" title=\"膳食纤维\"></a>膳食纤维</h2><h3 id=\"膳食纤维分类\"><a href=\"#膳食纤维分类\" class=\"headerlink\" title=\"膳食纤维分类\"></a>膳食纤维分类</h3><ul>\n<li>可溶性膳食纤维</li>\n<li>不可溶性膳食纤维</li>\n</ul>\n<h3 id=\"膳食纤维的作用\"><a href=\"#膳食纤维的作用\" class=\"headerlink\" title=\"膳食纤维的作用\"></a>膳食纤维的作用</h3><ul>\n<li>促进排便：增加肠道食物残渣体积、加速排便、缩短有害物质存留时间</li>\n<li>助消化：易发酵分解、协助食物消化吸收</li>\n</ul>\n<h2 id=\"蛋白质的十个问题\"><a href=\"#蛋白质的十个问题\" class=\"headerlink\" title=\"蛋白质的十个问题\"></a>蛋白质的十个问题</h2><h3 id=\"蛋白质为什么能增强免疫力？\"><a href=\"#蛋白质为什么能增强免疫力？\" class=\"headerlink\" title=\"蛋白质为什么能增强免疫力？\"></a>蛋白质为什么能增强免疫力？</h3><ul>\n<li>酶是有寿命的，且越是重要得酶寿命越短</li>\n<li>缺乏蛋白质，不能合成酶</li>\n<li>蛋白质能够抗疲劳</li>\n</ul>\n<h3 id=\"吃多了蛋白质会不会拉肚子上火？\"><a href=\"#吃多了蛋白质会不会拉肚子上火？\" class=\"headerlink\" title=\"吃多了蛋白质会不会拉肚子上火？\"></a>吃多了蛋白质会不会拉肚子上火？</h3><ul>\n<li>越缺乏蛋白质，消化蛋白质的能力越差。应该逐渐增加蛋白质建立良性循环</li>\n<li>针对吃蛋白质拉肚子的人，应该补充 VC</li>\n</ul>\n<h3 id=\"吃蛋白质会不会长胖？\"><a href=\"#吃蛋白质会不会长胖？\" class=\"headerlink\" title=\"吃蛋白质会不会长胖？\"></a>吃蛋白质会不会长胖？</h3><ul>\n<li>人体没有把蛋白质转换成脂肪的机理，导致人体发胖的是脂肪和碳水化合物。</li>\n</ul>\n<h3 id=\"大豆分离蛋白和豆浆有什么区别\"><a href=\"#大豆分离蛋白和豆浆有什么区别\" class=\"headerlink\" title=\"大豆分离蛋白和豆浆有什么区别\"></a>大豆分离蛋白和豆浆有什么区别</h3><p>天然大豆存在大豆蛋白抑制因子，抑制人体对生大豆的吸收；但是熟豆子含有产气因子，容易放屁；大豆含有大量脂肪；大豆含有大量纤维；大豆中缺少蛋氨酸导致大豆各种氨基酸吸收率都不高。</p>\n<ul>\n<li>大豆分离蛋白去除了大豆中不需要的物质，通过小麦蛋白和豌豆蛋白添加缺少的蛋氨酸。</li>\n</ul>\n"
      },
      {
        "title": "ES标准中相等比较算法SameValue和SameValueZero",
        "date": "2020-02-05T02:35:30.000Z",
        "_content": "\nJavaScript 对值的相等判断有很多不同的算法，`==` 只是最常用的一种。由于 `NaN` 和正负零的涉入，除了 `==` 和 `===` 之外还有 SameValue 和 SameValueZero 算法。\n\n<!--more-->\n\n## `==`、`===`、SameValue\n\n|           | ==                   | ===                   | SameValue（Object.is）       |\n| --------- | -------------------- | --------------------- | ---------------------------- |\n| `NaN`     | `NaN == NaN` `false` | `NaN === NaN` `false` | `Object.is(NaN, NaN)` `true` |\n| `0`、`-0` | `0 == -0` `true`     | `0 === -0` `true`     | `Object.is(0, -0)` `false`   |\n\n## SameValueZero\n\n但是你在使用es6中有没有疑惑这种情况：\n\n```js\nconst set = new Set()\nset.add(0)\nset.add(NaN)\nset.has(-0) // true\nset.has(NaN) // true\n```\n\n是不是与上述的三种算法的表现多不一样，这就是第四种比较算法 SameValueZero，它与 SameValue 的区别主要在于 `0` 与 `-0` 是否相等。\n\n所以你在实践 `includes` 方法时，遇到：\n\n```js\nconst array = [0, NaN]\narray.includes(-0) // true\narray.includes(NaN) // true\n```\n\n就不用大惊小怪了，因为 `includes` 内部使用的比较算法就是SameValueZero。",
        "source": "_posts/ES标准中相等比较算法SameValue和SameValueZero.md",
        "raw": "---\ntitle: ES标准中相等比较算法SameValue和SameValueZero\ndate: 2020-02-05 10:35:30\ncategories: javascript\ntags: SameValueZero\n---\n\nJavaScript 对值的相等判断有很多不同的算法，`==` 只是最常用的一种。由于 `NaN` 和正负零的涉入，除了 `==` 和 `===` 之外还有 SameValue 和 SameValueZero 算法。\n\n<!--more-->\n\n## `==`、`===`、SameValue\n\n|           | ==                   | ===                   | SameValue（Object.is）       |\n| --------- | -------------------- | --------------------- | ---------------------------- |\n| `NaN`     | `NaN == NaN` `false` | `NaN === NaN` `false` | `Object.is(NaN, NaN)` `true` |\n| `0`、`-0` | `0 == -0` `true`     | `0 === -0` `true`     | `Object.is(0, -0)` `false`   |\n\n## SameValueZero\n\n但是你在使用es6中有没有疑惑这种情况：\n\n```js\nconst set = new Set()\nset.add(0)\nset.add(NaN)\nset.has(-0) // true\nset.has(NaN) // true\n```\n\n是不是与上述的三种算法的表现多不一样，这就是第四种比较算法 SameValueZero，它与 SameValue 的区别主要在于 `0` 与 `-0` 是否相等。\n\n所以你在实践 `includes` 方法时，遇到：\n\n```js\nconst array = [0, NaN]\narray.includes(-0) // true\narray.includes(NaN) // true\n```\n\n就不用大惊小怪了，因为 `includes` 内部使用的比较算法就是SameValueZero。",
        "slug": "ES标准中相等比较算法SameValue和SameValueZero",
        "published": 1,
        "updated": "2020-02-05T02:50:42.474Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ck68yj5un00029zeybk2586j8",
        "content": "<p>JavaScript 对值的相等判断有很多不同的算法，<code>==</code> 只是最常用的一种。由于 <code>NaN</code> 和正负零的涉入，除了 <code>==</code> 和 <code>===</code> 之外还有 SameValue 和 SameValueZero 算法。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"、-、SameValue\"><a href=\"#、-、SameValue\" class=\"headerlink\" title=\"==、===、SameValue\"></a><code>==</code>、<code>===</code>、SameValue</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>==</th>\n<th>===</th>\n<th>SameValue（Object.is）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>NaN</code></td>\n<td><code>NaN == NaN</code> <code>false</code></td>\n<td><code>NaN === NaN</code> <code>false</code></td>\n<td><code>Object.is(NaN, NaN)</code> <code>true</code></td>\n</tr>\n<tr>\n<td><code>0</code>、<code>-0</code></td>\n<td><code>0 == -0</code> <code>true</code></td>\n<td><code>0 === -0</code> <code>true</code></td>\n<td><code>Object.is(0, -0)</code> <code>false</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"SameValueZero\"><a href=\"#SameValueZero\" class=\"headerlink\" title=\"SameValueZero\"></a>SameValueZero</h2><p>但是你在使用es6中有没有疑惑这种情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">set</span> = new Set()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>.add(0)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>.add(NaN)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>.has(-0) // true</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>.has(NaN) // true</span></pre></td></tr></table></figure>\n\n<p>是不是与上述的三种算法的表现多不一样，这就是第四种比较算法 SameValueZero，它与 SameValue 的区别主要在于 <code>0</code> 与 <code>-0</code> 是否相等。</p>\n<p>所以你在实践 <code>includes</code> 方法时，遇到：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">0</span>, <span class=\"literal\">NaN</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">array.includes(<span class=\"number\">-0</span>) <span class=\"comment\">// true</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">array.includes(<span class=\"literal\">NaN</span>) <span class=\"comment\">// true</span></span></pre></td></tr></table></figure>\n\n<p>就不用大惊小怪了，因为 <code>includes</code> 内部使用的比较算法就是SameValueZero。</p>\n",
        "site": { "data": {} },
        "excerpt": "<p>JavaScript 对值的相等判断有很多不同的算法，<code>==</code> 只是最常用的一种。由于 <code>NaN</code> 和正负零的涉入，除了 <code>==</code> 和 <code>===</code> 之外还有 SameValue 和 SameValueZero 算法。</p>",
        "more": "<h2 id=\"、-、SameValue\"><a href=\"#、-、SameValue\" class=\"headerlink\" title=\"==、===、SameValue\"></a><code>==</code>、<code>===</code>、SameValue</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>==</th>\n<th>===</th>\n<th>SameValue（Object.is）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>NaN</code></td>\n<td><code>NaN == NaN</code> <code>false</code></td>\n<td><code>NaN === NaN</code> <code>false</code></td>\n<td><code>Object.is(NaN, NaN)</code> <code>true</code></td>\n</tr>\n<tr>\n<td><code>0</code>、<code>-0</code></td>\n<td><code>0 == -0</code> <code>true</code></td>\n<td><code>0 === -0</code> <code>true</code></td>\n<td><code>Object.is(0, -0)</code> <code>false</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"SameValueZero\"><a href=\"#SameValueZero\" class=\"headerlink\" title=\"SameValueZero\"></a>SameValueZero</h2><p>但是你在使用es6中有没有疑惑这种情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">set</span> = new Set()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>.add(0)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>.add(NaN)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>.has(-0) // true</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>.has(NaN) // true</span></pre></td></tr></table></figure>\n\n<p>是不是与上述的三种算法的表现多不一样，这就是第四种比较算法 SameValueZero，它与 SameValue 的区别主要在于 <code>0</code> 与 <code>-0</code> 是否相等。</p>\n<p>所以你在实践 <code>includes</code> 方法时，遇到：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">0</span>, <span class=\"literal\">NaN</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">array.includes(<span class=\"number\">-0</span>) <span class=\"comment\">// true</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">array.includes(<span class=\"literal\">NaN</span>) <span class=\"comment\">// true</span></span></pre></td></tr></table></figure>\n\n<p>就不用大惊小怪了，因为 <code>includes</code> 内部使用的比较算法就是SameValueZero。</p>"
      },
      {
        "title": "awesome-react-native",
        "date": "2020-01-10T02:38:29.000Z",
        "_content": "\n## UI Librarys\n\n- [Ant Design Mobile RN](https://rn.mobile.ant.design/index-cn): 一个基于 React Native 的 UI 组件库\n- [react-native-elements](https://www.npmjs.com/package/react-native-elements): Cross Platform React Native UI Toolkit\n- [react-native-ui-lib](https://www.npmjs.com/package/react-native-ui-lib)\n- [native-base](https://www.npmjs.com/package/native-base): Essential cross-platform UI components for React Native\n- [UI Kitten](https://akveo.github.io/react-native-ui-kitten/): React Native framework for creating stunning cross-platform mobile applications. Design system based, brings your product from MVP to enterprise. Forever Open Source and free!\n- [react-native-material-kit](https://github.com/xinthink/react-native-material-kit): Bringing Material Design to React Native\n- [react-native-paper](https://www.npmjs.com/package/react-native-paper): Material design for React Native\n\n## UI Components\n\n- [react-native-search-bar](https://www.npmjs.com/package/react-native-search-bar): The high-quality native search bar for react native.\n- [react-native-dynamic-search-bar](https://www.npmjs.com/package/react-native-dynamic-search-bar): Fully customizable and dynamic Search Bar for React Native.\n\n<!--more-->\n",
        "source": "_posts/awesome-react-native.md",
        "raw": "---\ntitle: awesome-react-native\ndate: 2020-01-10 10:38:29\ncategories:\n  - [CrossPlatform, ReactNative]\n---\n\n## UI Librarys\n\n- [Ant Design Mobile RN](https://rn.mobile.ant.design/index-cn): 一个基于 React Native 的 UI 组件库\n- [react-native-elements](https://www.npmjs.com/package/react-native-elements): Cross Platform React Native UI Toolkit\n- [react-native-ui-lib](https://www.npmjs.com/package/react-native-ui-lib)\n- [native-base](https://www.npmjs.com/package/native-base): Essential cross-platform UI components for React Native\n- [UI Kitten](https://akveo.github.io/react-native-ui-kitten/): React Native framework for creating stunning cross-platform mobile applications. Design system based, brings your product from MVP to enterprise. Forever Open Source and free!\n- [react-native-material-kit](https://github.com/xinthink/react-native-material-kit): Bringing Material Design to React Native\n- [react-native-paper](https://www.npmjs.com/package/react-native-paper): Material design for React Native\n\n## UI Components\n\n- [react-native-search-bar](https://www.npmjs.com/package/react-native-search-bar): The high-quality native search bar for react native.\n- [react-native-dynamic-search-bar](https://www.npmjs.com/package/react-native-dynamic-search-bar): Fully customizable and dynamic Search Bar for React Native.\n\n<!--more-->\n",
        "slug": "awesome-react-native",
        "published": 1,
        "updated": "2020-01-10T03:08:05.547Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ck68yj5uo00039zey5s4mbevp",
        "content": "<h2 id=\"UI-Librarys\"><a href=\"#UI-Librarys\" class=\"headerlink\" title=\"UI Librarys\"></a>UI Librarys</h2><ul>\n<li><a href=\"https://rn.mobile.ant.design/index-cn\" target=\"_blank\" rel=\"noopener\">Ant Design Mobile RN</a>: 一个基于 React Native 的 UI 组件库</li>\n<li><a href=\"https://www.npmjs.com/package/react-native-elements\" target=\"_blank\" rel=\"noopener\">react-native-elements</a>: Cross Platform React Native UI Toolkit</li>\n<li><a href=\"https://www.npmjs.com/package/react-native-ui-lib\" target=\"_blank\" rel=\"noopener\">react-native-ui-lib</a></li>\n<li><a href=\"https://www.npmjs.com/package/native-base\" target=\"_blank\" rel=\"noopener\">native-base</a>: Essential cross-platform UI components for React Native</li>\n<li><a href=\"https://akveo.github.io/react-native-ui-kitten/\" target=\"_blank\" rel=\"noopener\">UI Kitten</a>: React Native framework for creating stunning cross-platform mobile applications. Design system based, brings your product from MVP to enterprise. Forever Open Source and free!</li>\n<li><a href=\"https://github.com/xinthink/react-native-material-kit\" target=\"_blank\" rel=\"noopener\">react-native-material-kit</a>: Bringing Material Design to React Native</li>\n<li><a href=\"https://www.npmjs.com/package/react-native-paper\" target=\"_blank\" rel=\"noopener\">react-native-paper</a>: Material design for React Native</li>\n</ul>\n<h2 id=\"UI-Components\"><a href=\"#UI-Components\" class=\"headerlink\" title=\"UI Components\"></a>UI Components</h2><ul>\n<li><a href=\"https://www.npmjs.com/package/react-native-search-bar\" target=\"_blank\" rel=\"noopener\">react-native-search-bar</a>: The high-quality native search bar for react native.</li>\n<li><a href=\"https://www.npmjs.com/package/react-native-dynamic-search-bar\" target=\"_blank\" rel=\"noopener\">react-native-dynamic-search-bar</a>: Fully customizable and dynamic Search Bar for React Native.</li>\n</ul>\n<a id=\"more\"></a>\n",
        "site": { "data": {} },
        "excerpt": "<h2 id=\"UI-Librarys\"><a href=\"#UI-Librarys\" class=\"headerlink\" title=\"UI Librarys\"></a>UI Librarys</h2><ul>\n<li><a href=\"https://rn.mobile.ant.design/index-cn\" target=\"_blank\" rel=\"noopener\">Ant Design Mobile RN</a>: 一个基于 React Native 的 UI 组件库</li>\n<li><a href=\"https://www.npmjs.com/package/react-native-elements\" target=\"_blank\" rel=\"noopener\">react-native-elements</a>: Cross Platform React Native UI Toolkit</li>\n<li><a href=\"https://www.npmjs.com/package/react-native-ui-lib\" target=\"_blank\" rel=\"noopener\">react-native-ui-lib</a></li>\n<li><a href=\"https://www.npmjs.com/package/native-base\" target=\"_blank\" rel=\"noopener\">native-base</a>: Essential cross-platform UI components for React Native</li>\n<li><a href=\"https://akveo.github.io/react-native-ui-kitten/\" target=\"_blank\" rel=\"noopener\">UI Kitten</a>: React Native framework for creating stunning cross-platform mobile applications. Design system based, brings your product from MVP to enterprise. Forever Open Source and free!</li>\n<li><a href=\"https://github.com/xinthink/react-native-material-kit\" target=\"_blank\" rel=\"noopener\">react-native-material-kit</a>: Bringing Material Design to React Native</li>\n<li><a href=\"https://www.npmjs.com/package/react-native-paper\" target=\"_blank\" rel=\"noopener\">react-native-paper</a>: Material design for React Native</li>\n</ul>\n<h2 id=\"UI-Components\"><a href=\"#UI-Components\" class=\"headerlink\" title=\"UI Components\"></a>UI Components</h2><ul>\n<li><a href=\"https://www.npmjs.com/package/react-native-search-bar\" target=\"_blank\" rel=\"noopener\">react-native-search-bar</a>: The high-quality native search bar for react native.</li>\n<li><a href=\"https://www.npmjs.com/package/react-native-dynamic-search-bar\" target=\"_blank\" rel=\"noopener\">react-native-dynamic-search-bar</a>: Fully customizable and dynamic Search Bar for React Native.</li>\n</ul>",
        "more": ""
      },
      {
        "title": "javascript-async-programming",
        "date": "2020-01-30T09:15:25.000Z",
        "_content": "\n围绕异步编程领域，现代软件设计正在加速旋转，就为了让程序在一个时间内做更多的事情。当你使用更新更强大的 API 时，你会发现在更多的情况下，使用异步编程是唯一的途径。以前写异步代码很困难，现在也需要你来适应，但是已经变容易了很多。\n\n<!--more-->\n\n## 回调函数（Callback）\n\n回调函数是异步操作最基本的方法。以下代码就是一个回调函数的例子：\n\n```js\najax(url, () => {\n  // 处理逻辑\n})\n```\n\n但是回调函数有一个致命的弱点，就是容易写出回调地狱（Callback hell）。假设多个请求存在依赖性，你可能就会写出如下代码：\n\n```js\najax(url, () => {\n  // 处理逻辑\n  ajax(url1, () => {\n    // 处理逻辑\n    ajax(url2, () => {\n      // 处理逻辑\n    })\n  })\n})\n```\n\n回调函数的优点是简单、容易理解和实现，缺点是不利于代码的阅读和维护，各个部分之间高度耦合，使得程序结构混乱、流程难以追踪（尤其是多个回调函数嵌套的情况），而且每个任务只能指定一个回调函数。此外它不能使用 try catch 捕获错误，不能直接 return。\n\n## Promise\n\n### Promise 状态\n\n- pending: 初始状态，既不是成功，也不是失败状态。\n- fulfilled: 意味着操作成功完成。\n- rejected: 意味着操作失败。\n- Settled: Promise 要么被完成，要么被拒绝。Promise 一旦达成，它的状态就不再改变。\n\n![](https://user-gold-cdn.xitu.io/2019/8/14/16c8d7189886fcc7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n### 基本用法\n\nES6 规定，Promise 对象是一个构造函数，用来生成 Promise 实例。\n\n```js\nconst promise = new Promise((resolve, reject) => {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value)\n  } else {\n    reject(error)\n  }\n})\n```\n\n### 短路特性\n\n- `Promise.all()`: 如果参数中 promise 有一个失败（rejected），此实例回调失败（reject）\n- `Promise.race()`: 如果参数中某个 promise 解决或拒绝，返回的 promise 就会解决或拒绝。\n\n### Promise.all 于 Array.prototype.map\n\n```js\nconst urls = ['http://example.com/first.txt', 'http://example.com/second.txt']\n\nconst promises = urls.map(url => downloadText(url))\n\nPromise.all(promises).then(arr => {\n  console.log(arr)\n})\n```\n\n### Promise.allSettled()\n\n`Promise.allSettled` 这一特性是由 Jason Williams，Robert Pamely 和 Mathias Bynens 提出。\n\n它返回一个 Array 的 Promise，其元素具有以下类型特征：\n\n```ts\ntype SettlementObject<T> = FulfillmentObject<T> | RejectionObject\n\ninterface FulfillmentObject<T> {\n  status: 'fulfilled'\n  value: T\n}\n\ninterface RejectionObject {\n  status: 'rejected'\n  reason: any\n}\n```\n",
        "source": "_posts/javascript-async-programming.md",
        "raw": "---\ntitle: javascript-async-programming\ndate: 2020-01-30 17:15:25\ncategories: javascript\n---\n\n围绕异步编程领域，现代软件设计正在加速旋转，就为了让程序在一个时间内做更多的事情。当你使用更新更强大的 API 时，你会发现在更多的情况下，使用异步编程是唯一的途径。以前写异步代码很困难，现在也需要你来适应，但是已经变容易了很多。\n\n<!--more-->\n\n## 回调函数（Callback）\n\n回调函数是异步操作最基本的方法。以下代码就是一个回调函数的例子：\n\n```js\najax(url, () => {\n  // 处理逻辑\n})\n```\n\n但是回调函数有一个致命的弱点，就是容易写出回调地狱（Callback hell）。假设多个请求存在依赖性，你可能就会写出如下代码：\n\n```js\najax(url, () => {\n  // 处理逻辑\n  ajax(url1, () => {\n    // 处理逻辑\n    ajax(url2, () => {\n      // 处理逻辑\n    })\n  })\n})\n```\n\n回调函数的优点是简单、容易理解和实现，缺点是不利于代码的阅读和维护，各个部分之间高度耦合，使得程序结构混乱、流程难以追踪（尤其是多个回调函数嵌套的情况），而且每个任务只能指定一个回调函数。此外它不能使用 try catch 捕获错误，不能直接 return。\n\n## Promise\n\n### Promise 状态\n\n- pending: 初始状态，既不是成功，也不是失败状态。\n- fulfilled: 意味着操作成功完成。\n- rejected: 意味着操作失败。\n- Settled: Promise 要么被完成，要么被拒绝。Promise 一旦达成，它的状态就不再改变。\n\n![](https://user-gold-cdn.xitu.io/2019/8/14/16c8d7189886fcc7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n### 基本用法\n\nES6 规定，Promise 对象是一个构造函数，用来生成 Promise 实例。\n\n```js\nconst promise = new Promise((resolve, reject) => {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value)\n  } else {\n    reject(error)\n  }\n})\n```\n\n### 短路特性\n\n- `Promise.all()`: 如果参数中 promise 有一个失败（rejected），此实例回调失败（reject）\n- `Promise.race()`: 如果参数中某个 promise 解决或拒绝，返回的 promise 就会解决或拒绝。\n\n### Promise.all 于 Array.prototype.map\n\n```js\nconst urls = ['http://example.com/first.txt', 'http://example.com/second.txt']\n\nconst promises = urls.map(url => downloadText(url))\n\nPromise.all(promises).then(arr => {\n  console.log(arr)\n})\n```\n\n### Promise.allSettled()\n\n`Promise.allSettled` 这一特性是由 Jason Williams，Robert Pamely 和 Mathias Bynens 提出。\n\n它返回一个 Array 的 Promise，其元素具有以下类型特征：\n\n```ts\ntype SettlementObject<T> = FulfillmentObject<T> | RejectionObject\n\ninterface FulfillmentObject<T> {\n  status: 'fulfilled'\n  value: T\n}\n\ninterface RejectionObject {\n  status: 'rejected'\n  reason: any\n}\n```\n",
        "slug": "javascript-async-programming",
        "published": 1,
        "updated": "2020-01-30T12:17:52.893Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ck68yj5us00069zey3o3p1ox4",
        "content": "<p>围绕异步编程领域，现代软件设计正在加速旋转，就为了让程序在一个时间内做更多的事情。当你使用更新更强大的 API 时，你会发现在更多的情况下，使用异步编程是唯一的途径。以前写异步代码很困难，现在也需要你来适应，但是已经变容易了很多。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"回调函数（Callback）\"><a href=\"#回调函数（Callback）\" class=\"headerlink\" title=\"回调函数（Callback）\"></a>回调函数（Callback）</h2><p>回调函数是异步操作最基本的方法。以下代码就是一个回调函数的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">ajax(url, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 处理逻辑</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<p>但是回调函数有一个致命的弱点，就是容易写出回调地狱（Callback hell）。假设多个请求存在依赖性，你可能就会写出如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">ajax(url, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 处理逻辑</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ajax(url1, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 处理逻辑</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ajax(url2, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"comment\">// 处理逻辑</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<p>回调函数的优点是简单、容易理解和实现，缺点是不利于代码的阅读和维护，各个部分之间高度耦合，使得程序结构混乱、流程难以追踪（尤其是多个回调函数嵌套的情况），而且每个任务只能指定一个回调函数。此外它不能使用 try catch 捕获错误，不能直接 return。</p>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><h3 id=\"Promise-状态\"><a href=\"#Promise-状态\" class=\"headerlink\" title=\"Promise 状态\"></a>Promise 状态</h3><ul>\n<li>pending: 初始状态，既不是成功，也不是失败状态。</li>\n<li>fulfilled: 意味着操作成功完成。</li>\n<li>rejected: 意味着操作失败。</li>\n<li>Settled: Promise 要么被完成，要么被拒绝。Promise 一旦达成，它的状态就不再改变。</li>\n</ul>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/8/14/16c8d7189886fcc7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"\"></p>\n<h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p>ES6 规定，Promise 对象是一个构造函数，用来生成 Promise 实例。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// ... some code</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"comment\">/* 异步操作成功 */</span>)&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    resolve(value)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    reject(error)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<h3 id=\"短路特性\"><a href=\"#短路特性\" class=\"headerlink\" title=\"短路特性\"></a>短路特性</h3><ul>\n<li><code>Promise.all()</code>: 如果参数中 promise 有一个失败（rejected），此实例回调失败（reject）</li>\n<li><code>Promise.race()</code>: 如果参数中某个 promise 解决或拒绝，返回的 promise 就会解决或拒绝。</li>\n</ul>\n<h3 id=\"Promise-all-于-Array-prototype-map\"><a href=\"#Promise-all-于-Array-prototype-map\" class=\"headerlink\" title=\"Promise.all 于 Array.prototype.map\"></a>Promise.all 于 Array.prototype.map</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> urls = [<span class=\"string\">'http://example.com/first.txt'</span>, <span class=\"string\">'http://example.com/second.txt'</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promises = urls.map(<span class=\"function\"><span class=\"params\">url</span> =&gt;</span> downloadText(url))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all(promises).then(<span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">console</span>.log(arr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-allSettled\"><a href=\"#Promise-allSettled\" class=\"headerlink\" title=\"Promise.allSettled()\"></a>Promise.allSettled()</h3><p><code>Promise.allSettled</code> 这一特性是由 Jason Williams，Robert Pamely 和 Mathias Bynens 提出。</p>\n<p>它返回一个 Array 的 Promise，其元素具有以下类型特征：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> SettlementObject&lt;T&gt; = FulfillmentObject&lt;T&gt; | RejectionObject</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> FulfillmentObject&lt;T&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  status: <span class=\"string\">'fulfilled'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  value: T</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> RejectionObject &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  status: <span class=\"string\">'rejected'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  reason: <span class=\"built_in\">any</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n",
        "site": { "data": {} },
        "excerpt": "<p>围绕异步编程领域，现代软件设计正在加速旋转，就为了让程序在一个时间内做更多的事情。当你使用更新更强大的 API 时，你会发现在更多的情况下，使用异步编程是唯一的途径。以前写异步代码很困难，现在也需要你来适应，但是已经变容易了很多。</p>",
        "more": "<h2 id=\"回调函数（Callback）\"><a href=\"#回调函数（Callback）\" class=\"headerlink\" title=\"回调函数（Callback）\"></a>回调函数（Callback）</h2><p>回调函数是异步操作最基本的方法。以下代码就是一个回调函数的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">ajax(url, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 处理逻辑</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<p>但是回调函数有一个致命的弱点，就是容易写出回调地狱（Callback hell）。假设多个请求存在依赖性，你可能就会写出如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">ajax(url, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 处理逻辑</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ajax(url1, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 处理逻辑</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ajax(url2, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"comment\">// 处理逻辑</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<p>回调函数的优点是简单、容易理解和实现，缺点是不利于代码的阅读和维护，各个部分之间高度耦合，使得程序结构混乱、流程难以追踪（尤其是多个回调函数嵌套的情况），而且每个任务只能指定一个回调函数。此外它不能使用 try catch 捕获错误，不能直接 return。</p>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><h3 id=\"Promise-状态\"><a href=\"#Promise-状态\" class=\"headerlink\" title=\"Promise 状态\"></a>Promise 状态</h3><ul>\n<li>pending: 初始状态，既不是成功，也不是失败状态。</li>\n<li>fulfilled: 意味着操作成功完成。</li>\n<li>rejected: 意味着操作失败。</li>\n<li>Settled: Promise 要么被完成，要么被拒绝。Promise 一旦达成，它的状态就不再改变。</li>\n</ul>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/8/14/16c8d7189886fcc7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"\"></p>\n<h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p>ES6 规定，Promise 对象是一个构造函数，用来生成 Promise 实例。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// ... some code</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"comment\">/* 异步操作成功 */</span>)&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    resolve(value)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    reject(error)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<h3 id=\"短路特性\"><a href=\"#短路特性\" class=\"headerlink\" title=\"短路特性\"></a>短路特性</h3><ul>\n<li><code>Promise.all()</code>: 如果参数中 promise 有一个失败（rejected），此实例回调失败（reject）</li>\n<li><code>Promise.race()</code>: 如果参数中某个 promise 解决或拒绝，返回的 promise 就会解决或拒绝。</li>\n</ul>\n<h3 id=\"Promise-all-于-Array-prototype-map\"><a href=\"#Promise-all-于-Array-prototype-map\" class=\"headerlink\" title=\"Promise.all 于 Array.prototype.map\"></a>Promise.all 于 Array.prototype.map</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> urls = [<span class=\"string\">'http://example.com/first.txt'</span>, <span class=\"string\">'http://example.com/second.txt'</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promises = urls.map(<span class=\"function\"><span class=\"params\">url</span> =&gt;</span> downloadText(url))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all(promises).then(<span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">console</span>.log(arr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-allSettled\"><a href=\"#Promise-allSettled\" class=\"headerlink\" title=\"Promise.allSettled()\"></a>Promise.allSettled()</h3><p><code>Promise.allSettled</code> 这一特性是由 Jason Williams，Robert Pamely 和 Mathias Bynens 提出。</p>\n<p>它返回一个 Array 的 Promise，其元素具有以下类型特征：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> SettlementObject&lt;T&gt; = FulfillmentObject&lt;T&gt; | RejectionObject</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> FulfillmentObject&lt;T&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  status: <span class=\"string\">'fulfilled'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  value: T</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> RejectionObject &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  status: <span class=\"string\">'rejected'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  reason: <span class=\"built_in\">any</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>"
      },
      {
        "title": "react-native-scrollable-tab-view 指南",
        "date": "2020-01-30T07:19:19.000Z",
        "_content": "\n## 安装\n\n```sh\n$ yarn add react-native-scrollable-tab-view\n# support AndroidX\n$ yarn add @react-native-community/viewpager\n```\n\n<!--more-->\n\n## renderTabBar\n\nTabBar 的样式，系统提供了两种默认的，分别是 `DefaultTabBar` 和 `ScrollableTabBar`。当然，我们也可以自定义一个。\n\n### DefaultTabBar\n\nTab 会平分在水平方向的空间\n\n```js\nimport React from 'react'\nimport { Text } from 'react-native'\nimport ScrollableTabView, { DefaultTabBar } from 'react-native-scrollable-tab-view'\n\nexport default () => {\n  return (\n    <ScrollableTabView renderTabBar={() => <DefaultTabBar />}>\n      <Text tabLabel=\"Tab #1\">My</Text>\n      <Text tabLabel=\"Tab #2\">favorite</Text>\n      <Text tabLabel=\"Tab #3\">project</Text>\n    </ScrollableTabView>\n  )\n}\n```\n\n### ScrollableTabBar\n\nTab 可以超过屏幕范围，滚动可以显示\n\n```js\nimport React from 'react'\nimport { Text } from 'react-native'\nimport ScrollableTabView, { ScrollableTabsExample } from 'react-native-scrollable-tab-view'\n\nexport default () => {\n  return (\n    <ScrollableTabView renderTabBar={() => <ScrollableTabsExample />}>\n      <Text tabLabel=\"Tab #1\">My</Text>\n      <Text tabLabel=\"Tab #2\">favorite</Text>\n      <Text tabLabel=\"Tab #3\">project</Text>\n    </ScrollableTabView>\n  )\n}\n```\n\n### children\n\n表示所有子视图的数组，请设置 `tabLabel` 属性，你可以实现一个简单地包装组件:\n\n```tsx\nimport React from 'react'\n\ninterface Props {\n  tabLabel: string\n}\n\nconst ScrollableTabViewItem: React.SFC<Props> = props => <>{props.children}</>\n\nexport default ScrollableTabViewItem\n```\n\n### onChangeTab\n\nTab 切换之后会触发此方法，包含一个参数（`Object`类型），这个对象有两个参数\n\n- `i`: 被选中的 Tab 的下标（从 0 开始）\n- `ref`: 被选中的 Tab 对象（基本用不到）\n\n## 其他 Props\n\n- `tabBarPosition`(String) 默认值 `'top'`\n  - `top`：位于屏幕顶部\n  - `bottom`：位于屏幕底部\n  - `overlayTop`：位于屏幕顶部，悬浮在内容视图之上（看颜色区分：视图有颜色，Tab 栏没有颜色）\n  - `overlayBottom`：位于屏幕底部，悬浮在内容视图之上（看颜色区分：视图有颜色，Tab 栏没有颜色）\n- `onScroll` (Function): 视图正在滑动的时候触发此方法，包含一个 Float 类型的数字，范围是`[0, tab数量-1]`\n- `locked`(Bool): 表示手指是否能拖动视图，默认为 `false`（表示可以拖动）。设为 `true` 的话，我们只能“点击”Tab 来切换视图。\n- `initialPage`(Integer): 初始化时被选中的 Tab 下标，默认是 0（即第一页）\n- `tabBarUnderlineStyle`(style): 设置 `DefaultTabBar` 和`ScrollableTabBarTab` 选中时下方横线的样式\n- `tabBarBackgroundColor`(String): 设置整个 Tab 这一栏的背景颜色\n- `tabBarActiveTextColor`(String): 设置选中 Tab 的文字颜色\n- `tabBarInactiveTextColor(String)`: 设置未选中 Tab 的文字颜色\n- `tabBarTextStyle(Object)`: 设置 Tab 文字的样式，比如字号、字体等\n- `style`: 系统 View 都拥有的属性，基本不会涉及到。\n- `contentProps`: 这里要稍微说下 react-native-scrollable-tab-view 的实现，其实在 Android 平台底层用的是 `ViewPagerAndroid`，iOS 平台用的是 `ScrollView`。这个属性的意义是：比如我们设置了某个属性，最后这个属性会被应用在 `ScrollView`/`ViewPagerAndroid`，这样会覆盖库里面默认的，通常官方不建议我们去使用。\n- `scrollWithoutAnimation`(Bool，默认为 `false`): 设置“点击”Tab 时，视图切换是否有动画，默认为 `false`（即：有动画效果）。\n- `prerenderingSiblingsNumber` (Integer): 预加载相近的兄弟节点数量，`Infinity` 表示渲染所有的兄弟节点， 默认值是 `0` 表示渲染当前页面\n",
        "source": "_posts/react-native-scrollable-tab-view-guide.md",
        "raw": "---\ntitle: react-native-scrollable-tab-view 指南\ndate: 2020-01-30 15:19:19\ncategories:\n  - [CrossPlatform, ReactNative]\ntags: tab-view\n---\n\n## 安装\n\n```sh\n$ yarn add react-native-scrollable-tab-view\n# support AndroidX\n$ yarn add @react-native-community/viewpager\n```\n\n<!--more-->\n\n## renderTabBar\n\nTabBar 的样式，系统提供了两种默认的，分别是 `DefaultTabBar` 和 `ScrollableTabBar`。当然，我们也可以自定义一个。\n\n### DefaultTabBar\n\nTab 会平分在水平方向的空间\n\n```js\nimport React from 'react'\nimport { Text } from 'react-native'\nimport ScrollableTabView, { DefaultTabBar } from 'react-native-scrollable-tab-view'\n\nexport default () => {\n  return (\n    <ScrollableTabView renderTabBar={() => <DefaultTabBar />}>\n      <Text tabLabel=\"Tab #1\">My</Text>\n      <Text tabLabel=\"Tab #2\">favorite</Text>\n      <Text tabLabel=\"Tab #3\">project</Text>\n    </ScrollableTabView>\n  )\n}\n```\n\n### ScrollableTabBar\n\nTab 可以超过屏幕范围，滚动可以显示\n\n```js\nimport React from 'react'\nimport { Text } from 'react-native'\nimport ScrollableTabView, { ScrollableTabsExample } from 'react-native-scrollable-tab-view'\n\nexport default () => {\n  return (\n    <ScrollableTabView renderTabBar={() => <ScrollableTabsExample />}>\n      <Text tabLabel=\"Tab #1\">My</Text>\n      <Text tabLabel=\"Tab #2\">favorite</Text>\n      <Text tabLabel=\"Tab #3\">project</Text>\n    </ScrollableTabView>\n  )\n}\n```\n\n### children\n\n表示所有子视图的数组，请设置 `tabLabel` 属性，你可以实现一个简单地包装组件:\n\n```tsx\nimport React from 'react'\n\ninterface Props {\n  tabLabel: string\n}\n\nconst ScrollableTabViewItem: React.SFC<Props> = props => <>{props.children}</>\n\nexport default ScrollableTabViewItem\n```\n\n### onChangeTab\n\nTab 切换之后会触发此方法，包含一个参数（`Object`类型），这个对象有两个参数\n\n- `i`: 被选中的 Tab 的下标（从 0 开始）\n- `ref`: 被选中的 Tab 对象（基本用不到）\n\n## 其他 Props\n\n- `tabBarPosition`(String) 默认值 `'top'`\n  - `top`：位于屏幕顶部\n  - `bottom`：位于屏幕底部\n  - `overlayTop`：位于屏幕顶部，悬浮在内容视图之上（看颜色区分：视图有颜色，Tab 栏没有颜色）\n  - `overlayBottom`：位于屏幕底部，悬浮在内容视图之上（看颜色区分：视图有颜色，Tab 栏没有颜色）\n- `onScroll` (Function): 视图正在滑动的时候触发此方法，包含一个 Float 类型的数字，范围是`[0, tab数量-1]`\n- `locked`(Bool): 表示手指是否能拖动视图，默认为 `false`（表示可以拖动）。设为 `true` 的话，我们只能“点击”Tab 来切换视图。\n- `initialPage`(Integer): 初始化时被选中的 Tab 下标，默认是 0（即第一页）\n- `tabBarUnderlineStyle`(style): 设置 `DefaultTabBar` 和`ScrollableTabBarTab` 选中时下方横线的样式\n- `tabBarBackgroundColor`(String): 设置整个 Tab 这一栏的背景颜色\n- `tabBarActiveTextColor`(String): 设置选中 Tab 的文字颜色\n- `tabBarInactiveTextColor(String)`: 设置未选中 Tab 的文字颜色\n- `tabBarTextStyle(Object)`: 设置 Tab 文字的样式，比如字号、字体等\n- `style`: 系统 View 都拥有的属性，基本不会涉及到。\n- `contentProps`: 这里要稍微说下 react-native-scrollable-tab-view 的实现，其实在 Android 平台底层用的是 `ViewPagerAndroid`，iOS 平台用的是 `ScrollView`。这个属性的意义是：比如我们设置了某个属性，最后这个属性会被应用在 `ScrollView`/`ViewPagerAndroid`，这样会覆盖库里面默认的，通常官方不建议我们去使用。\n- `scrollWithoutAnimation`(Bool，默认为 `false`): 设置“点击”Tab 时，视图切换是否有动画，默认为 `false`（即：有动画效果）。\n- `prerenderingSiblingsNumber` (Integer): 预加载相近的兄弟节点数量，`Infinity` 表示渲染所有的兄弟节点， 默认值是 `0` 表示渲染当前页面\n",
        "slug": "react-native-scrollable-tab-view-guide",
        "published": 1,
        "updated": "2020-02-05T03:59:14.458Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ck68yj5ut00079zey5i4x9jx6",
        "content": "<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add react-native-scrollable-tab-view</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># support AndroidX</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add @react-native-community/viewpager</span></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h2 id=\"renderTabBar\"><a href=\"#renderTabBar\" class=\"headerlink\" title=\"renderTabBar\"></a>renderTabBar</h2><p>TabBar 的样式，系统提供了两种默认的，分别是 <code>DefaultTabBar</code> 和 <code>ScrollableTabBar</code>。当然，我们也可以自定义一个。</p>\n<h3 id=\"DefaultTabBar\"><a href=\"#DefaultTabBar\" class=\"headerlink\" title=\"DefaultTabBar\"></a>DefaultTabBar</h3><p>Tab 会平分在水平方向的空间</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Text &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ScrollableTabView, &#123; DefaultTabBar &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native-scrollable-tab-view'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;ScrollableTabView renderTabBar=&#123;() =&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">DefaultTabBar</span> /&gt;</span>&#125;&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">tabLabel</span>=<span class=\"string\">\"Tab #1\"</span>&gt;</span>My<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">tabLabel</span>=<span class=\"string\">\"Tab #2\"</span>&gt;</span>favorite<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">tabLabel</span>=<span class=\"string\">\"Tab #3\"</span>&gt;</span>project<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">ScrollableTabView</span>&gt;</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<h3 id=\"ScrollableTabBar\"><a href=\"#ScrollableTabBar\" class=\"headerlink\" title=\"ScrollableTabBar\"></a>ScrollableTabBar</h3><p>Tab 可以超过屏幕范围，滚动可以显示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Text &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ScrollableTabView, &#123; ScrollableTabsExample &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native-scrollable-tab-view'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;ScrollableTabView renderTabBar=&#123;() =&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ScrollableTabsExample</span> /&gt;</span>&#125;&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">tabLabel</span>=<span class=\"string\">\"Tab #1\"</span>&gt;</span>My<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">tabLabel</span>=<span class=\"string\">\"Tab #2\"</span>&gt;</span>favorite<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">tabLabel</span>=<span class=\"string\">\"Tab #3\"</span>&gt;</span>project<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">ScrollableTabView</span>&gt;</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<h3 id=\"children\"><a href=\"#children\" class=\"headerlink\" title=\"children\"></a>children</h3><p>表示所有子视图的数组，请设置 <code>tabLabel</code> 属性，你可以实现一个简单地包装组件:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">interface Props &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  tabLabel: string</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">const ScrollableTabViewItem: React.SFC&lt;Props&gt; &#x3D; props &#x3D;&gt; &lt;&gt;&#123;props.children&#125;&lt;&#x2F;&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">export default ScrollableTabViewItem</span></pre></td></tr></table></figure>\n\n<h3 id=\"onChangeTab\"><a href=\"#onChangeTab\" class=\"headerlink\" title=\"onChangeTab\"></a>onChangeTab</h3><p>Tab 切换之后会触发此方法，包含一个参数（<code>Object</code>类型），这个对象有两个参数</p>\n<ul>\n<li><code>i</code>: 被选中的 Tab 的下标（从 0 开始）</li>\n<li><code>ref</code>: 被选中的 Tab 对象（基本用不到）</li>\n</ul>\n<h2 id=\"其他-Props\"><a href=\"#其他-Props\" class=\"headerlink\" title=\"其他 Props\"></a>其他 Props</h2><ul>\n<li><code>tabBarPosition</code>(String) 默认值 <code>&#39;top&#39;</code><ul>\n<li><code>top</code>：位于屏幕顶部</li>\n<li><code>bottom</code>：位于屏幕底部</li>\n<li><code>overlayTop</code>：位于屏幕顶部，悬浮在内容视图之上（看颜色区分：视图有颜色，Tab 栏没有颜色）</li>\n<li><code>overlayBottom</code>：位于屏幕底部，悬浮在内容视图之上（看颜色区分：视图有颜色，Tab 栏没有颜色）</li>\n</ul>\n</li>\n<li><code>onScroll</code> (Function): 视图正在滑动的时候触发此方法，包含一个 Float 类型的数字，范围是<code>[0, tab数量-1]</code></li>\n<li><code>locked</code>(Bool): 表示手指是否能拖动视图，默认为 <code>false</code>（表示可以拖动）。设为 <code>true</code> 的话，我们只能“点击”Tab 来切换视图。</li>\n<li><code>initialPage</code>(Integer): 初始化时被选中的 Tab 下标，默认是 0（即第一页）</li>\n<li><code>tabBarUnderlineStyle</code>(style): 设置 <code>DefaultTabBar</code> 和<code>ScrollableTabBarTab</code> 选中时下方横线的样式</li>\n<li><code>tabBarBackgroundColor</code>(String): 设置整个 Tab 这一栏的背景颜色</li>\n<li><code>tabBarActiveTextColor</code>(String): 设置选中 Tab 的文字颜色</li>\n<li><code>tabBarInactiveTextColor(String)</code>: 设置未选中 Tab 的文字颜色</li>\n<li><code>tabBarTextStyle(Object)</code>: 设置 Tab 文字的样式，比如字号、字体等</li>\n<li><code>style</code>: 系统 View 都拥有的属性，基本不会涉及到。</li>\n<li><code>contentProps</code>: 这里要稍微说下 react-native-scrollable-tab-view 的实现，其实在 Android 平台底层用的是 <code>ViewPagerAndroid</code>，iOS 平台用的是 <code>ScrollView</code>。这个属性的意义是：比如我们设置了某个属性，最后这个属性会被应用在 <code>ScrollView</code>/<code>ViewPagerAndroid</code>，这样会覆盖库里面默认的，通常官方不建议我们去使用。</li>\n<li><code>scrollWithoutAnimation</code>(Bool，默认为 <code>false</code>): 设置“点击”Tab 时，视图切换是否有动画，默认为 <code>false</code>（即：有动画效果）。</li>\n<li><code>prerenderingSiblingsNumber</code> (Integer): 预加载相近的兄弟节点数量，<code>Infinity</code> 表示渲染所有的兄弟节点， 默认值是 <code>0</code> 表示渲染当前页面</li>\n</ul>\n",
        "site": { "data": {} },
        "excerpt": "<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add react-native-scrollable-tab-view</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># support AndroidX</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add @react-native-community/viewpager</span></pre></td></tr></table></figure>",
        "more": "<h2 id=\"renderTabBar\"><a href=\"#renderTabBar\" class=\"headerlink\" title=\"renderTabBar\"></a>renderTabBar</h2><p>TabBar 的样式，系统提供了两种默认的，分别是 <code>DefaultTabBar</code> 和 <code>ScrollableTabBar</code>。当然，我们也可以自定义一个。</p>\n<h3 id=\"DefaultTabBar\"><a href=\"#DefaultTabBar\" class=\"headerlink\" title=\"DefaultTabBar\"></a>DefaultTabBar</h3><p>Tab 会平分在水平方向的空间</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Text &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ScrollableTabView, &#123; DefaultTabBar &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native-scrollable-tab-view'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;ScrollableTabView renderTabBar=&#123;() =&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">DefaultTabBar</span> /&gt;</span>&#125;&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">tabLabel</span>=<span class=\"string\">\"Tab #1\"</span>&gt;</span>My<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">tabLabel</span>=<span class=\"string\">\"Tab #2\"</span>&gt;</span>favorite<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">tabLabel</span>=<span class=\"string\">\"Tab #3\"</span>&gt;</span>project<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">ScrollableTabView</span>&gt;</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<h3 id=\"ScrollableTabBar\"><a href=\"#ScrollableTabBar\" class=\"headerlink\" title=\"ScrollableTabBar\"></a>ScrollableTabBar</h3><p>Tab 可以超过屏幕范围，滚动可以显示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Text &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ScrollableTabView, &#123; ScrollableTabsExample &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native-scrollable-tab-view'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;ScrollableTabView renderTabBar=&#123;() =&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ScrollableTabsExample</span> /&gt;</span>&#125;&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">tabLabel</span>=<span class=\"string\">\"Tab #1\"</span>&gt;</span>My<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">tabLabel</span>=<span class=\"string\">\"Tab #2\"</span>&gt;</span>favorite<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">tabLabel</span>=<span class=\"string\">\"Tab #3\"</span>&gt;</span>project<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">ScrollableTabView</span>&gt;</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<h3 id=\"children\"><a href=\"#children\" class=\"headerlink\" title=\"children\"></a>children</h3><p>表示所有子视图的数组，请设置 <code>tabLabel</code> 属性，你可以实现一个简单地包装组件:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">interface Props &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  tabLabel: string</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">const ScrollableTabViewItem: React.SFC&lt;Props&gt; &#x3D; props &#x3D;&gt; &lt;&gt;&#123;props.children&#125;&lt;&#x2F;&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">export default ScrollableTabViewItem</span></pre></td></tr></table></figure>\n\n<h3 id=\"onChangeTab\"><a href=\"#onChangeTab\" class=\"headerlink\" title=\"onChangeTab\"></a>onChangeTab</h3><p>Tab 切换之后会触发此方法，包含一个参数（<code>Object</code>类型），这个对象有两个参数</p>\n<ul>\n<li><code>i</code>: 被选中的 Tab 的下标（从 0 开始）</li>\n<li><code>ref</code>: 被选中的 Tab 对象（基本用不到）</li>\n</ul>\n<h2 id=\"其他-Props\"><a href=\"#其他-Props\" class=\"headerlink\" title=\"其他 Props\"></a>其他 Props</h2><ul>\n<li><code>tabBarPosition</code>(String) 默认值 <code>&#39;top&#39;</code><ul>\n<li><code>top</code>：位于屏幕顶部</li>\n<li><code>bottom</code>：位于屏幕底部</li>\n<li><code>overlayTop</code>：位于屏幕顶部，悬浮在内容视图之上（看颜色区分：视图有颜色，Tab 栏没有颜色）</li>\n<li><code>overlayBottom</code>：位于屏幕底部，悬浮在内容视图之上（看颜色区分：视图有颜色，Tab 栏没有颜色）</li>\n</ul>\n</li>\n<li><code>onScroll</code> (Function): 视图正在滑动的时候触发此方法，包含一个 Float 类型的数字，范围是<code>[0, tab数量-1]</code></li>\n<li><code>locked</code>(Bool): 表示手指是否能拖动视图，默认为 <code>false</code>（表示可以拖动）。设为 <code>true</code> 的话，我们只能“点击”Tab 来切换视图。</li>\n<li><code>initialPage</code>(Integer): 初始化时被选中的 Tab 下标，默认是 0（即第一页）</li>\n<li><code>tabBarUnderlineStyle</code>(style): 设置 <code>DefaultTabBar</code> 和<code>ScrollableTabBarTab</code> 选中时下方横线的样式</li>\n<li><code>tabBarBackgroundColor</code>(String): 设置整个 Tab 这一栏的背景颜色</li>\n<li><code>tabBarActiveTextColor</code>(String): 设置选中 Tab 的文字颜色</li>\n<li><code>tabBarInactiveTextColor(String)</code>: 设置未选中 Tab 的文字颜色</li>\n<li><code>tabBarTextStyle(Object)</code>: 设置 Tab 文字的样式，比如字号、字体等</li>\n<li><code>style</code>: 系统 View 都拥有的属性，基本不会涉及到。</li>\n<li><code>contentProps</code>: 这里要稍微说下 react-native-scrollable-tab-view 的实现，其实在 Android 平台底层用的是 <code>ViewPagerAndroid</code>，iOS 平台用的是 <code>ScrollView</code>。这个属性的意义是：比如我们设置了某个属性，最后这个属性会被应用在 <code>ScrollView</code>/<code>ViewPagerAndroid</code>，这样会覆盖库里面默认的，通常官方不建议我们去使用。</li>\n<li><code>scrollWithoutAnimation</code>(Bool，默认为 <code>false</code>): 设置“点击”Tab 时，视图切换是否有动画，默认为 <code>false</code>（即：有动画效果）。</li>\n<li><code>prerenderingSiblingsNumber</code> (Integer): 预加载相近的兄弟节点数量，<code>Infinity</code> 表示渲染所有的兄弟节点， 默认值是 <code>0</code> 表示渲染当前页面</li>\n</ul>"
      },
      {
        "_content": "## 基本类型和引用类型的值\n\nECMAScript 变量可能包含两种不同数据类型的值：基本类型值和引用类型值。**基本类型值**指的是简单的数据段，而**引用类型的值**指那些可能由多个值构成的对象。\n\n在将一个值赋给变量时，解析器必须确定这个值是基本类型值还是引用类型值。\n\nECMAScript 中有五种基本类型: Undefined、Null、Boolean、Number 和 String。这五种基本数据类型是按值访问的，因为可以操作保存在变量中的实际的值。\n\n引用类型的值是保存在内存中的对象。与其他语言不同，JavaScript 不允许直接访问内存中的位置。也就是说不能直接操作对象的内存空间。在复制保存着对象的某个变量时，操作的是对象的引用。但在为对象添加属性时，操作的是实际的对象。\n\n> 在很多语言中，字符串以对象的形式来表示，因此被认为是引用类型的。ECMAScript 放弃了这一传统\n\n<!--more-->\n\n## 浅比较\n\n**浅比较**也称引用相等，在 javascript 中， `===` 是作**浅比较**,只检查左右两边是否是同一个对象的引用：\n\n```js\nvar m = { a: 1 }\nvar n = { a: 1 }\nconsole.log(m === n) // false\n// 虽然没有赋值给变量，但比较的还是栈内存中的值引用\nconsole.log({ a:1 } === { a:1 }) // false\n```\n\n> 变量名只是指向栈内存的指针，也就是给这个栈内存取得别名\n\n## 深比较\n\n**深比较**也称原值相等，深比较是指检查两个**对象**的所有属性是否**都相等**,深比较需要以递归的方式遍历两个对象的所有属性，操作比较耗时，深比较不管这两个对象是不是同一对象的引用。\n\n### lodash.isEqual\n\n> `_.isEqual`: 执行深比较来确定两者的值是否相等。\n> 注意: 这个方法支持比较 `arrays`, `array buffers`, `booleans`, `date objects`, `error objects`, `maps`, `numbers`, `Object objects`, `regexes`, `sets`, `strings`, `symbols`, 以及 `typed arrays`. Object对象值比较自身的属性，不包括继承的和可枚举的属性。不支持函数和DOM节点比较。\n\n```js\nimport _ from 'lodash'\nconst m = {a:1}\nconst n = {a:1}\nconsole.log(_.isEqual(m, n)) // true\n```\n\n### fast-deep-equal\n\n```js\nimport deepEqual from 'fast-deep-equal'\ndeepEqual({name:'杨俊宁'},{name:'杨俊宁'}) // true\n```\n",
        "source": "_posts/javascript浅比较和深比较.md",
        "raw": "## 基本类型和引用类型的值\n\nECMAScript 变量可能包含两种不同数据类型的值：基本类型值和引用类型值。**基本类型值**指的是简单的数据段，而**引用类型的值**指那些可能由多个值构成的对象。\n\n在将一个值赋给变量时，解析器必须确定这个值是基本类型值还是引用类型值。\n\nECMAScript 中有五种基本类型: Undefined、Null、Boolean、Number 和 String。这五种基本数据类型是按值访问的，因为可以操作保存在变量中的实际的值。\n\n引用类型的值是保存在内存中的对象。与其他语言不同，JavaScript 不允许直接访问内存中的位置。也就是说不能直接操作对象的内存空间。在复制保存着对象的某个变量时，操作的是对象的引用。但在为对象添加属性时，操作的是实际的对象。\n\n> 在很多语言中，字符串以对象的形式来表示，因此被认为是引用类型的。ECMAScript 放弃了这一传统\n\n<!--more-->\n\n## 浅比较\n\n**浅比较**也称引用相等，在 javascript 中， `===` 是作**浅比较**,只检查左右两边是否是同一个对象的引用：\n\n```js\nvar m = { a: 1 }\nvar n = { a: 1 }\nconsole.log(m === n) // false\n// 虽然没有赋值给变量，但比较的还是栈内存中的值引用\nconsole.log({ a:1 } === { a:1 }) // false\n```\n\n> 变量名只是指向栈内存的指针，也就是给这个栈内存取得别名\n\n## 深比较\n\n**深比较**也称原值相等，深比较是指检查两个**对象**的所有属性是否**都相等**,深比较需要以递归的方式遍历两个对象的所有属性，操作比较耗时，深比较不管这两个对象是不是同一对象的引用。\n\n### lodash.isEqual\n\n> `_.isEqual`: 执行深比较来确定两者的值是否相等。\n> 注意: 这个方法支持比较 `arrays`, `array buffers`, `booleans`, `date objects`, `error objects`, `maps`, `numbers`, `Object objects`, `regexes`, `sets`, `strings`, `symbols`, 以及 `typed arrays`. Object对象值比较自身的属性，不包括继承的和可枚举的属性。不支持函数和DOM节点比较。\n\n```js\nimport _ from 'lodash'\nconst m = {a:1}\nconst n = {a:1}\nconsole.log(_.isEqual(m, n)) // true\n```\n\n### fast-deep-equal\n\n```js\nimport deepEqual from 'fast-deep-equal'\ndeepEqual({name:'杨俊宁'},{name:'杨俊宁'}) // true\n```\n",
        "slug": "javascript浅比较和深比较",
        "published": 1,
        "date": "2020-02-04T12:03:39.260Z",
        "updated": "2020-02-05T04:04:11.632Z",
        "title": "javascript浅比较和深比较",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ck68yj5uu00089zeyee0v4us0",
        "content": "<h2 id=\"基本类型和引用类型的值\"><a href=\"#基本类型和引用类型的值\" class=\"headerlink\" title=\"基本类型和引用类型的值\"></a>基本类型和引用类型的值</h2><p>ECMAScript 变量可能包含两种不同数据类型的值：基本类型值和引用类型值。<strong>基本类型值</strong>指的是简单的数据段，而<strong>引用类型的值</strong>指那些可能由多个值构成的对象。</p>\n<p>在将一个值赋给变量时，解析器必须确定这个值是基本类型值还是引用类型值。</p>\n<p>ECMAScript 中有五种基本类型: Undefined、Null、Boolean、Number 和 String。这五种基本数据类型是按值访问的，因为可以操作保存在变量中的实际的值。</p>\n<p>引用类型的值是保存在内存中的对象。与其他语言不同，JavaScript 不允许直接访问内存中的位置。也就是说不能直接操作对象的内存空间。在复制保存着对象的某个变量时，操作的是对象的引用。但在为对象添加属性时，操作的是实际的对象。</p>\n<blockquote>\n<p>在很多语言中，字符串以对象的形式来表示，因此被认为是引用类型的。ECMAScript 放弃了这一传统</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"浅比较\"><a href=\"#浅比较\" class=\"headerlink\" title=\"浅比较\"></a>浅比较</h2><p><strong>浅比较</strong>也称引用相等，在 javascript 中， <code>===</code> 是作<strong>浅比较</strong>,只检查左右两边是否是同一个对象的引用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> m = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> n = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(m === n) <span class=\"comment\">// false</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 虽然没有赋值给变量，但比较的还是栈内存中的值引用</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(&#123; <span class=\"attr\">a</span>:<span class=\"number\">1</span> &#125; === &#123; <span class=\"attr\">a</span>:<span class=\"number\">1</span> &#125;) <span class=\"comment\">// false</span></span></pre></td></tr></table></figure>\n\n<blockquote>\n<p>变量名只是指向栈内存的指针，也就是给这个栈内存取得别名</p>\n</blockquote>\n<h2 id=\"深比较\"><a href=\"#深比较\" class=\"headerlink\" title=\"深比较\"></a>深比较</h2><p><strong>深比较</strong>也称原值相等，深比较是指检查两个<strong>对象</strong>的所有属性是否<strong>都相等</strong>,深比较需要以递归的方式遍历两个对象的所有属性，操作比较耗时，深比较不管这两个对象是不是同一对象的引用。</p>\n<h3 id=\"lodash-isEqual\"><a href=\"#lodash-isEqual\" class=\"headerlink\" title=\"lodash.isEqual\"></a>lodash.isEqual</h3><blockquote>\n<p><code>_.isEqual</code>: 执行深比较来确定两者的值是否相等。<br>注意: 这个方法支持比较 <code>arrays</code>, <code>array buffers</code>, <code>booleans</code>, <code>date objects</code>, <code>error objects</code>, <code>maps</code>, <code>numbers</code>, <code>Object objects</code>, <code>regexes</code>, <code>sets</code>, <code>strings</code>, <code>symbols</code>, 以及 <code>typed arrays</code>. Object对象值比较自身的属性，不包括继承的和可枚举的属性。不支持函数和DOM节点比较。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> m = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> n = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(_.isEqual(m, n)) <span class=\"comment\">// true</span></span></pre></td></tr></table></figure>\n\n<h3 id=\"fast-deep-equal\"><a href=\"#fast-deep-equal\" class=\"headerlink\" title=\"fast-deep-equal\"></a>fast-deep-equal</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> deepEqual <span class=\"keyword\">from</span> <span class=\"string\">'fast-deep-equal'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">deepEqual(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'杨俊宁'</span>&#125;,&#123;<span class=\"attr\">name</span>:<span class=\"string\">'杨俊宁'</span>&#125;) <span class=\"comment\">// true</span></span></pre></td></tr></table></figure>\n",
        "site": { "data": {} },
        "excerpt": "<h2 id=\"基本类型和引用类型的值\"><a href=\"#基本类型和引用类型的值\" class=\"headerlink\" title=\"基本类型和引用类型的值\"></a>基本类型和引用类型的值</h2><p>ECMAScript 变量可能包含两种不同数据类型的值：基本类型值和引用类型值。<strong>基本类型值</strong>指的是简单的数据段，而<strong>引用类型的值</strong>指那些可能由多个值构成的对象。</p>\n<p>在将一个值赋给变量时，解析器必须确定这个值是基本类型值还是引用类型值。</p>\n<p>ECMAScript 中有五种基本类型: Undefined、Null、Boolean、Number 和 String。这五种基本数据类型是按值访问的，因为可以操作保存在变量中的实际的值。</p>\n<p>引用类型的值是保存在内存中的对象。与其他语言不同，JavaScript 不允许直接访问内存中的位置。也就是说不能直接操作对象的内存空间。在复制保存着对象的某个变量时，操作的是对象的引用。但在为对象添加属性时，操作的是实际的对象。</p>\n<blockquote>\n<p>在很多语言中，字符串以对象的形式来表示，因此被认为是引用类型的。ECMAScript 放弃了这一传统</p>\n</blockquote>",
        "more": "<h2 id=\"浅比较\"><a href=\"#浅比较\" class=\"headerlink\" title=\"浅比较\"></a>浅比较</h2><p><strong>浅比较</strong>也称引用相等，在 javascript 中， <code>===</code> 是作<strong>浅比较</strong>,只检查左右两边是否是同一个对象的引用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> m = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> n = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(m === n) <span class=\"comment\">// false</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 虽然没有赋值给变量，但比较的还是栈内存中的值引用</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(&#123; <span class=\"attr\">a</span>:<span class=\"number\">1</span> &#125; === &#123; <span class=\"attr\">a</span>:<span class=\"number\">1</span> &#125;) <span class=\"comment\">// false</span></span></pre></td></tr></table></figure>\n\n<blockquote>\n<p>变量名只是指向栈内存的指针，也就是给这个栈内存取得别名</p>\n</blockquote>\n<h2 id=\"深比较\"><a href=\"#深比较\" class=\"headerlink\" title=\"深比较\"></a>深比较</h2><p><strong>深比较</strong>也称原值相等，深比较是指检查两个<strong>对象</strong>的所有属性是否<strong>都相等</strong>,深比较需要以递归的方式遍历两个对象的所有属性，操作比较耗时，深比较不管这两个对象是不是同一对象的引用。</p>\n<h3 id=\"lodash-isEqual\"><a href=\"#lodash-isEqual\" class=\"headerlink\" title=\"lodash.isEqual\"></a>lodash.isEqual</h3><blockquote>\n<p><code>_.isEqual</code>: 执行深比较来确定两者的值是否相等。<br>注意: 这个方法支持比较 <code>arrays</code>, <code>array buffers</code>, <code>booleans</code>, <code>date objects</code>, <code>error objects</code>, <code>maps</code>, <code>numbers</code>, <code>Object objects</code>, <code>regexes</code>, <code>sets</code>, <code>strings</code>, <code>symbols</code>, 以及 <code>typed arrays</code>. Object对象值比较自身的属性，不包括继承的和可枚举的属性。不支持函数和DOM节点比较。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> m = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> n = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(_.isEqual(m, n)) <span class=\"comment\">// true</span></span></pre></td></tr></table></figure>\n\n<h3 id=\"fast-deep-equal\"><a href=\"#fast-deep-equal\" class=\"headerlink\" title=\"fast-deep-equal\"></a>fast-deep-equal</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> deepEqual <span class=\"keyword\">from</span> <span class=\"string\">'fast-deep-equal'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">deepEqual(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'杨俊宁'</span>&#125;,&#123;<span class=\"attr\">name</span>:<span class=\"string\">'杨俊宁'</span>&#125;) <span class=\"comment\">// true</span></span></pre></td></tr></table></figure>"
      },
      {
        "title": "网址收藏",
        "date": "2020-01-29T12:24:53.000Z",
        "_content": "\n## React Native\n\n- [react-native-shadow-generator](https://ethercreative.github.io/react-native-shadow-generator/)\n\n## RegRex\n\n- [iHateRegex](https://ihateregex.io/)\n\n<!--more-->\n",
        "source": "_posts/网址收藏.md",
        "raw": "---\ntitle: 网址收藏\ndate: 2020-01-29 20:24:53\n---\n\n## React Native\n\n- [react-native-shadow-generator](https://ethercreative.github.io/react-native-shadow-generator/)\n\n## RegRex\n\n- [iHateRegex](https://ihateregex.io/)\n\n<!--more-->\n",
        "slug": "网址收藏",
        "published": 1,
        "updated": "2020-02-04T12:03:52.282Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ck68yj5uw000c9zey3pi47k7a",
        "content": "<h2 id=\"React-Native\"><a href=\"#React-Native\" class=\"headerlink\" title=\"React Native\"></a>React Native</h2><ul>\n<li><a href=\"https://ethercreative.github.io/react-native-shadow-generator/\" target=\"_blank\" rel=\"noopener\">react-native-shadow-generator</a></li>\n</ul>\n<h2 id=\"RegRex\"><a href=\"#RegRex\" class=\"headerlink\" title=\"RegRex\"></a>RegRex</h2><ul>\n<li><a href=\"https://ihateregex.io/\" target=\"_blank\" rel=\"noopener\">iHateRegex</a></li>\n</ul>\n<a id=\"more\"></a>\n",
        "site": { "data": {} },
        "excerpt": "<h2 id=\"React-Native\"><a href=\"#React-Native\" class=\"headerlink\" title=\"React Native\"></a>React Native</h2><ul>\n<li><a href=\"https://ethercreative.github.io/react-native-shadow-generator/\" target=\"_blank\" rel=\"noopener\">react-native-shadow-generator</a></li>\n</ul>\n<h2 id=\"RegRex\"><a href=\"#RegRex\" class=\"headerlink\" title=\"RegRex\"></a>RegRex</h2><ul>\n<li><a href=\"https://ihateregex.io/\" target=\"_blank\" rel=\"noopener\">iHateRegex</a></li>\n</ul>",
        "more": ""
      },
      {
        "title": "在 react-native 中使用 mobx",
        "date": "2020-01-29T12:46:38.000Z",
        "_content": "\nMobx 是简单、可扩展的状态管理，React 和 MobX 是一对强力组合。React 通过提供机制把应用状态转换为可渲染组件树并对其进行渲染。而 MobX 提供机制来存储和更新应用状态供 React 使用。\n\n![](https://user-gold-cdn.xitu.io/2019/8/6/16c66572c68cbabc?imageslim)\n\n<!--more-->\n\n## 安装\n\n```sh\n$ yarn add mobx\n# React 绑定库\n$ yarn add mobx-react\n```\n\n## 启用装饰器语法\n\n### TypeScript\n\n在 `tsconfig.json` 中启用编译器选项 `\"experimentalDecorators\": true` 。\n\n### Babel\n\n在 Babel 中配置 MobX 的方式是使用 mobx preset，这种方式更方便，其中包含了装饰器及其他几个经常与 mobx 一起使用的插件:\n\n```sh\n$ yarn add babel-preset-mobx -D\n```\n\n```js\nmodule.exports = {\n  presets: ['module:metro-react-native-babel-preset', 'mobx'],\n}\n```\n\n## 核心概念\n\n### `@observable`: 可观察的状态\n\n装饰器可以在 ES7 或者 TypeScript 类属性中属性使用，将其转换成可观察的。 `@observable` 可以在实例字段和属性 `getter` 上使用。 对于对象的哪部分需要成为可观察的，`@observable` 提供了细粒度的控制。\n\n```js\nimport { observable, computed } from 'mobx'\n\nclass OrderLine {\n  @observable price = 0\n  @observable amount = 1\n\n  @computed get total() {\n    return this.price * this.amount\n  }\n}\n```\n\n### `@computed`: 计算值\n\n> 黄金法则: 如果你想创建一个基于当前状态的值时，请使用 `computed`。\n\n计算值(computed values)是可以根据现有的状态或其它计算值衍生出的值。 概念上来说，它们与 excel 表格中的公式十分相似。 不要低估计算值，因为它们有助于使实际可修改的状态尽可能的小。 此外计算值还是高度优化过的，所以尽可能的多使用它们。\n\n不要把 `computed` 和 `autorun` 搞混。它们都是响应式调用的表达式，但是，如果你想响应式的产生一个可以被其它 `observer` 使用的值，请使用 `@computed`，如果你不想产生一个新值，而想要达到一个效果，请使用 `autorun`。 举例来说，效果是像打印日志、发起网络请求等这样命令式的副作用。\n\n### `@action`: 修改可观察状态\n\n只有在严格模式(默认是不启用)下使用 MobX 时才需要 `action` 包装。 建议使用 `action`，因为它将帮助你更好地组织应用，并表达出一个函数修改状态的意图。 同时,\n\n```js\nclass Ticker {\n  @observable tick = 0\n\n  @action increment = () => {\n    this.tick++\n  }\n}\n\nconst ticker = new Ticker()\nsetInterval(ticker.increment, 1000)\n```\n\n### `runInAction`: 异步 Action\n\n`runInAction` 是个简单的工具函数，它接收代码块并在(异步的)动作中执行。这对于即时创建和执行动作非常有用，例如在异步过程中。`runInAction(f)` 是 `action(f)()` 的语法糖。\n\n```js\nclass Store {\n  @observable data = []\n\n  asyncAction = async () => {\n    const getData = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve({ data: [] })\n      }, 2000)\n    })\n    const { data } = await getData()\n    runInAction(() => {\n      this.data = data\n    })\n  }\n}\n```\n\n## 最佳实践\n\n- 不要传递基础类型值给子组件，使用对象包裹或将整个 store 传给子组件\n- 在所有渲染 `@observable` 的组件上使用 `@observer`\n- 不要拷贝可观察属性并存储在本地\n- Render 回调函数不是 render 方法的一部分\n- 间接引用值尽可能晚的使用\n- 使用大量的小组件\n- 在专用组件中渲染列表项\n",
        "source": "_posts/use-mobx-with-react-native.md",
        "raw": "---\ntitle: 在 react-native 中使用 mobx\ndate: 2020-01-29 20:46:38\ncategories: 状态管理\ntags: mobx\n---\n\nMobx 是简单、可扩展的状态管理，React 和 MobX 是一对强力组合。React 通过提供机制把应用状态转换为可渲染组件树并对其进行渲染。而 MobX 提供机制来存储和更新应用状态供 React 使用。\n\n![](https://user-gold-cdn.xitu.io/2019/8/6/16c66572c68cbabc?imageslim)\n\n<!--more-->\n\n## 安装\n\n```sh\n$ yarn add mobx\n# React 绑定库\n$ yarn add mobx-react\n```\n\n## 启用装饰器语法\n\n### TypeScript\n\n在 `tsconfig.json` 中启用编译器选项 `\"experimentalDecorators\": true` 。\n\n### Babel\n\n在 Babel 中配置 MobX 的方式是使用 mobx preset，这种方式更方便，其中包含了装饰器及其他几个经常与 mobx 一起使用的插件:\n\n```sh\n$ yarn add babel-preset-mobx -D\n```\n\n```js\nmodule.exports = {\n  presets: ['module:metro-react-native-babel-preset', 'mobx'],\n}\n```\n\n## 核心概念\n\n### `@observable`: 可观察的状态\n\n装饰器可以在 ES7 或者 TypeScript 类属性中属性使用，将其转换成可观察的。 `@observable` 可以在实例字段和属性 `getter` 上使用。 对于对象的哪部分需要成为可观察的，`@observable` 提供了细粒度的控制。\n\n```js\nimport { observable, computed } from 'mobx'\n\nclass OrderLine {\n  @observable price = 0\n  @observable amount = 1\n\n  @computed get total() {\n    return this.price * this.amount\n  }\n}\n```\n\n### `@computed`: 计算值\n\n> 黄金法则: 如果你想创建一个基于当前状态的值时，请使用 `computed`。\n\n计算值(computed values)是可以根据现有的状态或其它计算值衍生出的值。 概念上来说，它们与 excel 表格中的公式十分相似。 不要低估计算值，因为它们有助于使实际可修改的状态尽可能的小。 此外计算值还是高度优化过的，所以尽可能的多使用它们。\n\n不要把 `computed` 和 `autorun` 搞混。它们都是响应式调用的表达式，但是，如果你想响应式的产生一个可以被其它 `observer` 使用的值，请使用 `@computed`，如果你不想产生一个新值，而想要达到一个效果，请使用 `autorun`。 举例来说，效果是像打印日志、发起网络请求等这样命令式的副作用。\n\n### `@action`: 修改可观察状态\n\n只有在严格模式(默认是不启用)下使用 MobX 时才需要 `action` 包装。 建议使用 `action`，因为它将帮助你更好地组织应用，并表达出一个函数修改状态的意图。 同时,\n\n```js\nclass Ticker {\n  @observable tick = 0\n\n  @action increment = () => {\n    this.tick++\n  }\n}\n\nconst ticker = new Ticker()\nsetInterval(ticker.increment, 1000)\n```\n\n### `runInAction`: 异步 Action\n\n`runInAction` 是个简单的工具函数，它接收代码块并在(异步的)动作中执行。这对于即时创建和执行动作非常有用，例如在异步过程中。`runInAction(f)` 是 `action(f)()` 的语法糖。\n\n```js\nclass Store {\n  @observable data = []\n\n  asyncAction = async () => {\n    const getData = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve({ data: [] })\n      }, 2000)\n    })\n    const { data } = await getData()\n    runInAction(() => {\n      this.data = data\n    })\n  }\n}\n```\n\n## 最佳实践\n\n- 不要传递基础类型值给子组件，使用对象包裹或将整个 store 传给子组件\n- 在所有渲染 `@observable` 的组件上使用 `@observer`\n- 不要拷贝可观察属性并存储在本地\n- Render 回调函数不是 render 方法的一部分\n- 间接引用值尽可能晚的使用\n- 使用大量的小组件\n- 在专用组件中渲染列表项\n",
        "slug": "use-mobx-with-react-native",
        "published": 1,
        "updated": "2020-01-30T07:30:37.604Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ck68yj5ux000d9zey5m4p84r1",
        "content": "<p>Mobx 是简单、可扩展的状态管理，React 和 MobX 是一对强力组合。React 通过提供机制把应用状态转换为可渲染组件树并对其进行渲染。而 MobX 提供机制来存储和更新应用状态供 React 使用。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/8/6/16c66572c68cbabc?imageslim\" alt=\"\"></p>\n<a id=\"more\"></a>\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add mobx</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># React 绑定库</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add mobx-react</span></pre></td></tr></table></figure>\n\n<h2 id=\"启用装饰器语法\"><a href=\"#启用装饰器语法\" class=\"headerlink\" title=\"启用装饰器语法\"></a>启用装饰器语法</h2><h3 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h3><p>在 <code>tsconfig.json</code> 中启用编译器选项 <code>&quot;experimentalDecorators&quot;: true</code> 。</p>\n<h3 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h3><p>在 Babel 中配置 MobX 的方式是使用 mobx preset，这种方式更方便，其中包含了装饰器及其他几个经常与 mobx 一起使用的插件:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add babel-preset-mobx -D</span></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  presets: [<span class=\"string\">'module:metro-react-native-babel-preset'</span>, <span class=\"string\">'mobx'</span>],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<h2 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h2><h3 id=\"observable-可观察的状态\"><a href=\"#observable-可观察的状态\" class=\"headerlink\" title=\"@observable: 可观察的状态\"></a><code>@observable</code>: 可观察的状态</h3><p>装饰器可以在 ES7 或者 TypeScript 类属性中属性使用，将其转换成可观察的。 <code>@observable</code> 可以在实例字段和属性 <code>getter</code> 上使用。 对于对象的哪部分需要成为可观察的，<code>@observable</code> 提供了细粒度的控制。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; observable, computed &#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderLine</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  @observable price = <span class=\"number\">0</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  @observable amount = <span class=\"number\">1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  @computed <span class=\"keyword\">get</span> total() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.price * <span class=\"keyword\">this</span>.amount</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<h3 id=\"computed-计算值\"><a href=\"#computed-计算值\" class=\"headerlink\" title=\"@computed: 计算值\"></a><code>@computed</code>: 计算值</h3><blockquote>\n<p>黄金法则: 如果你想创建一个基于当前状态的值时，请使用 <code>computed</code>。</p>\n</blockquote>\n<p>计算值(computed values)是可以根据现有的状态或其它计算值衍生出的值。 概念上来说，它们与 excel 表格中的公式十分相似。 不要低估计算值，因为它们有助于使实际可修改的状态尽可能的小。 此外计算值还是高度优化过的，所以尽可能的多使用它们。</p>\n<p>不要把 <code>computed</code> 和 <code>autorun</code> 搞混。它们都是响应式调用的表达式，但是，如果你想响应式的产生一个可以被其它 <code>observer</code> 使用的值，请使用 <code>@computed</code>，如果你不想产生一个新值，而想要达到一个效果，请使用 <code>autorun</code>。 举例来说，效果是像打印日志、发起网络请求等这样命令式的副作用。</p>\n<h3 id=\"action-修改可观察状态\"><a href=\"#action-修改可观察状态\" class=\"headerlink\" title=\"@action: 修改可观察状态\"></a><code>@action</code>: 修改可观察状态</h3><p>只有在严格模式(默认是不启用)下使用 MobX 时才需要 <code>action</code> 包装。 建议使用 <code>action</code>，因为它将帮助你更好地组织应用，并表达出一个函数修改状态的意图。 同时,</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ticker</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  @observable tick = <span class=\"number\">0</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  @action increment = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">this</span>.tick++</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ticker = <span class=\"keyword\">new</span> Ticker()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">setInterval(ticker.increment, <span class=\"number\">1000</span>)</span></pre></td></tr></table></figure>\n\n<h3 id=\"runInAction-异步-Action\"><a href=\"#runInAction-异步-Action\" class=\"headerlink\" title=\"runInAction: 异步 Action\"></a><code>runInAction</code>: 异步 Action</h3><p><code>runInAction</code> 是个简单的工具函数，它接收代码块并在(异步的)动作中执行。这对于即时创建和执行动作非常有用，例如在异步过程中。<code>runInAction(f)</code> 是 <code>action(f)()</code> 的语法糖。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Store</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  @observable data = []</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  asyncAction = <span class=\"keyword\">async</span> () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> getData = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">        resolve(&#123; <span class=\"attr\">data</span>: [] &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;, <span class=\"number\">2000</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> &#123; data &#125; = <span class=\"keyword\">await</span> getData()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    runInAction(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">this</span>.data = data</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><ul>\n<li>不要传递基础类型值给子组件，使用对象包裹或将整个 store 传给子组件</li>\n<li>在所有渲染 <code>@observable</code> 的组件上使用 <code>@observer</code></li>\n<li>不要拷贝可观察属性并存储在本地</li>\n<li>Render 回调函数不是 render 方法的一部分</li>\n<li>间接引用值尽可能晚的使用</li>\n<li>使用大量的小组件</li>\n<li>在专用组件中渲染列表项</li>\n</ul>\n",
        "site": { "data": {} },
        "excerpt": "<p>Mobx 是简单、可扩展的状态管理，React 和 MobX 是一对强力组合。React 通过提供机制把应用状态转换为可渲染组件树并对其进行渲染。而 MobX 提供机制来存储和更新应用状态供 React 使用。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/8/6/16c66572c68cbabc?imageslim\" alt=\"\"></p>",
        "more": "<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add mobx</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># React 绑定库</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add mobx-react</span></pre></td></tr></table></figure>\n\n<h2 id=\"启用装饰器语法\"><a href=\"#启用装饰器语法\" class=\"headerlink\" title=\"启用装饰器语法\"></a>启用装饰器语法</h2><h3 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h3><p>在 <code>tsconfig.json</code> 中启用编译器选项 <code>&quot;experimentalDecorators&quot;: true</code> 。</p>\n<h3 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h3><p>在 Babel 中配置 MobX 的方式是使用 mobx preset，这种方式更方便，其中包含了装饰器及其他几个经常与 mobx 一起使用的插件:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add babel-preset-mobx -D</span></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  presets: [<span class=\"string\">'module:metro-react-native-babel-preset'</span>, <span class=\"string\">'mobx'</span>],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<h2 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h2><h3 id=\"observable-可观察的状态\"><a href=\"#observable-可观察的状态\" class=\"headerlink\" title=\"@observable: 可观察的状态\"></a><code>@observable</code>: 可观察的状态</h3><p>装饰器可以在 ES7 或者 TypeScript 类属性中属性使用，将其转换成可观察的。 <code>@observable</code> 可以在实例字段和属性 <code>getter</code> 上使用。 对于对象的哪部分需要成为可观察的，<code>@observable</code> 提供了细粒度的控制。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; observable, computed &#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderLine</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  @observable price = <span class=\"number\">0</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  @observable amount = <span class=\"number\">1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  @computed <span class=\"keyword\">get</span> total() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.price * <span class=\"keyword\">this</span>.amount</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<h3 id=\"computed-计算值\"><a href=\"#computed-计算值\" class=\"headerlink\" title=\"@computed: 计算值\"></a><code>@computed</code>: 计算值</h3><blockquote>\n<p>黄金法则: 如果你想创建一个基于当前状态的值时，请使用 <code>computed</code>。</p>\n</blockquote>\n<p>计算值(computed values)是可以根据现有的状态或其它计算值衍生出的值。 概念上来说，它们与 excel 表格中的公式十分相似。 不要低估计算值，因为它们有助于使实际可修改的状态尽可能的小。 此外计算值还是高度优化过的，所以尽可能的多使用它们。</p>\n<p>不要把 <code>computed</code> 和 <code>autorun</code> 搞混。它们都是响应式调用的表达式，但是，如果你想响应式的产生一个可以被其它 <code>observer</code> 使用的值，请使用 <code>@computed</code>，如果你不想产生一个新值，而想要达到一个效果，请使用 <code>autorun</code>。 举例来说，效果是像打印日志、发起网络请求等这样命令式的副作用。</p>\n<h3 id=\"action-修改可观察状态\"><a href=\"#action-修改可观察状态\" class=\"headerlink\" title=\"@action: 修改可观察状态\"></a><code>@action</code>: 修改可观察状态</h3><p>只有在严格模式(默认是不启用)下使用 MobX 时才需要 <code>action</code> 包装。 建议使用 <code>action</code>，因为它将帮助你更好地组织应用，并表达出一个函数修改状态的意图。 同时,</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ticker</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  @observable tick = <span class=\"number\">0</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  @action increment = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">this</span>.tick++</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ticker = <span class=\"keyword\">new</span> Ticker()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">setInterval(ticker.increment, <span class=\"number\">1000</span>)</span></pre></td></tr></table></figure>\n\n<h3 id=\"runInAction-异步-Action\"><a href=\"#runInAction-异步-Action\" class=\"headerlink\" title=\"runInAction: 异步 Action\"></a><code>runInAction</code>: 异步 Action</h3><p><code>runInAction</code> 是个简单的工具函数，它接收代码块并在(异步的)动作中执行。这对于即时创建和执行动作非常有用，例如在异步过程中。<code>runInAction(f)</code> 是 <code>action(f)()</code> 的语法糖。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Store</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  @observable data = []</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  asyncAction = <span class=\"keyword\">async</span> () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> getData = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">        resolve(&#123; <span class=\"attr\">data</span>: [] &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;, <span class=\"number\">2000</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> &#123; data &#125; = <span class=\"keyword\">await</span> getData()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    runInAction(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">this</span>.data = data</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><ul>\n<li>不要传递基础类型值给子组件，使用对象包裹或将整个 store 传给子组件</li>\n<li>在所有渲染 <code>@observable</code> 的组件上使用 <code>@observer</code></li>\n<li>不要拷贝可观察属性并存储在本地</li>\n<li>Render 回调函数不是 render 方法的一部分</li>\n<li>间接引用值尽可能晚的使用</li>\n<li>使用大量的小组件</li>\n<li>在专用组件中渲染列表项</li>\n</ul>"
      },
      {
        "title": "React Navigation 5 完全指南",
        "date": "2020-01-17T02:29:14.000Z",
        "_content": "\n## 适用范围\n\n- react-native 0.60+\n- react-navigation 5+\n\n## A navigator can only contain 'Screen' components as its direct children（found 'BottomTabNavigator'）\n\n> 一个导航器只能包含页面组件作为它的直接子节点，但是发现了 'BottomTabNavigator'\n",
        "source": "_posts/react-navigation-5-full-guide.md",
        "raw": "---\ntitle: React Navigation 5 完全指南\ndate: 2020-01-17 10:29:14\ncategories:\n  - [CrossPlatform, ReactNative]\n---\n\n## 适用范围\n\n- react-native 0.60+\n- react-navigation 5+\n\n## A navigator can only contain 'Screen' components as its direct children（found 'BottomTabNavigator'）\n\n> 一个导航器只能包含页面组件作为它的直接子节点，但是发现了 'BottomTabNavigator'\n",
        "slug": "react-navigation-5-full-guide",
        "published": 1,
        "updated": "2020-01-29T12:25:34.182Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ck68yj5v0000g9zey350g56ke",
        "content": "<h2 id=\"适用范围\"><a href=\"#适用范围\" class=\"headerlink\" title=\"适用范围\"></a>适用范围</h2><ul>\n<li>react-native 0.60+</li>\n<li>react-navigation 5+</li>\n</ul>\n<h2 id=\"A-navigator-can-only-contain-‘Screen’-components-as-its-direct-children（found-‘BottomTabNavigator’）\"><a href=\"#A-navigator-can-only-contain-‘Screen’-components-as-its-direct-children（found-‘BottomTabNavigator’）\" class=\"headerlink\" title=\"A navigator can only contain ‘Screen’ components as its direct children（found ‘BottomTabNavigator’）\"></a>A navigator can only contain ‘Screen’ components as its direct children（found ‘BottomTabNavigator’）</h2><blockquote>\n<p>一个导航器只能包含页面组件作为它的直接子节点，但是发现了 ‘BottomTabNavigator’</p>\n</blockquote>\n",
        "site": { "data": {} },
        "excerpt": "",
        "more": "<h2 id=\"适用范围\"><a href=\"#适用范围\" class=\"headerlink\" title=\"适用范围\"></a>适用范围</h2><ul>\n<li>react-native 0.60+</li>\n<li>react-navigation 5+</li>\n</ul>\n<h2 id=\"A-navigator-can-only-contain-‘Screen’-components-as-its-direct-children（found-‘BottomTabNavigator’）\"><a href=\"#A-navigator-can-only-contain-‘Screen’-components-as-its-direct-children（found-‘BottomTabNavigator’）\" class=\"headerlink\" title=\"A navigator can only contain ‘Screen’ components as its direct children（found ‘BottomTabNavigator’）\"></a>A navigator can only contain ‘Screen’ components as its direct children（found ‘BottomTabNavigator’）</h2><blockquote>\n<p>一个导航器只能包含页面组件作为它的直接子节点，但是发现了 ‘BottomTabNavigator’</p>\n</blockquote>\n"
      },
      {
        "title": "React Navigation 4 完全指南",
        "date": "2020-01-10T02:29:14.000Z",
        "_content": "\n## 适用范围\n\n- react-native 0.60+\n- react-navigation 4+\n\n## 优势\n\n- 易于使用：用内置的导航器快速开始项目, 提供开箱即用的无缝体验。\n- 兼容 ios 和 android：平台拥有独特的外观、流程的动画和手势。\n- 完全可定制：如果你知道如何使用 JavaScript 编写应用程序，那么你就可以自定义 React Navigation 的任何部分。\n- 平台可扩展：React Navigation 在每一层都是可扩展的-你可以编写自己的 navigators，甚至替换面向用户的 API。\n\n<!--more-->\n\n## 安装\n\n```sh\n$ yarn add react-navigation\n$ yarn add react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context\n```\n\n## 链接\n\n```sh\n$ cd ios && pod install && cd ..\n```\n\n为了完成 react-native-screens 在 Android 上的安装, 请在`android/app/build.gradle`中 dependencies 选项中添加下面这两行:\n\n```groovy\nimplementation 'androidx.appcompat:appcompat:1.1.0-rc01'\nimplementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0-alpha02'\n```\n\n## createAppContainer\n\ncreateAppContainer 是一个函数，该函数返回一个 React 组件 并将 createStackNavigator 创建的 React 组件 作为参数，并且可以直接从 App.js 导出,用作我们应用程序的根组件。\n\n### onNavigationStateChange(prevState, newState, action)\n\n每当导航器管理的 navigation state 发生变化时，都会调用该函数。 它接收之前的 state、navigation 的新 state 以及发布状态更改的 action。 默认情况下，它将 state 的更改打印到控制台。我们可以利用该 props 进行页面跟踪并将其发送到 APM 系统。\n\n```tsx\n<AppContainer onNavigationStateChange={onNavigationStateChange} />\n```\n\n```ts\nimport { NavigationState, NavigationLeafRoute, NavigationParams, NavigationRoute } from 'react-navigation'\n\n/**\n *  从 navigation state 中获取当前页面名\n * @param navigationState NavigationState\n */\nconst getCurrentRoute = (\n  navigationState: NavigationState | NavigationLeafRoute<NavigationParams>,\n): NavigationRoute<NavigationParams> | null => {\n  if (!navigationState) {\n    return null\n  }\n  const route = navigationState.routes[navigationState.index]\n  // 在嵌套的导航中快速翻找\n  if (route.routes) {\n    return getCurrentRoute(route)\n  }\n  return route\n}\n\nconst onNavigationStateChange = (prevState, currentState) => {\n  const prevScreen = getCurrentRoute(prevState)\n  const currentScreen = getCurrentRoute(currentState)\n  if (currentScreen && prevScreen !== currentScreen) {\n    console.log(currentScreen)\n  }\n}\n\nexport default onNavigationStateChange\n```\n\n## 标题栏 Header\n\n### 隐藏 Header\n\n```ts\n// stack级别\ncreateStackNavigator(routeConfigMap, {\n  headerMode: 'none', // <---\n})\n// screen级别\ncreateStackNavigator(\n  {\n    DemoScreen: {\n      screen: DemoScreen,\n      navigationOptions: {\n        headerShown: null, // <---\n      },\n    },\n  },\n  NavigationRouteConfigMap,\n)\n```\n\n### 隐藏 Header background\n\n> 这个场景是 UI 的背景图是渐变的情况下没办法指定 StatusBar 的背景色\n\n```tsx\nstatic navigationOptions = ({ navigation }) => ({\n  headerTransparent: true // <---\n})\n```\n\n### 获取 Header Height\n\n```js\nimport { useHeaderHeight, Header } from 'react-navigation-stack'\n\nconst headerHeight = useHeaderHeight()\nconsole.log(Header.HEIGHT)\n```\n\n### 去掉标题栏下的阴影\n\n```js\nstatic navigationOptions = ({ navigation }) => ({\n  headerStyle: {\n    // 隐藏导航栏下的阴影效果\n    elevation: 0, // android\n    shadowOpacity: 0, // ios\n  },\n})\n```\n\n### 改变标题栏标题颜色\n\n```js\nstatic navigationOptions = ({ navigation }) => ({\n  headerTintColor: '#ffffff', // 返回按钮和标题都使用这个属性作为它们的颜色\n  headerStyle: {\n    color: '#000000' // 优先级高\n  },\n})\n```\n\n## Navigation options 解析\n\n### 选项卡导航器包含一个堆栈，在选项卡导航器设置 tabBarLabel\n\n```jsx\nclass A extends React.Component {\n  // etc..\n}\n\nclass B extends React.Component {\n  // etc..\n}\n\nconst HomeStack = createStackNavigator(\n  { A },\n  {\n    navigationOptions: {\n      tabBarLabel: '首页',\n    },\n  },\n)\n\nconst SettingsStack = createStackNavigator(\n  { B },\n  {\n    navigationOptions: {\n      tabBarLabel: '设置',\n    },\n  },\n)\n\nexport default createAppContainer(\n  createBottomTabNavigator({\n    HomeStack,\n    SettingsStack,\n  }),\n)\n```\n\n### 堆栈包含一个选项卡导航器，在堆栈标题栏上设置 headerTitle\n\n每个 tab 都有自己的 stack， 当 tab 页面处于顶层时，你可以隐藏 stack 的 header。\n\n```js\nconst FeedStack = createStackNavigator({\n  FeedHome: FeedScreen,\n  /* other routes here */\n})\n\nconst ProfileStack = createStackNavigator({\n  ProfileHome: ProfileScreen,\n  /* other routes here */\n})\n\nconst TabNavigator = createBottomTabNavigator(\n  {\n    Feed: FeedStack,\n    Profile: ProfileStack,\n  },\n  {\n    navigationOptions: {\n      // Hide the header from AppNavigator stack\n      headerShown: false,\n    },\n  },\n)\n\nconst AppNavigator = createStackNavigator({\n  Home: TabNavigator,\n  Settings: SettingsScreen,\n})\n```\n\n### 选项卡导航器包含堆栈，你希望隐藏特定页面上的 tabbar\n\n添加另一个 Stack Navigator 作为 Tab Navigator 的父级, 并将 Detail 页面放在里面。\n\n```js\nconst FeedStack = createStackNavigator({\n  FeedHome: FeedScreen,\n  /* any other route you want to render under the tab bar */\n})\n\nconst TabNavigator = createBottomTabNavigator({\n  Feed: FeedStack,\n  Profile: ProfileScreen,\n})\n\nconst AppNavigator = createStackNavigator({\n  Tabs: TabNavigator,\n  Details: DetailsScreen,\n  /* any other route you want to render above the tab bar */\n})\n\nconst AppNavigator = createSwitchNavigator(AppNavigator)\n```\n\n## 自定义 Android 物理返回键行为\n\n```jsx\nimport React from 'react'\nimport { Text, View, Alert } from 'react-native'\nimport { AndroidBackHandler } from 'react-navigation-backhandler'\n\nexport default class DetailsScreen extends React.Component<Props> {\n  onBackButtonPressAndroid = () => {\n    if (!this.props.navigation.isFocused()) {\n      // 确保当页面聚焦时才执行后边的代码\n      return false\n    }\n    Alert.alert('自定义安卓物理返回键行为')\n    return true\n  }\n\n  render() {\n    return (\n      <AndroidBackHandler onBackPress={this.onBackButtonPressAndroid}>\n        <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: '#ecf0f1' }}>\n          <Text style={{ fontSize: 40 }}>Detail Screen</Text>\n        </View>\n      </AndroidBackHandler>\n    )\n  }\n}\n```\n\n## 在任意组件访问 navigation props\n\n```tsx\nimport React from 'react'\nimport { Button } from 'react-native'\nimport { withNavigation } from 'react-navigation'\nimport { NavigationStackProp } from 'react-navigation-stack'\n\ninterface Props {\n  navigation: NavigationStackProp\n}\n\nclass MyBackButton extends React.Component<Props> {\n  render() {\n    return (\n      <Button\n        title=\"Back\"\n        onPress={() => {\n          this.props.navigation.goBack()\n        }}\n      />\n    )\n  }\n}\n\nexport default withNavigation(MyBackButton)\n```\n\n## 在没有 navigation props 的情况下执行路由跳转\n\n### AppContainer\n\n```tsx\nimport { setTopLevelNavigator } from 'path/to/NavigationService'\n...\n<AppContainer\n  ref={navigatorRef => {\n    if (navigatorRef) {\n      setTopLevelNavigator(navigatorRef)\n    }\n  }}\n/>\n```\n\n### NavigationService\n\n```ts\nimport {\n  NavigationState,\n  NavigationLeafRoute,\n  NavigationParams,\n  NavigationRoute,\n  NavigationActions,\n  StackActions,\n} from 'react-navigation'\n\nlet navigator\n\nexport const setTopLevelNavigator = navigatorRef => {\n  navigator = navigatorRef\n}\n\n/**\n *  从 navigation state 中获取当前页面名\n * @param navigationState NavigationState\n */\nexport const getCurrentRoute = (\n  navigationState: NavigationState | NavigationLeafRoute<NavigationParams>,\n): NavigationRoute<NavigationParams> | null => {\n  if (!navigationState) {\n    return null\n  }\n  const route = navigationState.routes[navigationState.index]\n  // 在嵌套的导航中快速翻找\n  if (route.routes) {\n    return getCurrentRoute(route)\n  }\n  return route\n}\n\n/**\n * 在没有 navigation 这个 prop 的情况下进行页面跳转\n * @param routeName 路由名\n * @param params 路由参数\n */\nexport const navigate = (routeName: string, params?: object) => {\n  navigator.dispatch(\n    NavigationActions.navigate({\n      routeName,\n      params,\n    }),\n  )\n}\n\n/**\n * 在没有 navigation 这个 prop 的情况下进行页面goBack操作\n */\nexport const goBack = () => {\n  navigator.dispatch(NavigationActions.back())\n}\n\n/**\n * 在没有 navigation 这个 prop 的情况下进行页面reset操作\n * @param routeName 路由名\n * @param params 路由参数\n */\nexport const reset = (routeName: string, params?: object) => {\n  const resetAction = StackActions.reset({\n    index: 0,\n    actions: [NavigationActions.navigate({ routeName, params })],\n  })\n  navigator.dispatch(resetAction)\n}\n\n/**\n * 在没有 navigation 这个 prop 的情况下进行页面 replace 操作\n * @param number 返回的层数\n */\nexport const replace = (routeName: string, params?: object) => {\n  navigator.dispatch(StackActions.replace({ routeName, params }))\n}\n\n/**\n * 在没有 navigation 这个 prop 的情况下进行页面 push 操作\n * @param number 返回的层数\n */\nexport const push = (routeName: string, params?: object) => {\n  navigator.dispatch(StackActions.push({ routeName, params }))\n}\n\n/**\n * 在没有 navigation 这个 prop 的情况下进行页面 pop 操作\n * @param number 返回的层数\n */\nexport const pop = (n: number) => {\n  navigator.dispatch(StackActions.pop({ n }))\n}\n\n/**\n * 在没有 navigation 这个 prop 的情况下进行页面 pop 操作\n */\nexport const popToTop = () => {\n  navigator.dispatch(StackActions.popToTop())\n}\n\nexport default {\n  setTopLevelNavigator,\n  getCurrentRoute,\n  navigate,\n  goBack,\n  reset,\n}\n```\n",
        "source": "_posts/react-navigation-4-full-guide.md",
        "raw": "---\ntitle: React Navigation 4 完全指南\ndate: 2020-01-10 10:29:14\ncategories:\n  - [CrossPlatform, ReactNative]\n---\n\n## 适用范围\n\n- react-native 0.60+\n- react-navigation 4+\n\n## 优势\n\n- 易于使用：用内置的导航器快速开始项目, 提供开箱即用的无缝体验。\n- 兼容 ios 和 android：平台拥有独特的外观、流程的动画和手势。\n- 完全可定制：如果你知道如何使用 JavaScript 编写应用程序，那么你就可以自定义 React Navigation 的任何部分。\n- 平台可扩展：React Navigation 在每一层都是可扩展的-你可以编写自己的 navigators，甚至替换面向用户的 API。\n\n<!--more-->\n\n## 安装\n\n```sh\n$ yarn add react-navigation\n$ yarn add react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context\n```\n\n## 链接\n\n```sh\n$ cd ios && pod install && cd ..\n```\n\n为了完成 react-native-screens 在 Android 上的安装, 请在`android/app/build.gradle`中 dependencies 选项中添加下面这两行:\n\n```groovy\nimplementation 'androidx.appcompat:appcompat:1.1.0-rc01'\nimplementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0-alpha02'\n```\n\n## createAppContainer\n\ncreateAppContainer 是一个函数，该函数返回一个 React 组件 并将 createStackNavigator 创建的 React 组件 作为参数，并且可以直接从 App.js 导出,用作我们应用程序的根组件。\n\n### onNavigationStateChange(prevState, newState, action)\n\n每当导航器管理的 navigation state 发生变化时，都会调用该函数。 它接收之前的 state、navigation 的新 state 以及发布状态更改的 action。 默认情况下，它将 state 的更改打印到控制台。我们可以利用该 props 进行页面跟踪并将其发送到 APM 系统。\n\n```tsx\n<AppContainer onNavigationStateChange={onNavigationStateChange} />\n```\n\n```ts\nimport { NavigationState, NavigationLeafRoute, NavigationParams, NavigationRoute } from 'react-navigation'\n\n/**\n *  从 navigation state 中获取当前页面名\n * @param navigationState NavigationState\n */\nconst getCurrentRoute = (\n  navigationState: NavigationState | NavigationLeafRoute<NavigationParams>,\n): NavigationRoute<NavigationParams> | null => {\n  if (!navigationState) {\n    return null\n  }\n  const route = navigationState.routes[navigationState.index]\n  // 在嵌套的导航中快速翻找\n  if (route.routes) {\n    return getCurrentRoute(route)\n  }\n  return route\n}\n\nconst onNavigationStateChange = (prevState, currentState) => {\n  const prevScreen = getCurrentRoute(prevState)\n  const currentScreen = getCurrentRoute(currentState)\n  if (currentScreen && prevScreen !== currentScreen) {\n    console.log(currentScreen)\n  }\n}\n\nexport default onNavigationStateChange\n```\n\n## 标题栏 Header\n\n### 隐藏 Header\n\n```ts\n// stack级别\ncreateStackNavigator(routeConfigMap, {\n  headerMode: 'none', // <---\n})\n// screen级别\ncreateStackNavigator(\n  {\n    DemoScreen: {\n      screen: DemoScreen,\n      navigationOptions: {\n        headerShown: null, // <---\n      },\n    },\n  },\n  NavigationRouteConfigMap,\n)\n```\n\n### 隐藏 Header background\n\n> 这个场景是 UI 的背景图是渐变的情况下没办法指定 StatusBar 的背景色\n\n```tsx\nstatic navigationOptions = ({ navigation }) => ({\n  headerTransparent: true // <---\n})\n```\n\n### 获取 Header Height\n\n```js\nimport { useHeaderHeight, Header } from 'react-navigation-stack'\n\nconst headerHeight = useHeaderHeight()\nconsole.log(Header.HEIGHT)\n```\n\n### 去掉标题栏下的阴影\n\n```js\nstatic navigationOptions = ({ navigation }) => ({\n  headerStyle: {\n    // 隐藏导航栏下的阴影效果\n    elevation: 0, // android\n    shadowOpacity: 0, // ios\n  },\n})\n```\n\n### 改变标题栏标题颜色\n\n```js\nstatic navigationOptions = ({ navigation }) => ({\n  headerTintColor: '#ffffff', // 返回按钮和标题都使用这个属性作为它们的颜色\n  headerStyle: {\n    color: '#000000' // 优先级高\n  },\n})\n```\n\n## Navigation options 解析\n\n### 选项卡导航器包含一个堆栈，在选项卡导航器设置 tabBarLabel\n\n```jsx\nclass A extends React.Component {\n  // etc..\n}\n\nclass B extends React.Component {\n  // etc..\n}\n\nconst HomeStack = createStackNavigator(\n  { A },\n  {\n    navigationOptions: {\n      tabBarLabel: '首页',\n    },\n  },\n)\n\nconst SettingsStack = createStackNavigator(\n  { B },\n  {\n    navigationOptions: {\n      tabBarLabel: '设置',\n    },\n  },\n)\n\nexport default createAppContainer(\n  createBottomTabNavigator({\n    HomeStack,\n    SettingsStack,\n  }),\n)\n```\n\n### 堆栈包含一个选项卡导航器，在堆栈标题栏上设置 headerTitle\n\n每个 tab 都有自己的 stack， 当 tab 页面处于顶层时，你可以隐藏 stack 的 header。\n\n```js\nconst FeedStack = createStackNavigator({\n  FeedHome: FeedScreen,\n  /* other routes here */\n})\n\nconst ProfileStack = createStackNavigator({\n  ProfileHome: ProfileScreen,\n  /* other routes here */\n})\n\nconst TabNavigator = createBottomTabNavigator(\n  {\n    Feed: FeedStack,\n    Profile: ProfileStack,\n  },\n  {\n    navigationOptions: {\n      // Hide the header from AppNavigator stack\n      headerShown: false,\n    },\n  },\n)\n\nconst AppNavigator = createStackNavigator({\n  Home: TabNavigator,\n  Settings: SettingsScreen,\n})\n```\n\n### 选项卡导航器包含堆栈，你希望隐藏特定页面上的 tabbar\n\n添加另一个 Stack Navigator 作为 Tab Navigator 的父级, 并将 Detail 页面放在里面。\n\n```js\nconst FeedStack = createStackNavigator({\n  FeedHome: FeedScreen,\n  /* any other route you want to render under the tab bar */\n})\n\nconst TabNavigator = createBottomTabNavigator({\n  Feed: FeedStack,\n  Profile: ProfileScreen,\n})\n\nconst AppNavigator = createStackNavigator({\n  Tabs: TabNavigator,\n  Details: DetailsScreen,\n  /* any other route you want to render above the tab bar */\n})\n\nconst AppNavigator = createSwitchNavigator(AppNavigator)\n```\n\n## 自定义 Android 物理返回键行为\n\n```jsx\nimport React from 'react'\nimport { Text, View, Alert } from 'react-native'\nimport { AndroidBackHandler } from 'react-navigation-backhandler'\n\nexport default class DetailsScreen extends React.Component<Props> {\n  onBackButtonPressAndroid = () => {\n    if (!this.props.navigation.isFocused()) {\n      // 确保当页面聚焦时才执行后边的代码\n      return false\n    }\n    Alert.alert('自定义安卓物理返回键行为')\n    return true\n  }\n\n  render() {\n    return (\n      <AndroidBackHandler onBackPress={this.onBackButtonPressAndroid}>\n        <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: '#ecf0f1' }}>\n          <Text style={{ fontSize: 40 }}>Detail Screen</Text>\n        </View>\n      </AndroidBackHandler>\n    )\n  }\n}\n```\n\n## 在任意组件访问 navigation props\n\n```tsx\nimport React from 'react'\nimport { Button } from 'react-native'\nimport { withNavigation } from 'react-navigation'\nimport { NavigationStackProp } from 'react-navigation-stack'\n\ninterface Props {\n  navigation: NavigationStackProp\n}\n\nclass MyBackButton extends React.Component<Props> {\n  render() {\n    return (\n      <Button\n        title=\"Back\"\n        onPress={() => {\n          this.props.navigation.goBack()\n        }}\n      />\n    )\n  }\n}\n\nexport default withNavigation(MyBackButton)\n```\n\n## 在没有 navigation props 的情况下执行路由跳转\n\n### AppContainer\n\n```tsx\nimport { setTopLevelNavigator } from 'path/to/NavigationService'\n...\n<AppContainer\n  ref={navigatorRef => {\n    if (navigatorRef) {\n      setTopLevelNavigator(navigatorRef)\n    }\n  }}\n/>\n```\n\n### NavigationService\n\n```ts\nimport {\n  NavigationState,\n  NavigationLeafRoute,\n  NavigationParams,\n  NavigationRoute,\n  NavigationActions,\n  StackActions,\n} from 'react-navigation'\n\nlet navigator\n\nexport const setTopLevelNavigator = navigatorRef => {\n  navigator = navigatorRef\n}\n\n/**\n *  从 navigation state 中获取当前页面名\n * @param navigationState NavigationState\n */\nexport const getCurrentRoute = (\n  navigationState: NavigationState | NavigationLeafRoute<NavigationParams>,\n): NavigationRoute<NavigationParams> | null => {\n  if (!navigationState) {\n    return null\n  }\n  const route = navigationState.routes[navigationState.index]\n  // 在嵌套的导航中快速翻找\n  if (route.routes) {\n    return getCurrentRoute(route)\n  }\n  return route\n}\n\n/**\n * 在没有 navigation 这个 prop 的情况下进行页面跳转\n * @param routeName 路由名\n * @param params 路由参数\n */\nexport const navigate = (routeName: string, params?: object) => {\n  navigator.dispatch(\n    NavigationActions.navigate({\n      routeName,\n      params,\n    }),\n  )\n}\n\n/**\n * 在没有 navigation 这个 prop 的情况下进行页面goBack操作\n */\nexport const goBack = () => {\n  navigator.dispatch(NavigationActions.back())\n}\n\n/**\n * 在没有 navigation 这个 prop 的情况下进行页面reset操作\n * @param routeName 路由名\n * @param params 路由参数\n */\nexport const reset = (routeName: string, params?: object) => {\n  const resetAction = StackActions.reset({\n    index: 0,\n    actions: [NavigationActions.navigate({ routeName, params })],\n  })\n  navigator.dispatch(resetAction)\n}\n\n/**\n * 在没有 navigation 这个 prop 的情况下进行页面 replace 操作\n * @param number 返回的层数\n */\nexport const replace = (routeName: string, params?: object) => {\n  navigator.dispatch(StackActions.replace({ routeName, params }))\n}\n\n/**\n * 在没有 navigation 这个 prop 的情况下进行页面 push 操作\n * @param number 返回的层数\n */\nexport const push = (routeName: string, params?: object) => {\n  navigator.dispatch(StackActions.push({ routeName, params }))\n}\n\n/**\n * 在没有 navigation 这个 prop 的情况下进行页面 pop 操作\n * @param number 返回的层数\n */\nexport const pop = (n: number) => {\n  navigator.dispatch(StackActions.pop({ n }))\n}\n\n/**\n * 在没有 navigation 这个 prop 的情况下进行页面 pop 操作\n */\nexport const popToTop = () => {\n  navigator.dispatch(StackActions.popToTop())\n}\n\nexport default {\n  setTopLevelNavigator,\n  getCurrentRoute,\n  navigate,\n  goBack,\n  reset,\n}\n```\n",
        "slug": "react-navigation-4-full-guide",
        "published": 1,
        "updated": "2020-01-29T12:25:30.092Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ck68yj5wu000x9zeyh99n6kmx",
        "content": "<h2 id=\"适用范围\"><a href=\"#适用范围\" class=\"headerlink\" title=\"适用范围\"></a>适用范围</h2><ul>\n<li>react-native 0.60+</li>\n<li>react-navigation 4+</li>\n</ul>\n<h2 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h2><ul>\n<li>易于使用：用内置的导航器快速开始项目, 提供开箱即用的无缝体验。</li>\n<li>兼容 ios 和 android：平台拥有独特的外观、流程的动画和手势。</li>\n<li>完全可定制：如果你知道如何使用 JavaScript 编写应用程序，那么你就可以自定义 React Navigation 的任何部分。</li>\n<li>平台可扩展：React Navigation 在每一层都是可扩展的-你可以编写自己的 navigators，甚至替换面向用户的 API。</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add react-navigation</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context</span></pre></td></tr></table></figure>\n\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ios &amp;&amp; pod install &amp;&amp; <span class=\"built_in\">cd</span> ..</span></pre></td></tr></table></figure>\n\n<p>为了完成 react-native-screens 在 Android 上的安装, 请在<code>android/app/build.gradle</code>中 dependencies 选项中添加下面这两行:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">implementation <span class=\"string\">'androidx.appcompat:appcompat:1.1.0-rc01'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">implementation <span class=\"string\">'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0-alpha02'</span></span></pre></td></tr></table></figure>\n\n<h2 id=\"createAppContainer\"><a href=\"#createAppContainer\" class=\"headerlink\" title=\"createAppContainer\"></a>createAppContainer</h2><p>createAppContainer 是一个函数，该函数返回一个 React 组件 并将 createStackNavigator 创建的 React 组件 作为参数，并且可以直接从 App.js 导出,用作我们应用程序的根组件。</p>\n<h3 id=\"onNavigationStateChange-prevState-newState-action\"><a href=\"#onNavigationStateChange-prevState-newState-action\" class=\"headerlink\" title=\"onNavigationStateChange(prevState, newState, action)\"></a>onNavigationStateChange(prevState, newState, action)</h3><p>每当导航器管理的 navigation state 发生变化时，都会调用该函数。 它接收之前的 state、navigation 的新 state 以及发布状态更改的 action。 默认情况下，它将 state 的更改打印到控制台。我们可以利用该 props 进行页面跟踪并将其发送到 APM 系统。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;AppContainer onNavigationStateChange&#x3D;&#123;onNavigationStateChange&#125; &#x2F;&gt;</span></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; NavigationState, NavigationLeafRoute, NavigationParams, NavigationRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-navigation'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> *  从 navigation state 中获取当前页面名</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * @param navigationState NavigationState</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getCurrentRoute = (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  navigationState: NavigationState | NavigationLeafRoute&lt;NavigationParams&gt;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">): NavigationRoute&lt;NavigationParams&gt; | <span class=\"function\"><span class=\"params\">null</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> (!navigationState) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> route = navigationState.routes[navigationState.index]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 在嵌套的导航中快速翻找</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> (route.routes) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> getCurrentRoute(route)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> route</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> onNavigationStateChange = <span class=\"function\">(<span class=\"params\">prevState, currentState</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> prevScreen = getCurrentRoute(prevState)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> currentScreen = getCurrentRoute(currentState)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> (currentScreen &amp;&amp; prevScreen !== currentScreen) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"built_in\">console</span>.log(currentScreen)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> onNavigationStateChange</span></pre></td></tr></table></figure>\n\n<h2 id=\"标题栏-Header\"><a href=\"#标题栏-Header\" class=\"headerlink\" title=\"标题栏 Header\"></a>标题栏 Header</h2><h3 id=\"隐藏-Header\"><a href=\"#隐藏-Header\" class=\"headerlink\" title=\"隐藏 Header\"></a>隐藏 Header</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// stack级别</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">createStackNavigator(routeConfigMap, &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  headerMode: <span class=\"string\">'none'</span>, <span class=\"comment\">// &lt;---</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// screen级别</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">createStackNavigator(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    DemoScreen: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      screen: DemoScreen,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">      navigationOptions: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">        headerShown: <span class=\"literal\">null</span>, <span class=\"comment\">// &lt;---</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  NavigationRouteConfigMap,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">)</span></pre></td></tr></table></figure>\n\n<h3 id=\"隐藏-Header-background\"><a href=\"#隐藏-Header-background\" class=\"headerlink\" title=\"隐藏 Header background\"></a>隐藏 Header background</h3><blockquote>\n<p>这个场景是 UI 的背景图是渐变的情况下没办法指定 StatusBar 的背景色</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">static navigationOptions &#x3D; (&#123; navigation &#125;) &#x3D;&gt; (&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  headerTransparent: true &#x2F;&#x2F; &lt;---</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<h3 id=\"获取-Header-Height\"><a href=\"#获取-Header-Height\" class=\"headerlink\" title=\"获取 Header Height\"></a>获取 Header Height</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useHeaderHeight, Header &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-navigation-stack'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> headerHeight = useHeaderHeight()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(Header.HEIGHT)</span></pre></td></tr></table></figure>\n\n<h3 id=\"去掉标题栏下的阴影\"><a href=\"#去掉标题栏下的阴影\" class=\"headerlink\" title=\"去掉标题栏下的阴影\"></a>去掉标题栏下的阴影</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> navigationOptions = <span class=\"function\">(<span class=\"params\">&#123; navigation &#125;</span>) =&gt;</span> (&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  headerStyle: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 隐藏导航栏下的阴影效果</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    elevation: <span class=\"number\">0</span>, <span class=\"comment\">// android</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    shadowOpacity: <span class=\"number\">0</span>, <span class=\"comment\">// ios</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<h3 id=\"改变标题栏标题颜色\"><a href=\"#改变标题栏标题颜色\" class=\"headerlink\" title=\"改变标题栏标题颜色\"></a>改变标题栏标题颜色</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> navigationOptions = <span class=\"function\">(<span class=\"params\">&#123; navigation &#125;</span>) =&gt;</span> (&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  headerTintColor: <span class=\"string\">'#ffffff'</span>, <span class=\"comment\">// 返回按钮和标题都使用这个属性作为它们的颜色</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  headerStyle: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    color: <span class=\"string\">'#000000'</span> <span class=\"comment\">// 优先级高</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<h2 id=\"Navigation-options-解析\"><a href=\"#Navigation-options-解析\" class=\"headerlink\" title=\"Navigation options 解析\"></a>Navigation options 解析</h2><h3 id=\"选项卡导航器包含一个堆栈，在选项卡导航器设置-tabBarLabel\"><a href=\"#选项卡导航器包含一个堆栈，在选项卡导航器设置-tabBarLabel\" class=\"headerlink\" title=\"选项卡导航器包含一个堆栈，在选项卡导航器设置 tabBarLabel\"></a>选项卡导航器包含一个堆栈，在选项卡导航器设置 tabBarLabel</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// etc..</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// etc..</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> HomeStack = createStackNavigator(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; A &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    navigationOptions: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      tabBarLabel: <span class=\"string\">'首页'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> SettingsStack = createStackNavigator(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; B &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    navigationOptions: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">      tabBarLabel: <span class=\"string\">'设置'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> createAppContainer(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">  createBottomTabNavigator(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">    HomeStack,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">    SettingsStack,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;),</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">)</span></pre></td></tr></table></figure>\n\n<h3 id=\"堆栈包含一个选项卡导航器，在堆栈标题栏上设置-headerTitle\"><a href=\"#堆栈包含一个选项卡导航器，在堆栈标题栏上设置-headerTitle\" class=\"headerlink\" title=\"堆栈包含一个选项卡导航器，在堆栈标题栏上设置 headerTitle\"></a>堆栈包含一个选项卡导航器，在堆栈标题栏上设置 headerTitle</h3><p>每个 tab 都有自己的 stack， 当 tab 页面处于顶层时，你可以隐藏 stack 的 header。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> FeedStack = createStackNavigator(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  FeedHome: FeedScreen,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">/* other routes here */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ProfileStack = createStackNavigator(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ProfileHome: ProfileScreen,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">/* other routes here */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> TabNavigator = createBottomTabNavigator(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    Feed: FeedStack,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    Profile: ProfileStack,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    navigationOptions: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"comment\">// Hide the header from AppNavigator stack</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">      headerShown: <span class=\"literal\">false</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> AppNavigator = createStackNavigator(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Home: TabNavigator,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Settings: SettingsScreen,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<h3 id=\"选项卡导航器包含堆栈，你希望隐藏特定页面上的-tabbar\"><a href=\"#选项卡导航器包含堆栈，你希望隐藏特定页面上的-tabbar\" class=\"headerlink\" title=\"选项卡导航器包含堆栈，你希望隐藏特定页面上的 tabbar\"></a>选项卡导航器包含堆栈，你希望隐藏特定页面上的 tabbar</h3><p>添加另一个 Stack Navigator 作为 Tab Navigator 的父级, 并将 Detail 页面放在里面。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> FeedStack = createStackNavigator(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  FeedHome: FeedScreen,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">/* any other route you want to render under the tab bar */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> TabNavigator = createBottomTabNavigator(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Feed: FeedStack,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Profile: ProfileScreen,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> AppNavigator = createStackNavigator(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Tabs: TabNavigator,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Details: DetailsScreen,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">/* any other route you want to render above the tab bar */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> AppNavigator = createSwitchNavigator(AppNavigator)</span></pre></td></tr></table></figure>\n\n<h2 id=\"自定义-Android-物理返回键行为\"><a href=\"#自定义-Android-物理返回键行为\" class=\"headerlink\" title=\"自定义 Android 物理返回键行为\"></a>自定义 Android 物理返回键行为</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Text, View, Alert &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; AndroidBackHandler &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-navigation-backhandler'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailsScreen</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>&gt; </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  onBackButtonPressAndroid = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.props.navigation.isFocused()) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"comment\">// 确保当页面聚焦时才执行后边的代码</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    Alert.alert(<span class=\"string\">'自定义安卓物理返回键行为'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  render() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;AndroidBackHandler onBackPress=&#123;<span class=\"keyword\">this</span>.onBackButtonPressAndroid&#125;&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &lt;View style=&#123;&#123; <span class=\"attr\">flex</span>: <span class=\"number\">1</span>, <span class=\"attr\">alignItems</span>: <span class=\"string\">'center'</span>, <span class=\"attr\">justifyContent</span>: <span class=\"string\">'center'</span>, <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#ecf0f1'</span> &#125;&#125;&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &lt;Text style=&#123;&#123; <span class=\"attr\">fontSize</span>: <span class=\"number\">40</span> &#125;&#125;&gt;Detail Screen&lt;<span class=\"regexp\">/Text&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">        &lt;/</span>View&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;<span class=\"regexp\">/AndroidBackHandler&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">    )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  &#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">&#125;</span></span></pre></td></tr></table></figure>\n\n<h2 id=\"在任意组件访问-navigation-props\"><a href=\"#在任意组件访问-navigation-props\" class=\"headerlink\" title=\"在任意组件访问 navigation props\"></a>在任意组件访问 navigation props</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; Button &#125; from &#39;react-native&#39;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; withNavigation &#125; from &#39;react-navigation&#39;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; NavigationStackProp &#125; from &#39;react-navigation-stack&#39;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">interface Props &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  navigation: NavigationStackProp</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">class MyBackButton extends React.Component&lt;Props&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  render() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    return (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;Button</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">        title&#x3D;&quot;Back&quot;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">        onPress&#x3D;&#123;() &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">          this.props.navigation.goBack()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#x2F;&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">export default withNavigation(MyBackButton)</span></pre></td></tr></table></figure>\n\n<h2 id=\"在没有-navigation-props-的情况下执行路由跳转\"><a href=\"#在没有-navigation-props-的情况下执行路由跳转\" class=\"headerlink\" title=\"在没有 navigation props 的情况下执行路由跳转\"></a>在没有 navigation props 的情况下执行路由跳转</h2><h3 id=\"AppContainer\"><a href=\"#AppContainer\" class=\"headerlink\" title=\"AppContainer\"></a>AppContainer</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; setTopLevelNavigator &#125; from &#39;path&#x2F;to&#x2F;NavigationService&#39;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;AppContainer</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ref&#x3D;&#123;navigatorRef &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    if (navigatorRef) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">      setTopLevelNavigator(navigatorRef)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&gt;</span></pre></td></tr></table></figure>\n\n<h3 id=\"NavigationService\"><a href=\"#NavigationService\" class=\"headerlink\" title=\"NavigationService\"></a>NavigationService</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  NavigationState,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  NavigationLeafRoute,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  NavigationParams,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  NavigationRoute,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  NavigationActions,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  StackActions,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-navigation'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> navigator</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> setTopLevelNavigator = <span class=\"function\"><span class=\"params\">navigatorRef</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  navigator = navigatorRef</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> *  从 navigation state 中获取当前页面名</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * @param navigationState NavigationState</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getCurrentRoute = (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">  navigationState: NavigationState | NavigationLeafRoute&lt;NavigationParams&gt;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">): NavigationRoute&lt;NavigationParams&gt; | <span class=\"function\"><span class=\"params\">null</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> (!navigationState) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> route = navigationState.routes[navigationState.index]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 在嵌套的导航中快速翻找</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> (route.routes) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> getCurrentRoute(route)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> route</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * 在没有 navigation 这个 prop 的情况下进行页面跳转</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * @param routeName 路由名</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * @param params 路由参数</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> navigate = <span class=\"function\">(<span class=\"params\">routeName: <span class=\"built_in\">string</span>, params?: object</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">  navigator.dispatch(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">    NavigationActions.navigate(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">      routeName,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">      params,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;),</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * 在没有 navigation 这个 prop 的情况下进行页面goBack操作</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> goBack = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">  navigator.dispatch(NavigationActions.back())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * 在没有 navigation 这个 prop 的情况下进行页面reset操作</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * @param routeName 路由名</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * @param params 路由参数</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> reset = <span class=\"function\">(<span class=\"params\">routeName: <span class=\"built_in\">string</span>, params?: object</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> resetAction = StackActions.reset(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\">    index: <span class=\"number\">0</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">63</span></pre></td><td class=\"code\"><pre><span class=\"line\">    actions: [NavigationActions.navigate(&#123; routeName, params &#125;)],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">64</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">65</span></pre></td><td class=\"code\"><pre><span class=\"line\">  navigator.dispatch(resetAction)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">66</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">67</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">68</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">69</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * 在没有 navigation 这个 prop 的情况下进行页面 replace 操作</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">70</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * @param number 返回的层数</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">71</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">72</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> replace = <span class=\"function\">(<span class=\"params\">routeName: <span class=\"built_in\">string</span>, params?: object</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">73</span></pre></td><td class=\"code\"><pre><span class=\"line\">  navigator.dispatch(StackActions.replace(&#123; routeName, params &#125;))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">74</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">75</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">76</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">77</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * 在没有 navigation 这个 prop 的情况下进行页面 push 操作</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">78</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * @param number 返回的层数</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">79</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">80</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> push = <span class=\"function\">(<span class=\"params\">routeName: <span class=\"built_in\">string</span>, params?: object</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">81</span></pre></td><td class=\"code\"><pre><span class=\"line\">  navigator.dispatch(StackActions.push(&#123; routeName, params &#125;))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">82</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">83</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">84</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">85</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * 在没有 navigation 这个 prop 的情况下进行页面 pop 操作</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">86</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * @param number 返回的层数</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">87</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">88</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> pop = <span class=\"function\">(<span class=\"params\">n: <span class=\"built_in\">number</span></span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">89</span></pre></td><td class=\"code\"><pre><span class=\"line\">  navigator.dispatch(StackActions.pop(&#123; n &#125;))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">90</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">91</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">92</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">93</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * 在没有 navigation 这个 prop 的情况下进行页面 pop 操作</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">94</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">95</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> popToTop = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">96</span></pre></td><td class=\"code\"><pre><span class=\"line\">  navigator.dispatch(StackActions.popToTop())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">97</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">98</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">99</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">100</span></pre></td><td class=\"code\"><pre><span class=\"line\">  setTopLevelNavigator,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">101</span></pre></td><td class=\"code\"><pre><span class=\"line\">  getCurrentRoute,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">102</span></pre></td><td class=\"code\"><pre><span class=\"line\">  navigate,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">103</span></pre></td><td class=\"code\"><pre><span class=\"line\">  goBack,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">104</span></pre></td><td class=\"code\"><pre><span class=\"line\">  reset,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">105</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n",
        "site": { "data": {} },
        "excerpt": "<h2 id=\"适用范围\"><a href=\"#适用范围\" class=\"headerlink\" title=\"适用范围\"></a>适用范围</h2><ul>\n<li>react-native 0.60+</li>\n<li>react-navigation 4+</li>\n</ul>\n<h2 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h2><ul>\n<li>易于使用：用内置的导航器快速开始项目, 提供开箱即用的无缝体验。</li>\n<li>兼容 ios 和 android：平台拥有独特的外观、流程的动画和手势。</li>\n<li>完全可定制：如果你知道如何使用 JavaScript 编写应用程序，那么你就可以自定义 React Navigation 的任何部分。</li>\n<li>平台可扩展：React Navigation 在每一层都是可扩展的-你可以编写自己的 navigators，甚至替换面向用户的 API。</li>\n</ul>",
        "more": "<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add react-navigation</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context</span></pre></td></tr></table></figure>\n\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ios &amp;&amp; pod install &amp;&amp; <span class=\"built_in\">cd</span> ..</span></pre></td></tr></table></figure>\n\n<p>为了完成 react-native-screens 在 Android 上的安装, 请在<code>android/app/build.gradle</code>中 dependencies 选项中添加下面这两行:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">implementation <span class=\"string\">'androidx.appcompat:appcompat:1.1.0-rc01'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">implementation <span class=\"string\">'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0-alpha02'</span></span></pre></td></tr></table></figure>\n\n<h2 id=\"createAppContainer\"><a href=\"#createAppContainer\" class=\"headerlink\" title=\"createAppContainer\"></a>createAppContainer</h2><p>createAppContainer 是一个函数，该函数返回一个 React 组件 并将 createStackNavigator 创建的 React 组件 作为参数，并且可以直接从 App.js 导出,用作我们应用程序的根组件。</p>\n<h3 id=\"onNavigationStateChange-prevState-newState-action\"><a href=\"#onNavigationStateChange-prevState-newState-action\" class=\"headerlink\" title=\"onNavigationStateChange(prevState, newState, action)\"></a>onNavigationStateChange(prevState, newState, action)</h3><p>每当导航器管理的 navigation state 发生变化时，都会调用该函数。 它接收之前的 state、navigation 的新 state 以及发布状态更改的 action。 默认情况下，它将 state 的更改打印到控制台。我们可以利用该 props 进行页面跟踪并将其发送到 APM 系统。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;AppContainer onNavigationStateChange&#x3D;&#123;onNavigationStateChange&#125; &#x2F;&gt;</span></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; NavigationState, NavigationLeafRoute, NavigationParams, NavigationRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-navigation'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> *  从 navigation state 中获取当前页面名</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * @param navigationState NavigationState</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getCurrentRoute = (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  navigationState: NavigationState | NavigationLeafRoute&lt;NavigationParams&gt;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">): NavigationRoute&lt;NavigationParams&gt; | <span class=\"function\"><span class=\"params\">null</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> (!navigationState) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> route = navigationState.routes[navigationState.index]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 在嵌套的导航中快速翻找</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> (route.routes) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> getCurrentRoute(route)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> route</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> onNavigationStateChange = <span class=\"function\">(<span class=\"params\">prevState, currentState</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> prevScreen = getCurrentRoute(prevState)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> currentScreen = getCurrentRoute(currentState)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> (currentScreen &amp;&amp; prevScreen !== currentScreen) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"built_in\">console</span>.log(currentScreen)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> onNavigationStateChange</span></pre></td></tr></table></figure>\n\n<h2 id=\"标题栏-Header\"><a href=\"#标题栏-Header\" class=\"headerlink\" title=\"标题栏 Header\"></a>标题栏 Header</h2><h3 id=\"隐藏-Header\"><a href=\"#隐藏-Header\" class=\"headerlink\" title=\"隐藏 Header\"></a>隐藏 Header</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// stack级别</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">createStackNavigator(routeConfigMap, &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  headerMode: <span class=\"string\">'none'</span>, <span class=\"comment\">// &lt;---</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// screen级别</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">createStackNavigator(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    DemoScreen: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      screen: DemoScreen,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">      navigationOptions: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">        headerShown: <span class=\"literal\">null</span>, <span class=\"comment\">// &lt;---</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  NavigationRouteConfigMap,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">)</span></pre></td></tr></table></figure>\n\n<h3 id=\"隐藏-Header-background\"><a href=\"#隐藏-Header-background\" class=\"headerlink\" title=\"隐藏 Header background\"></a>隐藏 Header background</h3><blockquote>\n<p>这个场景是 UI 的背景图是渐变的情况下没办法指定 StatusBar 的背景色</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">static navigationOptions &#x3D; (&#123; navigation &#125;) &#x3D;&gt; (&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  headerTransparent: true &#x2F;&#x2F; &lt;---</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<h3 id=\"获取-Header-Height\"><a href=\"#获取-Header-Height\" class=\"headerlink\" title=\"获取 Header Height\"></a>获取 Header Height</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useHeaderHeight, Header &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-navigation-stack'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> headerHeight = useHeaderHeight()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(Header.HEIGHT)</span></pre></td></tr></table></figure>\n\n<h3 id=\"去掉标题栏下的阴影\"><a href=\"#去掉标题栏下的阴影\" class=\"headerlink\" title=\"去掉标题栏下的阴影\"></a>去掉标题栏下的阴影</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> navigationOptions = <span class=\"function\">(<span class=\"params\">&#123; navigation &#125;</span>) =&gt;</span> (&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  headerStyle: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 隐藏导航栏下的阴影效果</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    elevation: <span class=\"number\">0</span>, <span class=\"comment\">// android</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    shadowOpacity: <span class=\"number\">0</span>, <span class=\"comment\">// ios</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<h3 id=\"改变标题栏标题颜色\"><a href=\"#改变标题栏标题颜色\" class=\"headerlink\" title=\"改变标题栏标题颜色\"></a>改变标题栏标题颜色</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> navigationOptions = <span class=\"function\">(<span class=\"params\">&#123; navigation &#125;</span>) =&gt;</span> (&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  headerTintColor: <span class=\"string\">'#ffffff'</span>, <span class=\"comment\">// 返回按钮和标题都使用这个属性作为它们的颜色</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  headerStyle: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    color: <span class=\"string\">'#000000'</span> <span class=\"comment\">// 优先级高</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<h2 id=\"Navigation-options-解析\"><a href=\"#Navigation-options-解析\" class=\"headerlink\" title=\"Navigation options 解析\"></a>Navigation options 解析</h2><h3 id=\"选项卡导航器包含一个堆栈，在选项卡导航器设置-tabBarLabel\"><a href=\"#选项卡导航器包含一个堆栈，在选项卡导航器设置-tabBarLabel\" class=\"headerlink\" title=\"选项卡导航器包含一个堆栈，在选项卡导航器设置 tabBarLabel\"></a>选项卡导航器包含一个堆栈，在选项卡导航器设置 tabBarLabel</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// etc..</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// etc..</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> HomeStack = createStackNavigator(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; A &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    navigationOptions: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      tabBarLabel: <span class=\"string\">'首页'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> SettingsStack = createStackNavigator(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; B &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    navigationOptions: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">      tabBarLabel: <span class=\"string\">'设置'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> createAppContainer(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">  createBottomTabNavigator(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">    HomeStack,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">    SettingsStack,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;),</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">)</span></pre></td></tr></table></figure>\n\n<h3 id=\"堆栈包含一个选项卡导航器，在堆栈标题栏上设置-headerTitle\"><a href=\"#堆栈包含一个选项卡导航器，在堆栈标题栏上设置-headerTitle\" class=\"headerlink\" title=\"堆栈包含一个选项卡导航器，在堆栈标题栏上设置 headerTitle\"></a>堆栈包含一个选项卡导航器，在堆栈标题栏上设置 headerTitle</h3><p>每个 tab 都有自己的 stack， 当 tab 页面处于顶层时，你可以隐藏 stack 的 header。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> FeedStack = createStackNavigator(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  FeedHome: FeedScreen,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">/* other routes here */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ProfileStack = createStackNavigator(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ProfileHome: ProfileScreen,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">/* other routes here */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> TabNavigator = createBottomTabNavigator(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    Feed: FeedStack,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    Profile: ProfileStack,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    navigationOptions: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"comment\">// Hide the header from AppNavigator stack</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">      headerShown: <span class=\"literal\">false</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> AppNavigator = createStackNavigator(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Home: TabNavigator,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Settings: SettingsScreen,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<h3 id=\"选项卡导航器包含堆栈，你希望隐藏特定页面上的-tabbar\"><a href=\"#选项卡导航器包含堆栈，你希望隐藏特定页面上的-tabbar\" class=\"headerlink\" title=\"选项卡导航器包含堆栈，你希望隐藏特定页面上的 tabbar\"></a>选项卡导航器包含堆栈，你希望隐藏特定页面上的 tabbar</h3><p>添加另一个 Stack Navigator 作为 Tab Navigator 的父级, 并将 Detail 页面放在里面。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> FeedStack = createStackNavigator(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  FeedHome: FeedScreen,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">/* any other route you want to render under the tab bar */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> TabNavigator = createBottomTabNavigator(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Feed: FeedStack,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Profile: ProfileScreen,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> AppNavigator = createStackNavigator(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Tabs: TabNavigator,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Details: DetailsScreen,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">/* any other route you want to render above the tab bar */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> AppNavigator = createSwitchNavigator(AppNavigator)</span></pre></td></tr></table></figure>\n\n<h2 id=\"自定义-Android-物理返回键行为\"><a href=\"#自定义-Android-物理返回键行为\" class=\"headerlink\" title=\"自定义 Android 物理返回键行为\"></a>自定义 Android 物理返回键行为</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Text, View, Alert &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; AndroidBackHandler &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-navigation-backhandler'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailsScreen</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span>&lt;<span class=\"title\">Props</span>&gt; </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  onBackButtonPressAndroid = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.props.navigation.isFocused()) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"comment\">// 确保当页面聚焦时才执行后边的代码</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    Alert.alert(<span class=\"string\">'自定义安卓物理返回键行为'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  render() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;AndroidBackHandler onBackPress=&#123;<span class=\"keyword\">this</span>.onBackButtonPressAndroid&#125;&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &lt;View style=&#123;&#123; <span class=\"attr\">flex</span>: <span class=\"number\">1</span>, <span class=\"attr\">alignItems</span>: <span class=\"string\">'center'</span>, <span class=\"attr\">justifyContent</span>: <span class=\"string\">'center'</span>, <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#ecf0f1'</span> &#125;&#125;&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &lt;Text style=&#123;&#123; <span class=\"attr\">fontSize</span>: <span class=\"number\">40</span> &#125;&#125;&gt;Detail Screen&lt;<span class=\"regexp\">/Text&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">        &lt;/</span>View&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;<span class=\"regexp\">/AndroidBackHandler&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">    )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  &#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">&#125;</span></span></pre></td></tr></table></figure>\n\n<h2 id=\"在任意组件访问-navigation-props\"><a href=\"#在任意组件访问-navigation-props\" class=\"headerlink\" title=\"在任意组件访问 navigation props\"></a>在任意组件访问 navigation props</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; Button &#125; from &#39;react-native&#39;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; withNavigation &#125; from &#39;react-navigation&#39;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; NavigationStackProp &#125; from &#39;react-navigation-stack&#39;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">interface Props &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  navigation: NavigationStackProp</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">class MyBackButton extends React.Component&lt;Props&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  render() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    return (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;Button</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">        title&#x3D;&quot;Back&quot;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">        onPress&#x3D;&#123;() &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">          this.props.navigation.goBack()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#x2F;&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">export default withNavigation(MyBackButton)</span></pre></td></tr></table></figure>\n\n<h2 id=\"在没有-navigation-props-的情况下执行路由跳转\"><a href=\"#在没有-navigation-props-的情况下执行路由跳转\" class=\"headerlink\" title=\"在没有 navigation props 的情况下执行路由跳转\"></a>在没有 navigation props 的情况下执行路由跳转</h2><h3 id=\"AppContainer\"><a href=\"#AppContainer\" class=\"headerlink\" title=\"AppContainer\"></a>AppContainer</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; setTopLevelNavigator &#125; from &#39;path&#x2F;to&#x2F;NavigationService&#39;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;AppContainer</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ref&#x3D;&#123;navigatorRef &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    if (navigatorRef) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">      setTopLevelNavigator(navigatorRef)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&gt;</span></pre></td></tr></table></figure>\n\n<h3 id=\"NavigationService\"><a href=\"#NavigationService\" class=\"headerlink\" title=\"NavigationService\"></a>NavigationService</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  NavigationState,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  NavigationLeafRoute,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  NavigationParams,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  NavigationRoute,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  NavigationActions,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  StackActions,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-navigation'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> navigator</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> setTopLevelNavigator = <span class=\"function\"><span class=\"params\">navigatorRef</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  navigator = navigatorRef</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> *  从 navigation state 中获取当前页面名</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * @param navigationState NavigationState</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getCurrentRoute = (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">  navigationState: NavigationState | NavigationLeafRoute&lt;NavigationParams&gt;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">): NavigationRoute&lt;NavigationParams&gt; | <span class=\"function\"><span class=\"params\">null</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> (!navigationState) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> route = navigationState.routes[navigationState.index]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 在嵌套的导航中快速翻找</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> (route.routes) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> getCurrentRoute(route)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> route</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * 在没有 navigation 这个 prop 的情况下进行页面跳转</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * @param routeName 路由名</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * @param params 路由参数</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> navigate = <span class=\"function\">(<span class=\"params\">routeName: <span class=\"built_in\">string</span>, params?: object</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">  navigator.dispatch(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">    NavigationActions.navigate(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">      routeName,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">      params,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;),</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * 在没有 navigation 这个 prop 的情况下进行页面goBack操作</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> goBack = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">  navigator.dispatch(NavigationActions.back())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * 在没有 navigation 这个 prop 的情况下进行页面reset操作</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * @param routeName 路由名</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * @param params 路由参数</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> reset = <span class=\"function\">(<span class=\"params\">routeName: <span class=\"built_in\">string</span>, params?: object</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> resetAction = StackActions.reset(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\">    index: <span class=\"number\">0</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">63</span></pre></td><td class=\"code\"><pre><span class=\"line\">    actions: [NavigationActions.navigate(&#123; routeName, params &#125;)],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">64</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">65</span></pre></td><td class=\"code\"><pre><span class=\"line\">  navigator.dispatch(resetAction)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">66</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">67</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">68</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">69</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * 在没有 navigation 这个 prop 的情况下进行页面 replace 操作</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">70</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * @param number 返回的层数</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">71</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">72</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> replace = <span class=\"function\">(<span class=\"params\">routeName: <span class=\"built_in\">string</span>, params?: object</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">73</span></pre></td><td class=\"code\"><pre><span class=\"line\">  navigator.dispatch(StackActions.replace(&#123; routeName, params &#125;))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">74</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">75</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">76</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">77</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * 在没有 navigation 这个 prop 的情况下进行页面 push 操作</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">78</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * @param number 返回的层数</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">79</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">80</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> push = <span class=\"function\">(<span class=\"params\">routeName: <span class=\"built_in\">string</span>, params?: object</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">81</span></pre></td><td class=\"code\"><pre><span class=\"line\">  navigator.dispatch(StackActions.push(&#123; routeName, params &#125;))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">82</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">83</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">84</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">85</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * 在没有 navigation 这个 prop 的情况下进行页面 pop 操作</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">86</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * @param number 返回的层数</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">87</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">88</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> pop = <span class=\"function\">(<span class=\"params\">n: <span class=\"built_in\">number</span></span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">89</span></pre></td><td class=\"code\"><pre><span class=\"line\">  navigator.dispatch(StackActions.pop(&#123; n &#125;))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">90</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">91</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">92</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">93</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * 在没有 navigation 这个 prop 的情况下进行页面 pop 操作</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">94</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">95</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> popToTop = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">96</span></pre></td><td class=\"code\"><pre><span class=\"line\">  navigator.dispatch(StackActions.popToTop())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">97</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">98</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">99</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">100</span></pre></td><td class=\"code\"><pre><span class=\"line\">  setTopLevelNavigator,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">101</span></pre></td><td class=\"code\"><pre><span class=\"line\">  getCurrentRoute,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">102</span></pre></td><td class=\"code\"><pre><span class=\"line\">  navigate,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">103</span></pre></td><td class=\"code\"><pre><span class=\"line\">  goBack,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">104</span></pre></td><td class=\"code\"><pre><span class=\"line\">  reset,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">105</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>"
      },
      {
        "title": "JavaScript Array 完全指南",
        "date": "2020-01-30T12:38:39.000Z",
        "_content": "\nECMAScript 数组的每一项可以保存任何类型的数据；而且大小是可以动态调整的，即可以随着数据的添加自动增长以容纳新增数据。\n\n<!--more-->\n\n## 创建数组\n\n### 构造函数\n\n```js\nvar colors = new Array() // []\ncolors = new Array(10) // [empty × 10]\ncolors = new Array('red', 'blue', 'green') // [\"red\", \"blue\", \"green\"]\n```\n\n### 数组字面量表示法\n\n```js\nvar colors = [] // 创建一个空数组\nvar colors = ['red', 'blue', 'green'] // 创建一个包含 3 个字符串的数组\nvar values = [1, 2] // 不要这样！这样会创建一个包含2或3项的数组\nvar options = [, , , , ,] // 不要这样！这样会创建一个包含5或6项的数组\n```\n\n## 读取和设置数组的值\n\n```js\nvar colors = ['red', 'blue', 'green'] // 创建一个包含3个字符串的数组\nalert(colors[0]) // 显示第1项\ncolors[2] = 'black' // 修改第3项\ncolors[3] = 'brown' // 新增第4项\n```\n\n## length 属性\n\n```js\nvar colors = ['red', 'blue', 'green'] // 创建一个包含3个字符串的数组\nalert(colors.length) // 显示数组长度\ncolors[colors.length] = 'black' // 在位置3添加一种颜色\ncolors[colors.length] = 'brown' // 在位置4再添加一种颜色\n```\n\n## 检测数组\n\n```js\nvar array = []\nif (Array.isArray(array)) {\n  // 对数组执行某些操作\n}\n```\n\n### Array.isArray Polyfill\n\n如果是实际项目可以配置 `@babel/polyfill` 或者 `transform-runtime`，这不在本文的讨论范围\n\n```js\nif (!Array.isArray) {\n  Array.isArray = function(arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]'\n  }\n}\n```\n\n## ES1 方法\n\n- `Array.prototype.join`: `join()` 方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符。**原始数组不会被改变**。\n\n```js\n// join\nvar colors = ['red', 'blue', 'green']\nconsole.log(colors.join()) // \"red,blue,green\"\nconsole.log(colors.join('|')) // \"red|blue|green\"\nconsole.log(colors.join('|')) // \"red|blue|green\"\nconsole.log('red|blue|green'.split('|')) // [\"red\", \"blue\", \"green\"]\n```\n\n- `Array.prototype.reverse()`: `reverse()` 方法将数组中元素的位置颠倒，并返回该数组。**该方法会改变原数组**。\n- `Array.prototype.sort()`: `sort()` 方法用原地算法对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的 UTF-16 代码单元值序列时构建的; sort 方法接收一个比较函数作为参数，如果第一参数应该位于第二个参数之前则返回负数，如果第一个参数应该位于第二个之后则返回一个正数。**该方法会改变原数组**。\n\n```js\n// reverse\nvar colors = [1, 2, 3, 4, 5]\nconsole.log(colors.reverse()) // [5, 4, 3, 2, 1]\n\n// sort\nvar colors = [1, 10, 3, 20, 5]\nfunction sort(arr, asc = true) {\n  return arr.sort((a, b) => {\n    if (asc) {\n      return a - b\n    }\n    return b - a\n  })\n}\nconsole.log(sort(colors)) // [1, 3, 5, 10, 20]\nconsole.log(sort(colors, false)) // [20, 10, 5, 3, 1]\n```\n\n## ES3 方法\n\n- `Array.prototype.push`: `push()` 方法可以接受任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度。**该方法会改变原数组**。\n- `Array.prototype.pop`: `pop()` 方法从数组末尾移除最后一项，减少数组的 `length` 值，并返回该项。**该方法会改变原数组**。\n- `Array.prototype.shift`: `shift()` 方法能够移除数组中的第一项并返回该项, 同时将数组长度减 1。**该方法会改变原数组**。\n- `Array.prototype.unshift`: `unshift()` 方法能够在数组前端添加任意个项，并返回新数组的长度。**该方法会改变原数组**。\n\n```js\n// push、pop\nvar colors = ['red', 'blue', 'green']\nvar count = colors.push('black', 'brown') // 向末尾推入两项\nconsole.log(count) // 5\nvar item = colors.pop() // 取得最后一项\nconsole.log(item) // \"brown\"\n\n// shift、unshift\nvar colors = ['red', 'blue', 'green']\nvar count = colors.unshift('black', 'brown') // 向开头推入两项\nconsole.log(count) // 5\nvar item = colors.shift() // 取得第一项\nconsole.log(item) // \"red\"\n```\n\n- `Array.prototype.concat()`: `concat()` 方法用于合并两个或多个数组。**原始数组不会被改变**，而是返回一个新数组。\n- `Array.prototype.slice()`: `slice()` 方法返回一个新的数组对象，这一对象是一个由 `begin` 和 `end` 决定的原数组的浅拷贝（包括 `begin`，不包括 `end`）。**原始数组不会被改变**。\n- `Array.prototype.splice()`: `splice()` 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。**此方法会改变原数组**。\n  - **删除**: 可以删除任意数量的项，只需指定 2 个参数: 要删除的第一项的位置和要删除的项数。例如，`splice(0, 2)` 会删除数组中的前两项。\n  - **插入**: 可以向指定位置插入任意数量的项，只需要提供 3 个参数：起始位置、0（要删除的项数）和要插入的项。如果要插入多个项，可以再传入任意多个项。例如，`splice(2, 0, \"red\", \"green\")` 会从当前数组的位置 2 开始插入字符串 `\"red\"` 和 `green`。\n  - **替换**: 可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需要指定 3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项不必与删除的项数相等。例如，`splice(2, 1, \"red\", \"green\")` 会删除当前数组位置 2 的项，然后再从位置 2 开始插入字符串 `\"red\"` 和 `green`。\n\n```js\n// concat\nvar colors = ['red', 'blue', 'green']\nvar colors1 = ['black', 'brown']\nconsole.log(colors.concat(colors1)) // [\"red\", \"blue\", \"green\", \"black\", \"brown\"]\n// slice\n/**\n * 如果 `slice()` 方法的参数中有一个负数，则用数组长度加上该数来确定相应地位置。例如，在一个包含5项的数组上调用 `slice(-2, -1)` 与调用 `slice(3, 4)` 得到的结果相同。如果结束位置小于起始位置，则返回空数组。\n */\nvar colors = ['red', 'blue', 'green', 'black', 'brown']\nvar colors2 = colors.slice(1)\nvar colors3 = colors.slice(1, 4)\n\nconsole.log(colors2) // [\"blue\", \"green\", \"black\", \"brown\"]\nconsole.log(colors3) // [\"blue\", \"green\", \"black\"]\n\n/**\n * splice() 方法始终都会返回一个数组，该数组中包含从原始数组中删除的项（如果没有删除任何项，则返回一个空数组）\n */\nvar colors = ['red', 'green', 'blue']\nvar removed = colors.splice(0, 1) // 删除第一项\nconsole.log(colors) // [\"green\", \"blue\"]\nconsole.log(removed) // [\"red\"] 返回的数组中只包含一项\n\nremoved = colors.splice(1, 0, 'yellow', 'orange') // 从位置 1 开始插入两项\nconsole.log(colors) // [\"green\", \"red\", \"orange\", \"blue\"]\nconsole.log(removed) // 返回的是一个空数组\n\nremoved = colors.splice(1, 1, 'red', 'purple') // 删除一项，增加两项\nconsole.log(colors) // [\"green\", \"red\", \"purple\", \"orange\", \"blue\"]\nconsole.log(removed) // yellow，返回的数组中只包含一项\n```\n\n## ES5 方法\n\n- `Array.prototype.indexOf()`: `indexOf()` 方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。从数组的前面向后查找，从 `fromIndex` 处开始。\n- `Array。prototype.lastIndexOf)()`: `lastIndexOf()` 方法返回指定元素在数组中的最后一个索引，如果不存在则返回-1。从数组的后面向前查找，从 `fromIndex` 处开始。\n\n```js\nvar numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]\nconsole.log(numbers.indexOf(4)) // 3\nconsole.log(numbers.lastIndexOf(4)) // 5\n\nconsole.log(numbers.indexOf(4, 4)) // 5\nconsole.log(numbers.lastIndexOf(4, 4)) // 3\n\nvar person = { name: 'Nicholas' }\nvar people = [{ name: 'Nicholas' }]\nvar morePeople\n/**\n * indexOf、lastIndexOf 在比较第一个参数与数组中的每一项时，会使用全等操作符\n */\nconsole.log(people.indexOf(person)) // -1\nconsole.log(morePeople.indexOf(person)) // 0\n```\n\n- `Array.prototype.every()`: 对数组中的每一项运行给定函数，如果该函数对每一项都返回 `true`，则返回 `true`。\n- `Array.prototype.some()`: 对数组中的每一项运行给定函数，如果该函数对任一项返回 `true`，则返回 `true`。\n- `Array.prototype.filter()`: 对数组中的每一项运行给定函数，返回该函数会返回 `true` 的项组成的数组。\n- `Array.prototype.map()`: 对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。\n- `Array.prototype.forEach()`: 对数组中的每一项运行给定函数，这个方法没有返回值。\n\n```js\n// every\nvar numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]\nvar everyResult = numbers.every((item, index, array) => {\n  return item > 2\n})\nconsole.log(everyResult) // false\n// some\nvar someResult = numbers.some((item, index, array) => {\n  return item > 2\n})\nconsole.log(someResult) // true\n// filter\nvar numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]\nvar filterResult = numbers.filter((item, index, array) => {\n  return item > 2\n})\nconsole.log(filterResult) // [3, 4, 5, 4, 3]\n// map\nvar numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]\nvar mapResult = numbers.map((item, index, array) => {\n  return item * 2\n})\nconsole.log(mapResult) // [2, 4, 6, 8, 10, 8, 6, 4, 2]\n// forEach\nvar numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]\nnumbers.forEach((item, index, array) => {\n  // 执行某些操作\n})\n```\n\n- `Array.prototype.reduce()`\n- `Array.prototype.reduceRight()`\n\n`reduce()` 和 `reduceRight()` 方法都会迭代数组的所有项，然后构建一个最终返回的值。其中，`reduce()` 方法从数组的第一项开始，逐个遍历到最后。而 `reduceRight()` 则从数组的最后一项开始，向前遍历到第一项。\n\n这两个参数都接受两个参数: 一个在每一项上调用的函数和（可选的）作为归并基础的初始值。传给 `reduce` 和 `reduceRight` 的函数接受 4 个参数：前一个值、当前值、项的索引和数组对象。这个函数返回的任何值都会作为第一个参数自动传给下一项。第一次迭代发生在数组的第二项上，因此第一个参数是数组的第一项，第二个参数就是数组的第二项。\n\n```js\n// 数组求和\nvar values = [1, 2, 3, 4, 5]\nvar sum = values.reduce((prev, cur, index, array) => {\n  return prev + cur\n})\nconsole.log(sum)\n// 数组求乘积\nvar values = [1, 2, 3, 4, 5]\nvar pro = values.reduce((prev, cur, index, array) => {\n  return prev * cur\n})\nconsole.log(pro) // 120\n/**\n * 【累加对象数组里的值】\n * 要累加对象数组中包含的值，必须提供初始值，以便各个item正确通过你的函数。\n */\nvar values = [{ x: 1 }, { x: 2 }, { x: 3 }]\nvar sum = values.reduce((prev, cur) => {\n  return prev + cur.x\n}, 0)\nconsole.log(sum) // 6\n// 求最大值\nvar values = [1, 2, 3, 4, 5]\nvar max = values.reduce((prev, cur, index, array) => {\n  return prev > cur ? prev : cur\n})\nconsole.log(max) // 5\n// 计算数组中每个元素出现的次数\nvar names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice']\nvar countedNames = names.reduce((allNames, name) => {\n  if (allNames.indexOf(name) > -1) {\n    allNames[name]++\n  } else {\n    allNames[name] = 1\n  }\n  return allNames\n})\n// 按属性对object array分类\nvar people = [\n  { name: '张三', age: 26 },\n  { name: '李扬', age: 25 },\n  { name: '杨六', age: 25 },\n  { name: '王五', age: 26 },\n]\nvar groupBy = (objectArray, property) => {\n  return objectArray.reduce((acc, cur) => {\n    const key = cur[property]\n    if (!acc[key]) {\n      acc[key] = [cur]\n    } else {\n      acc[key].push(cur)\n    }\n    return acc\n  }, {})\n}\nvar groupedPeople = groupBy(people, 'age')\n```\n\n**reduce 高级用法:**\n\n> 搬砖工小王拿到了这样的格式：`var arr = [ {n ame: 'brick1'}, {name: 'brick2'}, {name: 'brick3'} ]`\n> 希望得到这样的数据格式：`brick1, brick2 & brick3`\n> 当然数组异常流: `[{name:'brick1'}]` 和空数组传入得到 `\"brick1\"` 和空\n\n```js\nvar array = [{ name: 'brick11' }, { name: 'brick12' }, { name: 'brick13' }]\nvar carryBricks = arr => {\n  return arr.reduce((prev, cur, index, array) => {\n    if (index === 0) {\n      return cur.name\n    } else if (index === array.length - 1) {\n      return prev + ' & ' + cur.name\n    } else {\n      return prev + ',' + cur.name\n    }\n  }, '')\n}\nconsole.log(carryBricks(array)) // \"brick11,brick12 & brick13\"\nconsole.log(carryBricks([{ name: 'brick1' }])) // \"brick1\"\nconsole.log(carryBricks([])) // \"\"\n```\n\n## lodash\n\n### 数组并集\n\n- `_.union([arrays])`: 创建一个按顺序排列的唯一值的数组。所有给定数组的元素值使用 SameValueZero 做等值比较。（ `arrays`（数组）的并集，按顺序返回，返回数组的元素是唯一的）\n- `_.unionBy([arrays], [iteratee=_.identity])`: 这个方法类似 `_.union` ，除了它接受一个 `iteratee` （迭代函数），调用每一个数组（`array`）的每个元素以产生唯一性计算的标准。`iteratee` 会传入一个参数：(`value`)。\n- `_.unionWith([arrays], [comparator])`: 这个方法类似 `_.union`， 除了它接受一个 `comparator` 调用比较 `arrays` 数组的每一个元素。 `comparator` 调用时会传入 2 个参数： (`arrVal`, `othVal`)。\n\n```js\nimport _ from 'lodash'\n// union\n_.union([2], [1, 2]) // [2, 1]\n\n// unionBy\n_.unionBy([2.1], [1.2, 2.3], Math.floor) // [2.1, 1.2]\n// The `_.property` iteratee shorthand.\n_.unionBy([{ x: 1 }], [{ x: 2 }, { x: 1 }], 'x') // [{ 'x': 1 }, { 'x': 2 }]\n\n// unionWith\nvar objects = [\n  { x: 1, y: 2 },\n  { x: 2, y: 1 },\n]\nvar others = [\n  { x: 1, y: 1 },\n  { x: 1, y: 2 },\n]\n_.unionWith(objects, others, _.isEqual) // [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n```\n\n### 数组交集\n\n- `_.intersection([arrays])`: 创建唯一值的数组，这个数组包含所有给定数组都包含的元素，使用 SameValueZero 进行相等性比较。（可以理解为给定数组的交集）\n- `_.intersectionBy([arrays], [iteratee=_.identity])`: 这个方法类似 `_.intersection`，区别是它接受一个 `iteratee` 调用每一个 arrays 的每个值以产生一个值，通过产生的值进行了比较。结果值是从第一数组中选择。iteratee 会传入一个参数：`(value)`。\n- `_.intersectionWith([arrays], [comparator])`: 这个方法类似 `_.intersection`，区别是它接受一个 `comparator` 调用比较 arrays 中的元素。结果值是从第一数组中选择。`comparator` 会传入两个参数：`(arrVal, othVal)`。\n\n```js\nimport _ from 'lodash'\n// intersection\n_.intersection([2, 1], [4, 2], [1, 2])) // [2]\n\n// intersectionBy\n_.intersectionBy([2.1, 1.2], [4.3, 2.4], Math.floor) // [2.1]\n// The `_.property` iteratee shorthand.\n_.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x') // => [{ 'x': 1 }]\n\n// intersectionWith\nvar objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n_.intersectionWith(objects, others, _.isEqual) // [{ 'x': 1, 'y': 2 }]\n```\n\n### 数组差集\n\n- `_.difference(array, [values])`: 创建一个具有唯一 array 值的数组，每个值不包含在其他给定的数组中。（即创建一个新数组，这个数组中的值，为第一个数字（array 参数）排除了给定数组中的值。）该方法使用 SameValueZero 做相等比较。结果值的顺序是由第一个数组中的顺序确定。\n- `_.differenceBy(array, [values], [iteratee=_.identity])`: 这个方法类似 \\_.difference ，除了它接受一个 iteratee （迭代器）， 调用 array 和 values 中的每个元素以产生比较的标准。 结果值是从第一数组中选择。iteratee 会调用一个参数：(value)。（首先使用迭代器分别迭代 array 和 values 中的每个元素，返回的值作为比较值）。\n- `_.differenceWith(array, [values], [comparator])`: 这个方法类似 `_.difference` ，除了它接受一个 `comparator` （比较器），它调用比较 `array`，`values` 中的元素。 结果值是从第一数组中选择。`comparator` 调用参数有两个：`(arrVal, othVal)`。\n\n```js\nimport _ from 'lodash'\n\n// difference\n_.difference([3, 2, 1], [4, 2]) // [3, 1]\n\n// differenceBy\n_.differenceBy([3.1, 2.2, 1.3], [4.4, 2.5], Math.floor) // [3.1, 1.3]\n// The `_.property` iteratee shorthand.\n_.differenceBy([{ x: 2 }, { x: 1 }], [{ x: 1 }], 'x') // [{ 'x': 2 }]\n\n// differenceWith\nvar objects = [\n  { x: 1, y: 2 },\n  { x: 2, y: 1 },\n]\n_.differenceWith(objects, [{ x: 1, y: 2 }], _.isEqual) // [{ 'x': 2, 'y': 1 }]\n```\n\n### 数组分组\n\n- `_.groupBy(collection, [iteratee=_.identity])`: 创建一个对象，`key` 是 `iteratee` 遍历 `collection`(集合) 中的每个元素返回的结果。 分组值的顺序是由他们出现在 `collection`(集合) 中的顺序确定的。每个键对应的值负责生成 `key` 的元素组成的数组。`iteratee` 调用 1 个参数： (`value`)。\n\n```js\nimport _ from 'lodash'\n\n_.groupBy([6.1, 4.2, 6.3], Math.floor) // { '4': [4.2], '6': [6.1, 6.3] }\n// The `_.property` iteratee shorthand.\n_.groupBy(['one', 'two', 'three'], 'length') // { '3': ['one', 'two'], '5': ['three'] }\nconst students = [\n  { name: '杨俊宁', province: '河南' },\n  { name: '宋光刚', province: '河南' },\n  { name: '谢晧曜', province: '江苏' },\n  { name: '李珂威', province: '河南' },\n]\n_.groupBy(students, 'province')\n// { '江苏': [{ name: '谢晧曜', province: '江苏' }], '河南': [{ name: '杨俊宁', province: '河南' }, { name: '宋光刚', province: '河南' },{ name: '李珂威', province: '河南' }] }\n```\n\n### 删除数组项\n\n#### 根据断言删除数组项\n\n- `remove`: 移除数组中 predicate（断言）返回为真值的所有元素，并返回移除元素组成的数组。predicate（断言） 会传入 3 个参数： (`value`, `index`, `array`)。\n\n```js\nimport _ from 'lodash'\n\nconst array = [1, 2, 3, 4]\nconst evens = _.remove(array, value => {\n  return value % 2 == 0\n})\nconsole.log(array) // => [1, 3]\nconsole.log(evens) // => [2, 4]\n\nconst students = [\n  { name: '杨俊宁', province: '河南' },\n  { name: '宋光刚', province: '河南' },\n  { name: '谢晧曜', province: '江苏' },\n  { name: '李珂威', province: '河南' },\n]\nconst removedStudent = _.remove(students, student => {\n  return student.province === '江苏'\n})\nconsole.log(students)\n// [{name: \"杨俊宁\", province: \"河南\"}, {name: \"宋光刚\", province: \"河南\"}, {name: \"李珂威\", province: \"河南\"}]\nconsole.log(removedStudent)\n// [{name: \"谢晧曜\", province: \"江苏\"}]\n```\n\n#### 根据给定值删除数组项\n\n- `_.pull(array, [values])`: 移除数组 array 中所有和给定值相等的元素，使用 SameValueZero 进行全等比较。\n- `_.pullAll(array, values)`: 这个方法类似 \\_.pull，区别是这个方法接收一个要移除值的数组。\n- `_.pullAllBy(array, values, [iteratee=_.identity])`: 这个方法类似于 `_.pullAll` ，区别是这个方法接受一个 `iteratee`（迭代函数） 调用 `array` 和 `values`的每个值以产生一个值，通过产生的值进行了比较。`iteratee` 会传入一个参数： (`value`)。\n- `_.pullAllWith(array, values, [comparator])`: 这个方法类似于 `_.pullAll`，区别是这个方法接受 `comparator` 调用 `array` 中的元素和 `values` 比较。`comparator` 会传入两个参数：(`arrVal`, `othVal`)。\n\n> pull 系列和 difference 系列不同之处在于 pull 系列方法会改变数组 array\n\n```js\nimport _ from 'lodash'\n\n// pull\nvar array = [1, 2, 3, 1, 2, 3]\n_.pull(array, 2, 3)\nconsole.log(array) // [1, 1]\n\n// pullAll\nvar array = [1, 2, 3, 1, 2, 3]\n_.pullAll(array, [2, 3])\nconsole.log(array) // [1, 1]\n\n// pullAllBy\nvar array = [{ x: 1 }, { x: 2 }, { x: 3 }, { x: 1 }]\n_.pullAllBy(array, [{ x: 2 }, { x: 3 }], 'x')\nconsole.log(array) // [{ 'x': 1 }, { 'x': 1 }]\n\n// pullAllWith\nvar array = [\n  { x: 1, y: 2 },\n  { x: 3, y: 4 },\n  { x: 5, y: 6 },\n]\n_.pullAllWith(array, [{ x: 3, y: 4 }], _.isEqual)\nconsole.log(array) // [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n```\n\n- `_.pullAt(array, [indexes])`: 根据索引 `indexes`，移除 `array` 中对应的元素，并返回被移除元素的数组。\n\n```js\nimport _ from 'lodash'\n\nvar array = [5, 10, 15, 20]\nvar evens = _.pullAt(array, 1, 3)\n\nconsole.log(array) // [5, 15]\nconsole.log(evens) // [10, 20]\n```\n\n- `_.without(array, [values])`: 创建一个剔除所有给定值的新数组，剔除值的时候，使用 SameValueZero 做相等比较。不像 `_.pull`, 这个方法会返回一个新数组。\n\n```js\nimport _ from 'lodash'\n\n_.without([2, 1, 2, 3], 1, 2) // [3]\n```\n\n### 数组去重\n\n- `_.uniq(array)`: 创建一个去重后的 array 数组副本。使用了 SameValueZero 做等值比较。只有第一次出现的元素才会被保留。\n- `_.uniqBy(array, [iteratee=_.identity])`: 这个方法类似 `_.uniq` ，除了它接受一个 `iteratee`（迭代函数），调用每一个数组（`array`）的每个元素以产生唯一性计算的标准。`iteratee` 调用时会传入一个参数：(`value`)。\n- `_.uniqWith(array, [comparator])`: 这个方法类似 `_.uniq`， 除了它接受一个 `comparator` 调用比较 `array` 数组的每一个元素。 `comparator` 调用时会传入 2 个参数：(`arrVal`, `othVal`)。\n\n```js\nimport _ from 'lodash'\n\n// uniq\n_.uniq([2, 1, 2]) // [2, 1]\n\n// uniqBy\n_.uniqBy([2.1, 1.2, 2.3], Math.floor) // [2.1, 1.2]\n// The `_.property` iteratee shorthand.\n_.uniqBy([{ x: 1 }, { x: 2 }, { x: 1 }], 'x') // [{ 'x': 1 }, { 'x': 2 }]\n\n// uniqWith\nvar objects = [\n  { x: 1, y: 2 },\n  { x: 2, y: 1 },\n  { x: 1, y: 2 },\n]\n_.uniqWith(objects, _.isEqual) // [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n```\n\n### 数组排序\n\n- `_.sortBy(collection, [iteratees=[_.identity]])`: 创建一个元素数组。 以 `iteratee` 处理的结果升序排序。 这个方法执行稳定排序，也就是说相同元素会保持原始排序。 `iteratees` 调用1个参数：(`value`)。可以使用 `Array.prototype.reverse` 方法倒序\n\n```js\nimport _ from 'lodash'\n\nvar users = [\n  { user: { name: 'fred' }, age: 48 },\n  { user: { name: 'barney' }, age: 36 },\n  { user: { name: 'fred' }, age: 40 },\n  { user: { name: 'barney' }, age: 34 },\n]\n\n// The `_.property` iteratee shorthand.\n_.sortBy(users, 'user.name')\n/**\n * [\n *  {age: 34, user: \"barney\"},\n *  {age: 36, user: \"barney\"},\n *  {age: 40, user: \"fred\"},\n *  {age: 48, user: \"fred\"}\n * ]\n */\n```\n\n### 数组降维\n\n- `_.flatten(array)`: 减少一级 `array` 嵌套深度。\n- `_.flattenDeep(array)`: 将 `array` 递归为一维数组。\n- `_.flattenDepth(array, [depth=1])`: 根据 `depth` 递归减少 `array` 的嵌套层级\n\n```js\nimport _ from 'lodash'\n\n// flatten\n_.flatten([1, [2, [3, [4]], 5]]) // [1, 2, [3, [4]], 5]\n\n// flattenDeep\n_.flattenDeep([1, [2, [3, [4]], 5]]) // [1, 2, 3, 4, 5]\n\n// flattenDepth\nvar array = [1, [2, [3, [4]], 5]]\n_.flattenDepth(array, 1) // [1, 2, [3, [4]], 5]\n_.flattenDepth(array, 2) // [1, 2, 3, [4], 5]\n_.flattenDepth(array, 3) // [1, 2, 3, 4, 5]\n```\n\n### 获取部分元素\n\n- `_.initial(array)`: 获取数组 `array` 中除了最后一个元素之外的所有元素（去除数组array中的最后一个元素）。\n- `_.tail(array)`: 获取除了 `array` 数组第一个元素以外的全部元素。\n",
        "source": "_posts/JavaScript Array 完全指南.md",
        "raw": "---\ntitle: JavaScript Array 完全指南\ndate: 2020-01-30 20:38:39\ncategories: javascript\n---\n\nECMAScript 数组的每一项可以保存任何类型的数据；而且大小是可以动态调整的，即可以随着数据的添加自动增长以容纳新增数据。\n\n<!--more-->\n\n## 创建数组\n\n### 构造函数\n\n```js\nvar colors = new Array() // []\ncolors = new Array(10) // [empty × 10]\ncolors = new Array('red', 'blue', 'green') // [\"red\", \"blue\", \"green\"]\n```\n\n### 数组字面量表示法\n\n```js\nvar colors = [] // 创建一个空数组\nvar colors = ['red', 'blue', 'green'] // 创建一个包含 3 个字符串的数组\nvar values = [1, 2] // 不要这样！这样会创建一个包含2或3项的数组\nvar options = [, , , , ,] // 不要这样！这样会创建一个包含5或6项的数组\n```\n\n## 读取和设置数组的值\n\n```js\nvar colors = ['red', 'blue', 'green'] // 创建一个包含3个字符串的数组\nalert(colors[0]) // 显示第1项\ncolors[2] = 'black' // 修改第3项\ncolors[3] = 'brown' // 新增第4项\n```\n\n## length 属性\n\n```js\nvar colors = ['red', 'blue', 'green'] // 创建一个包含3个字符串的数组\nalert(colors.length) // 显示数组长度\ncolors[colors.length] = 'black' // 在位置3添加一种颜色\ncolors[colors.length] = 'brown' // 在位置4再添加一种颜色\n```\n\n## 检测数组\n\n```js\nvar array = []\nif (Array.isArray(array)) {\n  // 对数组执行某些操作\n}\n```\n\n### Array.isArray Polyfill\n\n如果是实际项目可以配置 `@babel/polyfill` 或者 `transform-runtime`，这不在本文的讨论范围\n\n```js\nif (!Array.isArray) {\n  Array.isArray = function(arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]'\n  }\n}\n```\n\n## ES1 方法\n\n- `Array.prototype.join`: `join()` 方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符。**原始数组不会被改变**。\n\n```js\n// join\nvar colors = ['red', 'blue', 'green']\nconsole.log(colors.join()) // \"red,blue,green\"\nconsole.log(colors.join('|')) // \"red|blue|green\"\nconsole.log(colors.join('|')) // \"red|blue|green\"\nconsole.log('red|blue|green'.split('|')) // [\"red\", \"blue\", \"green\"]\n```\n\n- `Array.prototype.reverse()`: `reverse()` 方法将数组中元素的位置颠倒，并返回该数组。**该方法会改变原数组**。\n- `Array.prototype.sort()`: `sort()` 方法用原地算法对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的 UTF-16 代码单元值序列时构建的; sort 方法接收一个比较函数作为参数，如果第一参数应该位于第二个参数之前则返回负数，如果第一个参数应该位于第二个之后则返回一个正数。**该方法会改变原数组**。\n\n```js\n// reverse\nvar colors = [1, 2, 3, 4, 5]\nconsole.log(colors.reverse()) // [5, 4, 3, 2, 1]\n\n// sort\nvar colors = [1, 10, 3, 20, 5]\nfunction sort(arr, asc = true) {\n  return arr.sort((a, b) => {\n    if (asc) {\n      return a - b\n    }\n    return b - a\n  })\n}\nconsole.log(sort(colors)) // [1, 3, 5, 10, 20]\nconsole.log(sort(colors, false)) // [20, 10, 5, 3, 1]\n```\n\n## ES3 方法\n\n- `Array.prototype.push`: `push()` 方法可以接受任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度。**该方法会改变原数组**。\n- `Array.prototype.pop`: `pop()` 方法从数组末尾移除最后一项，减少数组的 `length` 值，并返回该项。**该方法会改变原数组**。\n- `Array.prototype.shift`: `shift()` 方法能够移除数组中的第一项并返回该项, 同时将数组长度减 1。**该方法会改变原数组**。\n- `Array.prototype.unshift`: `unshift()` 方法能够在数组前端添加任意个项，并返回新数组的长度。**该方法会改变原数组**。\n\n```js\n// push、pop\nvar colors = ['red', 'blue', 'green']\nvar count = colors.push('black', 'brown') // 向末尾推入两项\nconsole.log(count) // 5\nvar item = colors.pop() // 取得最后一项\nconsole.log(item) // \"brown\"\n\n// shift、unshift\nvar colors = ['red', 'blue', 'green']\nvar count = colors.unshift('black', 'brown') // 向开头推入两项\nconsole.log(count) // 5\nvar item = colors.shift() // 取得第一项\nconsole.log(item) // \"red\"\n```\n\n- `Array.prototype.concat()`: `concat()` 方法用于合并两个或多个数组。**原始数组不会被改变**，而是返回一个新数组。\n- `Array.prototype.slice()`: `slice()` 方法返回一个新的数组对象，这一对象是一个由 `begin` 和 `end` 决定的原数组的浅拷贝（包括 `begin`，不包括 `end`）。**原始数组不会被改变**。\n- `Array.prototype.splice()`: `splice()` 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。**此方法会改变原数组**。\n  - **删除**: 可以删除任意数量的项，只需指定 2 个参数: 要删除的第一项的位置和要删除的项数。例如，`splice(0, 2)` 会删除数组中的前两项。\n  - **插入**: 可以向指定位置插入任意数量的项，只需要提供 3 个参数：起始位置、0（要删除的项数）和要插入的项。如果要插入多个项，可以再传入任意多个项。例如，`splice(2, 0, \"red\", \"green\")` 会从当前数组的位置 2 开始插入字符串 `\"red\"` 和 `green`。\n  - **替换**: 可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需要指定 3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项不必与删除的项数相等。例如，`splice(2, 1, \"red\", \"green\")` 会删除当前数组位置 2 的项，然后再从位置 2 开始插入字符串 `\"red\"` 和 `green`。\n\n```js\n// concat\nvar colors = ['red', 'blue', 'green']\nvar colors1 = ['black', 'brown']\nconsole.log(colors.concat(colors1)) // [\"red\", \"blue\", \"green\", \"black\", \"brown\"]\n// slice\n/**\n * 如果 `slice()` 方法的参数中有一个负数，则用数组长度加上该数来确定相应地位置。例如，在一个包含5项的数组上调用 `slice(-2, -1)` 与调用 `slice(3, 4)` 得到的结果相同。如果结束位置小于起始位置，则返回空数组。\n */\nvar colors = ['red', 'blue', 'green', 'black', 'brown']\nvar colors2 = colors.slice(1)\nvar colors3 = colors.slice(1, 4)\n\nconsole.log(colors2) // [\"blue\", \"green\", \"black\", \"brown\"]\nconsole.log(colors3) // [\"blue\", \"green\", \"black\"]\n\n/**\n * splice() 方法始终都会返回一个数组，该数组中包含从原始数组中删除的项（如果没有删除任何项，则返回一个空数组）\n */\nvar colors = ['red', 'green', 'blue']\nvar removed = colors.splice(0, 1) // 删除第一项\nconsole.log(colors) // [\"green\", \"blue\"]\nconsole.log(removed) // [\"red\"] 返回的数组中只包含一项\n\nremoved = colors.splice(1, 0, 'yellow', 'orange') // 从位置 1 开始插入两项\nconsole.log(colors) // [\"green\", \"red\", \"orange\", \"blue\"]\nconsole.log(removed) // 返回的是一个空数组\n\nremoved = colors.splice(1, 1, 'red', 'purple') // 删除一项，增加两项\nconsole.log(colors) // [\"green\", \"red\", \"purple\", \"orange\", \"blue\"]\nconsole.log(removed) // yellow，返回的数组中只包含一项\n```\n\n## ES5 方法\n\n- `Array.prototype.indexOf()`: `indexOf()` 方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。从数组的前面向后查找，从 `fromIndex` 处开始。\n- `Array。prototype.lastIndexOf)()`: `lastIndexOf()` 方法返回指定元素在数组中的最后一个索引，如果不存在则返回-1。从数组的后面向前查找，从 `fromIndex` 处开始。\n\n```js\nvar numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]\nconsole.log(numbers.indexOf(4)) // 3\nconsole.log(numbers.lastIndexOf(4)) // 5\n\nconsole.log(numbers.indexOf(4, 4)) // 5\nconsole.log(numbers.lastIndexOf(4, 4)) // 3\n\nvar person = { name: 'Nicholas' }\nvar people = [{ name: 'Nicholas' }]\nvar morePeople\n/**\n * indexOf、lastIndexOf 在比较第一个参数与数组中的每一项时，会使用全等操作符\n */\nconsole.log(people.indexOf(person)) // -1\nconsole.log(morePeople.indexOf(person)) // 0\n```\n\n- `Array.prototype.every()`: 对数组中的每一项运行给定函数，如果该函数对每一项都返回 `true`，则返回 `true`。\n- `Array.prototype.some()`: 对数组中的每一项运行给定函数，如果该函数对任一项返回 `true`，则返回 `true`。\n- `Array.prototype.filter()`: 对数组中的每一项运行给定函数，返回该函数会返回 `true` 的项组成的数组。\n- `Array.prototype.map()`: 对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。\n- `Array.prototype.forEach()`: 对数组中的每一项运行给定函数，这个方法没有返回值。\n\n```js\n// every\nvar numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]\nvar everyResult = numbers.every((item, index, array) => {\n  return item > 2\n})\nconsole.log(everyResult) // false\n// some\nvar someResult = numbers.some((item, index, array) => {\n  return item > 2\n})\nconsole.log(someResult) // true\n// filter\nvar numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]\nvar filterResult = numbers.filter((item, index, array) => {\n  return item > 2\n})\nconsole.log(filterResult) // [3, 4, 5, 4, 3]\n// map\nvar numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]\nvar mapResult = numbers.map((item, index, array) => {\n  return item * 2\n})\nconsole.log(mapResult) // [2, 4, 6, 8, 10, 8, 6, 4, 2]\n// forEach\nvar numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]\nnumbers.forEach((item, index, array) => {\n  // 执行某些操作\n})\n```\n\n- `Array.prototype.reduce()`\n- `Array.prototype.reduceRight()`\n\n`reduce()` 和 `reduceRight()` 方法都会迭代数组的所有项，然后构建一个最终返回的值。其中，`reduce()` 方法从数组的第一项开始，逐个遍历到最后。而 `reduceRight()` 则从数组的最后一项开始，向前遍历到第一项。\n\n这两个参数都接受两个参数: 一个在每一项上调用的函数和（可选的）作为归并基础的初始值。传给 `reduce` 和 `reduceRight` 的函数接受 4 个参数：前一个值、当前值、项的索引和数组对象。这个函数返回的任何值都会作为第一个参数自动传给下一项。第一次迭代发生在数组的第二项上，因此第一个参数是数组的第一项，第二个参数就是数组的第二项。\n\n```js\n// 数组求和\nvar values = [1, 2, 3, 4, 5]\nvar sum = values.reduce((prev, cur, index, array) => {\n  return prev + cur\n})\nconsole.log(sum)\n// 数组求乘积\nvar values = [1, 2, 3, 4, 5]\nvar pro = values.reduce((prev, cur, index, array) => {\n  return prev * cur\n})\nconsole.log(pro) // 120\n/**\n * 【累加对象数组里的值】\n * 要累加对象数组中包含的值，必须提供初始值，以便各个item正确通过你的函数。\n */\nvar values = [{ x: 1 }, { x: 2 }, { x: 3 }]\nvar sum = values.reduce((prev, cur) => {\n  return prev + cur.x\n}, 0)\nconsole.log(sum) // 6\n// 求最大值\nvar values = [1, 2, 3, 4, 5]\nvar max = values.reduce((prev, cur, index, array) => {\n  return prev > cur ? prev : cur\n})\nconsole.log(max) // 5\n// 计算数组中每个元素出现的次数\nvar names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice']\nvar countedNames = names.reduce((allNames, name) => {\n  if (allNames.indexOf(name) > -1) {\n    allNames[name]++\n  } else {\n    allNames[name] = 1\n  }\n  return allNames\n})\n// 按属性对object array分类\nvar people = [\n  { name: '张三', age: 26 },\n  { name: '李扬', age: 25 },\n  { name: '杨六', age: 25 },\n  { name: '王五', age: 26 },\n]\nvar groupBy = (objectArray, property) => {\n  return objectArray.reduce((acc, cur) => {\n    const key = cur[property]\n    if (!acc[key]) {\n      acc[key] = [cur]\n    } else {\n      acc[key].push(cur)\n    }\n    return acc\n  }, {})\n}\nvar groupedPeople = groupBy(people, 'age')\n```\n\n**reduce 高级用法:**\n\n> 搬砖工小王拿到了这样的格式：`var arr = [ {n ame: 'brick1'}, {name: 'brick2'}, {name: 'brick3'} ]`\n> 希望得到这样的数据格式：`brick1, brick2 & brick3`\n> 当然数组异常流: `[{name:'brick1'}]` 和空数组传入得到 `\"brick1\"` 和空\n\n```js\nvar array = [{ name: 'brick11' }, { name: 'brick12' }, { name: 'brick13' }]\nvar carryBricks = arr => {\n  return arr.reduce((prev, cur, index, array) => {\n    if (index === 0) {\n      return cur.name\n    } else if (index === array.length - 1) {\n      return prev + ' & ' + cur.name\n    } else {\n      return prev + ',' + cur.name\n    }\n  }, '')\n}\nconsole.log(carryBricks(array)) // \"brick11,brick12 & brick13\"\nconsole.log(carryBricks([{ name: 'brick1' }])) // \"brick1\"\nconsole.log(carryBricks([])) // \"\"\n```\n\n## lodash\n\n### 数组并集\n\n- `_.union([arrays])`: 创建一个按顺序排列的唯一值的数组。所有给定数组的元素值使用 SameValueZero 做等值比较。（ `arrays`（数组）的并集，按顺序返回，返回数组的元素是唯一的）\n- `_.unionBy([arrays], [iteratee=_.identity])`: 这个方法类似 `_.union` ，除了它接受一个 `iteratee` （迭代函数），调用每一个数组（`array`）的每个元素以产生唯一性计算的标准。`iteratee` 会传入一个参数：(`value`)。\n- `_.unionWith([arrays], [comparator])`: 这个方法类似 `_.union`， 除了它接受一个 `comparator` 调用比较 `arrays` 数组的每一个元素。 `comparator` 调用时会传入 2 个参数： (`arrVal`, `othVal`)。\n\n```js\nimport _ from 'lodash'\n// union\n_.union([2], [1, 2]) // [2, 1]\n\n// unionBy\n_.unionBy([2.1], [1.2, 2.3], Math.floor) // [2.1, 1.2]\n// The `_.property` iteratee shorthand.\n_.unionBy([{ x: 1 }], [{ x: 2 }, { x: 1 }], 'x') // [{ 'x': 1 }, { 'x': 2 }]\n\n// unionWith\nvar objects = [\n  { x: 1, y: 2 },\n  { x: 2, y: 1 },\n]\nvar others = [\n  { x: 1, y: 1 },\n  { x: 1, y: 2 },\n]\n_.unionWith(objects, others, _.isEqual) // [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n```\n\n### 数组交集\n\n- `_.intersection([arrays])`: 创建唯一值的数组，这个数组包含所有给定数组都包含的元素，使用 SameValueZero 进行相等性比较。（可以理解为给定数组的交集）\n- `_.intersectionBy([arrays], [iteratee=_.identity])`: 这个方法类似 `_.intersection`，区别是它接受一个 `iteratee` 调用每一个 arrays 的每个值以产生一个值，通过产生的值进行了比较。结果值是从第一数组中选择。iteratee 会传入一个参数：`(value)`。\n- `_.intersectionWith([arrays], [comparator])`: 这个方法类似 `_.intersection`，区别是它接受一个 `comparator` 调用比较 arrays 中的元素。结果值是从第一数组中选择。`comparator` 会传入两个参数：`(arrVal, othVal)`。\n\n```js\nimport _ from 'lodash'\n// intersection\n_.intersection([2, 1], [4, 2], [1, 2])) // [2]\n\n// intersectionBy\n_.intersectionBy([2.1, 1.2], [4.3, 2.4], Math.floor) // [2.1]\n// The `_.property` iteratee shorthand.\n_.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x') // => [{ 'x': 1 }]\n\n// intersectionWith\nvar objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n_.intersectionWith(objects, others, _.isEqual) // [{ 'x': 1, 'y': 2 }]\n```\n\n### 数组差集\n\n- `_.difference(array, [values])`: 创建一个具有唯一 array 值的数组，每个值不包含在其他给定的数组中。（即创建一个新数组，这个数组中的值，为第一个数字（array 参数）排除了给定数组中的值。）该方法使用 SameValueZero 做相等比较。结果值的顺序是由第一个数组中的顺序确定。\n- `_.differenceBy(array, [values], [iteratee=_.identity])`: 这个方法类似 \\_.difference ，除了它接受一个 iteratee （迭代器）， 调用 array 和 values 中的每个元素以产生比较的标准。 结果值是从第一数组中选择。iteratee 会调用一个参数：(value)。（首先使用迭代器分别迭代 array 和 values 中的每个元素，返回的值作为比较值）。\n- `_.differenceWith(array, [values], [comparator])`: 这个方法类似 `_.difference` ，除了它接受一个 `comparator` （比较器），它调用比较 `array`，`values` 中的元素。 结果值是从第一数组中选择。`comparator` 调用参数有两个：`(arrVal, othVal)`。\n\n```js\nimport _ from 'lodash'\n\n// difference\n_.difference([3, 2, 1], [4, 2]) // [3, 1]\n\n// differenceBy\n_.differenceBy([3.1, 2.2, 1.3], [4.4, 2.5], Math.floor) // [3.1, 1.3]\n// The `_.property` iteratee shorthand.\n_.differenceBy([{ x: 2 }, { x: 1 }], [{ x: 1 }], 'x') // [{ 'x': 2 }]\n\n// differenceWith\nvar objects = [\n  { x: 1, y: 2 },\n  { x: 2, y: 1 },\n]\n_.differenceWith(objects, [{ x: 1, y: 2 }], _.isEqual) // [{ 'x': 2, 'y': 1 }]\n```\n\n### 数组分组\n\n- `_.groupBy(collection, [iteratee=_.identity])`: 创建一个对象，`key` 是 `iteratee` 遍历 `collection`(集合) 中的每个元素返回的结果。 分组值的顺序是由他们出现在 `collection`(集合) 中的顺序确定的。每个键对应的值负责生成 `key` 的元素组成的数组。`iteratee` 调用 1 个参数： (`value`)。\n\n```js\nimport _ from 'lodash'\n\n_.groupBy([6.1, 4.2, 6.3], Math.floor) // { '4': [4.2], '6': [6.1, 6.3] }\n// The `_.property` iteratee shorthand.\n_.groupBy(['one', 'two', 'three'], 'length') // { '3': ['one', 'two'], '5': ['three'] }\nconst students = [\n  { name: '杨俊宁', province: '河南' },\n  { name: '宋光刚', province: '河南' },\n  { name: '谢晧曜', province: '江苏' },\n  { name: '李珂威', province: '河南' },\n]\n_.groupBy(students, 'province')\n// { '江苏': [{ name: '谢晧曜', province: '江苏' }], '河南': [{ name: '杨俊宁', province: '河南' }, { name: '宋光刚', province: '河南' },{ name: '李珂威', province: '河南' }] }\n```\n\n### 删除数组项\n\n#### 根据断言删除数组项\n\n- `remove`: 移除数组中 predicate（断言）返回为真值的所有元素，并返回移除元素组成的数组。predicate（断言） 会传入 3 个参数： (`value`, `index`, `array`)。\n\n```js\nimport _ from 'lodash'\n\nconst array = [1, 2, 3, 4]\nconst evens = _.remove(array, value => {\n  return value % 2 == 0\n})\nconsole.log(array) // => [1, 3]\nconsole.log(evens) // => [2, 4]\n\nconst students = [\n  { name: '杨俊宁', province: '河南' },\n  { name: '宋光刚', province: '河南' },\n  { name: '谢晧曜', province: '江苏' },\n  { name: '李珂威', province: '河南' },\n]\nconst removedStudent = _.remove(students, student => {\n  return student.province === '江苏'\n})\nconsole.log(students)\n// [{name: \"杨俊宁\", province: \"河南\"}, {name: \"宋光刚\", province: \"河南\"}, {name: \"李珂威\", province: \"河南\"}]\nconsole.log(removedStudent)\n// [{name: \"谢晧曜\", province: \"江苏\"}]\n```\n\n#### 根据给定值删除数组项\n\n- `_.pull(array, [values])`: 移除数组 array 中所有和给定值相等的元素，使用 SameValueZero 进行全等比较。\n- `_.pullAll(array, values)`: 这个方法类似 \\_.pull，区别是这个方法接收一个要移除值的数组。\n- `_.pullAllBy(array, values, [iteratee=_.identity])`: 这个方法类似于 `_.pullAll` ，区别是这个方法接受一个 `iteratee`（迭代函数） 调用 `array` 和 `values`的每个值以产生一个值，通过产生的值进行了比较。`iteratee` 会传入一个参数： (`value`)。\n- `_.pullAllWith(array, values, [comparator])`: 这个方法类似于 `_.pullAll`，区别是这个方法接受 `comparator` 调用 `array` 中的元素和 `values` 比较。`comparator` 会传入两个参数：(`arrVal`, `othVal`)。\n\n> pull 系列和 difference 系列不同之处在于 pull 系列方法会改变数组 array\n\n```js\nimport _ from 'lodash'\n\n// pull\nvar array = [1, 2, 3, 1, 2, 3]\n_.pull(array, 2, 3)\nconsole.log(array) // [1, 1]\n\n// pullAll\nvar array = [1, 2, 3, 1, 2, 3]\n_.pullAll(array, [2, 3])\nconsole.log(array) // [1, 1]\n\n// pullAllBy\nvar array = [{ x: 1 }, { x: 2 }, { x: 3 }, { x: 1 }]\n_.pullAllBy(array, [{ x: 2 }, { x: 3 }], 'x')\nconsole.log(array) // [{ 'x': 1 }, { 'x': 1 }]\n\n// pullAllWith\nvar array = [\n  { x: 1, y: 2 },\n  { x: 3, y: 4 },\n  { x: 5, y: 6 },\n]\n_.pullAllWith(array, [{ x: 3, y: 4 }], _.isEqual)\nconsole.log(array) // [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n```\n\n- `_.pullAt(array, [indexes])`: 根据索引 `indexes`，移除 `array` 中对应的元素，并返回被移除元素的数组。\n\n```js\nimport _ from 'lodash'\n\nvar array = [5, 10, 15, 20]\nvar evens = _.pullAt(array, 1, 3)\n\nconsole.log(array) // [5, 15]\nconsole.log(evens) // [10, 20]\n```\n\n- `_.without(array, [values])`: 创建一个剔除所有给定值的新数组，剔除值的时候，使用 SameValueZero 做相等比较。不像 `_.pull`, 这个方法会返回一个新数组。\n\n```js\nimport _ from 'lodash'\n\n_.without([2, 1, 2, 3], 1, 2) // [3]\n```\n\n### 数组去重\n\n- `_.uniq(array)`: 创建一个去重后的 array 数组副本。使用了 SameValueZero 做等值比较。只有第一次出现的元素才会被保留。\n- `_.uniqBy(array, [iteratee=_.identity])`: 这个方法类似 `_.uniq` ，除了它接受一个 `iteratee`（迭代函数），调用每一个数组（`array`）的每个元素以产生唯一性计算的标准。`iteratee` 调用时会传入一个参数：(`value`)。\n- `_.uniqWith(array, [comparator])`: 这个方法类似 `_.uniq`， 除了它接受一个 `comparator` 调用比较 `array` 数组的每一个元素。 `comparator` 调用时会传入 2 个参数：(`arrVal`, `othVal`)。\n\n```js\nimport _ from 'lodash'\n\n// uniq\n_.uniq([2, 1, 2]) // [2, 1]\n\n// uniqBy\n_.uniqBy([2.1, 1.2, 2.3], Math.floor) // [2.1, 1.2]\n// The `_.property` iteratee shorthand.\n_.uniqBy([{ x: 1 }, { x: 2 }, { x: 1 }], 'x') // [{ 'x': 1 }, { 'x': 2 }]\n\n// uniqWith\nvar objects = [\n  { x: 1, y: 2 },\n  { x: 2, y: 1 },\n  { x: 1, y: 2 },\n]\n_.uniqWith(objects, _.isEqual) // [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n```\n\n### 数组排序\n\n- `_.sortBy(collection, [iteratees=[_.identity]])`: 创建一个元素数组。 以 `iteratee` 处理的结果升序排序。 这个方法执行稳定排序，也就是说相同元素会保持原始排序。 `iteratees` 调用1个参数：(`value`)。可以使用 `Array.prototype.reverse` 方法倒序\n\n```js\nimport _ from 'lodash'\n\nvar users = [\n  { user: { name: 'fred' }, age: 48 },\n  { user: { name: 'barney' }, age: 36 },\n  { user: { name: 'fred' }, age: 40 },\n  { user: { name: 'barney' }, age: 34 },\n]\n\n// The `_.property` iteratee shorthand.\n_.sortBy(users, 'user.name')\n/**\n * [\n *  {age: 34, user: \"barney\"},\n *  {age: 36, user: \"barney\"},\n *  {age: 40, user: \"fred\"},\n *  {age: 48, user: \"fred\"}\n * ]\n */\n```\n\n### 数组降维\n\n- `_.flatten(array)`: 减少一级 `array` 嵌套深度。\n- `_.flattenDeep(array)`: 将 `array` 递归为一维数组。\n- `_.flattenDepth(array, [depth=1])`: 根据 `depth` 递归减少 `array` 的嵌套层级\n\n```js\nimport _ from 'lodash'\n\n// flatten\n_.flatten([1, [2, [3, [4]], 5]]) // [1, 2, [3, [4]], 5]\n\n// flattenDeep\n_.flattenDeep([1, [2, [3, [4]], 5]]) // [1, 2, 3, 4, 5]\n\n// flattenDepth\nvar array = [1, [2, [3, [4]], 5]]\n_.flattenDepth(array, 1) // [1, 2, [3, [4]], 5]\n_.flattenDepth(array, 2) // [1, 2, 3, [4], 5]\n_.flattenDepth(array, 3) // [1, 2, 3, 4, 5]\n```\n\n### 获取部分元素\n\n- `_.initial(array)`: 获取数组 `array` 中除了最后一个元素之外的所有元素（去除数组array中的最后一个元素）。\n- `_.tail(array)`: 获取除了 `array` 数组第一个元素以外的全部元素。\n",
        "slug": "JavaScript Array 完全指南",
        "published": 1,
        "updated": "2020-02-05T06:46:24.130Z",
        "comments": 1,
        "layout": "post",
        "photos": [],
        "link": "",
        "_id": "ck68yj5xa00109zey4rw016oq",
        "content": "<p>ECMAScript 数组的每一项可以保存任何类型的数据；而且大小是可以动态调整的，即可以随着数据的添加自动增长以容纳新增数据。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"创建数组\"><a href=\"#创建数组\" class=\"headerlink\" title=\"创建数组\"></a>创建数组</h2><h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>() <span class=\"comment\">// []</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">colors = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">10</span>) <span class=\"comment\">// [empty × 10]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">colors = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"string\">'red'</span>, <span class=\"string\">'blue'</span>, <span class=\"string\">'green'</span>) <span class=\"comment\">// [\"red\", \"blue\", \"green\"]</span></span></pre></td></tr></table></figure>\n\n<h3 id=\"数组字面量表示法\"><a href=\"#数组字面量表示法\" class=\"headerlink\" title=\"数组字面量表示法\"></a>数组字面量表示法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [] <span class=\"comment\">// 创建一个空数组</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [<span class=\"string\">'red'</span>, <span class=\"string\">'blue'</span>, <span class=\"string\">'green'</span>] <span class=\"comment\">// 创建一个包含 3 个字符串的数组</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>] <span class=\"comment\">// 不要这样！这样会创建一个包含2或3项的数组</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> options = [, , , , ,] <span class=\"comment\">// 不要这样！这样会创建一个包含5或6项的数组</span></span></pre></td></tr></table></figure>\n\n<h2 id=\"读取和设置数组的值\"><a href=\"#读取和设置数组的值\" class=\"headerlink\" title=\"读取和设置数组的值\"></a>读取和设置数组的值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [<span class=\"string\">'red'</span>, <span class=\"string\">'blue'</span>, <span class=\"string\">'green'</span>] <span class=\"comment\">// 创建一个包含3个字符串的数组</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">alert(colors[<span class=\"number\">0</span>]) <span class=\"comment\">// 显示第1项</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">colors[<span class=\"number\">2</span>] = <span class=\"string\">'black'</span> <span class=\"comment\">// 修改第3项</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">colors[<span class=\"number\">3</span>] = <span class=\"string\">'brown'</span> <span class=\"comment\">// 新增第4项</span></span></pre></td></tr></table></figure>\n\n<h2 id=\"length-属性\"><a href=\"#length-属性\" class=\"headerlink\" title=\"length 属性\"></a>length 属性</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [<span class=\"string\">'red'</span>, <span class=\"string\">'blue'</span>, <span class=\"string\">'green'</span>] <span class=\"comment\">// 创建一个包含3个字符串的数组</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">alert(colors.length) <span class=\"comment\">// 显示数组长度</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">colors[colors.length] = <span class=\"string\">'black'</span> <span class=\"comment\">// 在位置3添加一种颜色</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">colors[colors.length] = <span class=\"string\">'brown'</span> <span class=\"comment\">// 在位置4再添加一种颜色</span></span></pre></td></tr></table></figure>\n\n<h2 id=\"检测数组\"><a href=\"#检测数组\" class=\"headerlink\" title=\"检测数组\"></a>检测数组</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = []</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(array)) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 对数组执行某些操作</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<h3 id=\"Array-isArray-Polyfill\"><a href=\"#Array-isArray-Polyfill\" class=\"headerlink\" title=\"Array.isArray Polyfill\"></a>Array.isArray Polyfill</h3><p>如果是实际项目可以配置 <code>@babel/polyfill</code> 或者 <code>transform-runtime</code>，这不在本文的讨论范围</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.isArray) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">Array</span>.isArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(arg) === <span class=\"string\">'[object Array]'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<h2 id=\"ES1-方法\"><a href=\"#ES1-方法\" class=\"headerlink\" title=\"ES1 方法\"></a>ES1 方法</h2><ul>\n<li><code>Array.prototype.join</code>: <code>join()</code> 方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符。<strong>原始数组不会被改变</strong>。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// join</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [<span class=\"string\">'red'</span>, <span class=\"string\">'blue'</span>, <span class=\"string\">'green'</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(colors.join()) <span class=\"comment\">// \"red,blue,green\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(colors.join(<span class=\"string\">'|'</span>)) <span class=\"comment\">// \"red|blue|green\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(colors.join(<span class=\"string\">'|'</span>)) <span class=\"comment\">// \"red|blue|green\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'red|blue|green'</span>.split(<span class=\"string\">'|'</span>)) <span class=\"comment\">// [\"red\", \"blue\", \"green\"]</span></span></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Array.prototype.reverse()</code>: <code>reverse()</code> 方法将数组中元素的位置颠倒，并返回该数组。<strong>该方法会改变原数组</strong>。</li>\n<li><code>Array.prototype.sort()</code>: <code>sort()</code> 方法用原地算法对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的 UTF-16 代码单元值序列时构建的; sort 方法接收一个比较函数作为参数，如果第一参数应该位于第二个参数之前则返回负数，如果第一个参数应该位于第二个之后则返回一个正数。<strong>该方法会改变原数组</strong>。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// reverse</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(colors.reverse()) <span class=\"comment\">// [5, 4, 3, 2, 1]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sort</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>, <span class=\"number\">20</span>, <span class=\"number\">5</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span>(<span class=\"params\">arr, asc = true</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> arr.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (asc) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> a - b</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> b - a</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(sort(colors)) <span class=\"comment\">// [1, 3, 5, 10, 20]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(sort(colors, <span class=\"literal\">false</span>)) <span class=\"comment\">// [20, 10, 5, 3, 1]</span></span></pre></td></tr></table></figure>\n\n<h2 id=\"ES3-方法\"><a href=\"#ES3-方法\" class=\"headerlink\" title=\"ES3 方法\"></a>ES3 方法</h2><ul>\n<li><code>Array.prototype.push</code>: <code>push()</code> 方法可以接受任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度。<strong>该方法会改变原数组</strong>。</li>\n<li><code>Array.prototype.pop</code>: <code>pop()</code> 方法从数组末尾移除最后一项，减少数组的 <code>length</code> 值，并返回该项。<strong>该方法会改变原数组</strong>。</li>\n<li><code>Array.prototype.shift</code>: <code>shift()</code> 方法能够移除数组中的第一项并返回该项, 同时将数组长度减 1。<strong>该方法会改变原数组</strong>。</li>\n<li><code>Array.prototype.unshift</code>: <code>unshift()</code> 方法能够在数组前端添加任意个项，并返回新数组的长度。<strong>该方法会改变原数组</strong>。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// push、pop</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [<span class=\"string\">'red'</span>, <span class=\"string\">'blue'</span>, <span class=\"string\">'green'</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = colors.push(<span class=\"string\">'black'</span>, <span class=\"string\">'brown'</span>) <span class=\"comment\">// 向末尾推入两项</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(count) <span class=\"comment\">// 5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> item = colors.pop() <span class=\"comment\">// 取得最后一项</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(item) <span class=\"comment\">// \"brown\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// shift、unshift</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [<span class=\"string\">'red'</span>, <span class=\"string\">'blue'</span>, <span class=\"string\">'green'</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = colors.unshift(<span class=\"string\">'black'</span>, <span class=\"string\">'brown'</span>) <span class=\"comment\">// 向开头推入两项</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(count) <span class=\"comment\">// 5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> item = colors.shift() <span class=\"comment\">// 取得第一项</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(item) <span class=\"comment\">// \"red\"</span></span></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Array.prototype.concat()</code>: <code>concat()</code> 方法用于合并两个或多个数组。<strong>原始数组不会被改变</strong>，而是返回一个新数组。</li>\n<li><code>Array.prototype.slice()</code>: <code>slice()</code> 方法返回一个新的数组对象，这一对象是一个由 <code>begin</code> 和 <code>end</code> 决定的原数组的浅拷贝（包括 <code>begin</code>，不包括 <code>end</code>）。<strong>原始数组不会被改变</strong>。</li>\n<li><code>Array.prototype.splice()</code>: <code>splice()</code> 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。<strong>此方法会改变原数组</strong>。<ul>\n<li><strong>删除</strong>: 可以删除任意数量的项，只需指定 2 个参数: 要删除的第一项的位置和要删除的项数。例如，<code>splice(0, 2)</code> 会删除数组中的前两项。</li>\n<li><strong>插入</strong>: 可以向指定位置插入任意数量的项，只需要提供 3 个参数：起始位置、0（要删除的项数）和要插入的项。如果要插入多个项，可以再传入任意多个项。例如，<code>splice(2, 0, &quot;red&quot;, &quot;green&quot;)</code> 会从当前数组的位置 2 开始插入字符串 <code>&quot;red&quot;</code> 和 <code>green</code>。</li>\n<li><strong>替换</strong>: 可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需要指定 3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项不必与删除的项数相等。例如，<code>splice(2, 1, &quot;red&quot;, &quot;green&quot;)</code> 会删除当前数组位置 2 的项，然后再从位置 2 开始插入字符串 <code>&quot;red&quot;</code> 和 <code>green</code>。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// concat</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [<span class=\"string\">'red'</span>, <span class=\"string\">'blue'</span>, <span class=\"string\">'green'</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors1 = [<span class=\"string\">'black'</span>, <span class=\"string\">'brown'</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(colors.concat(colors1)) <span class=\"comment\">// [\"red\", \"blue\", \"green\", \"black\", \"brown\"]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// slice</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * 如果 `slice()` 方法的参数中有一个负数，则用数组长度加上该数来确定相应地位置。例如，在一个包含5项的数组上调用 `slice(-2, -1)` 与调用 `slice(3, 4)` 得到的结果相同。如果结束位置小于起始位置，则返回空数组。</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [<span class=\"string\">'red'</span>, <span class=\"string\">'blue'</span>, <span class=\"string\">'green'</span>, <span class=\"string\">'black'</span>, <span class=\"string\">'brown'</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors2 = colors.slice(<span class=\"number\">1</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors3 = colors.slice(<span class=\"number\">1</span>, <span class=\"number\">4</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(colors2) <span class=\"comment\">// [\"blue\", \"green\", \"black\", \"brown\"]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(colors3) <span class=\"comment\">// [\"blue\", \"green\", \"black\"]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * splice() 方法始终都会返回一个数组，该数组中包含从原始数组中删除的项（如果没有删除任何项，则返回一个空数组）</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [<span class=\"string\">'red'</span>, <span class=\"string\">'green'</span>, <span class=\"string\">'blue'</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> removed = colors.splice(<span class=\"number\">0</span>, <span class=\"number\">1</span>) <span class=\"comment\">// 删除第一项</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(colors) <span class=\"comment\">// [\"green\", \"blue\"]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(removed) <span class=\"comment\">// [\"red\"] 返回的数组中只包含一项</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">removed = colors.splice(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"string\">'yellow'</span>, <span class=\"string\">'orange'</span>) <span class=\"comment\">// 从位置 1 开始插入两项</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(colors) <span class=\"comment\">// [\"green\", \"red\", \"orange\", \"blue\"]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(removed) <span class=\"comment\">// 返回的是一个空数组</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">removed = colors.splice(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"string\">'red'</span>, <span class=\"string\">'purple'</span>) <span class=\"comment\">// 删除一项，增加两项</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(colors) <span class=\"comment\">// [\"green\", \"red\", \"purple\", \"orange\", \"blue\"]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(removed) <span class=\"comment\">// yellow，返回的数组中只包含一项</span></span></pre></td></tr></table></figure>\n\n<h2 id=\"ES5-方法\"><a href=\"#ES5-方法\" class=\"headerlink\" title=\"ES5 方法\"></a>ES5 方法</h2><ul>\n<li><code>Array.prototype.indexOf()</code>: <code>indexOf()</code> 方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。从数组的前面向后查找，从 <code>fromIndex</code> 处开始。</li>\n<li><code>Array。prototype.lastIndexOf)()</code>: <code>lastIndexOf()</code> 方法返回指定元素在数组中的最后一个索引，如果不存在则返回-1。从数组的后面向前查找，从 <code>fromIndex</code> 处开始。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(numbers.indexOf(<span class=\"number\">4</span>)) <span class=\"comment\">// 3</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(numbers.lastIndexOf(<span class=\"number\">4</span>)) <span class=\"comment\">// 5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(numbers.indexOf(<span class=\"number\">4</span>, <span class=\"number\">4</span>)) <span class=\"comment\">// 5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(numbers.lastIndexOf(<span class=\"number\">4</span>, <span class=\"number\">4</span>)) <span class=\"comment\">// 3</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Nicholas'</span> &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> people = [&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Nicholas'</span> &#125;]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> morePeople</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * indexOf、lastIndexOf 在比较第一个参数与数组中的每一项时，会使用全等操作符</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(people.indexOf(person)) <span class=\"comment\">// -1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(morePeople.indexOf(person)) <span class=\"comment\">// 0</span></span></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Array.prototype.every()</code>: 对数组中的每一项运行给定函数，如果该函数对每一项都返回 <code>true</code>，则返回 <code>true</code>。</li>\n<li><code>Array.prototype.some()</code>: 对数组中的每一项运行给定函数，如果该函数对任一项返回 <code>true</code>，则返回 <code>true</code>。</li>\n<li><code>Array.prototype.filter()</code>: 对数组中的每一项运行给定函数，返回该函数会返回 <code>true</code> 的项组成的数组。</li>\n<li><code>Array.prototype.map()</code>: 对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。</li>\n<li><code>Array.prototype.forEach()</code>: 对数组中的每一项运行给定函数，这个方法没有返回值。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// every</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> everyResult = numbers.every(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> item &gt; <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(everyResult) <span class=\"comment\">// false</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// some</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someResult = numbers.some(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> item &gt; <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(someResult) <span class=\"comment\">// true</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// filter</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> filterResult = numbers.filter(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> item &gt; <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(filterResult) <span class=\"comment\">// [3, 4, 5, 4, 3]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// map</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mapResult = numbers.map(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> item * <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(mapResult) <span class=\"comment\">// [2, 4, 6, 8, 10, 8, 6, 4, 2]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// forEach</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">numbers.forEach(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 执行某些操作</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Array.prototype.reduce()</code></li>\n<li><code>Array.prototype.reduceRight()</code></li>\n</ul>\n<p><code>reduce()</code> 和 <code>reduceRight()</code> 方法都会迭代数组的所有项，然后构建一个最终返回的值。其中，<code>reduce()</code> 方法从数组的第一项开始，逐个遍历到最后。而 <code>reduceRight()</code> 则从数组的最后一项开始，向前遍历到第一项。</p>\n<p>这两个参数都接受两个参数: 一个在每一项上调用的函数和（可选的）作为归并基础的初始值。传给 <code>reduce</code> 和 <code>reduceRight</code> 的函数接受 4 个参数：前一个值、当前值、项的索引和数组对象。这个函数返回的任何值都会作为第一个参数自动传给下一项。第一次迭代发生在数组的第二项上，因此第一个参数是数组的第一项，第二个参数就是数组的第二项。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组求和</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum = values.reduce(<span class=\"function\">(<span class=\"params\">prev, cur, index, array</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> prev + cur</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(sum)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组求乘积</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pro = values.reduce(<span class=\"function\">(<span class=\"params\">prev, cur, index, array</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> prev * cur</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(pro) <span class=\"comment\">// 120</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * 【累加对象数组里的值】</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * 要累加对象数组中包含的值，必须提供初始值，以便各个item正确通过你的函数。</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [&#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">2</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span> &#125;]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum = values.reduce(<span class=\"function\">(<span class=\"params\">prev, cur</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> prev + cur.x</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(sum) <span class=\"comment\">// 6</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 求最大值</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> max = values.reduce(<span class=\"function\">(<span class=\"params\">prev, cur, index, array</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> prev &gt; cur ? prev : cur</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(max) <span class=\"comment\">// 5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 计算数组中每个元素出现的次数</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> names = [<span class=\"string\">'Alice'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tiff'</span>, <span class=\"string\">'Bruce'</span>, <span class=\"string\">'Alice'</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> countedNames = names.reduce(<span class=\"function\">(<span class=\"params\">allNames, name</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> (allNames.indexOf(name) &gt; <span class=\"number\">-1</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">    allNames[name]++</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">    allNames[name] = <span class=\"number\">1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> allNames</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 按属性对object array分类</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> people = [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'张三'</span>, <span class=\"attr\">age</span>: <span class=\"number\">26</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'李扬'</span>, <span class=\"attr\">age</span>: <span class=\"number\">25</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'杨六'</span>, <span class=\"attr\">age</span>: <span class=\"number\">25</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'王五'</span>, <span class=\"attr\">age</span>: <span class=\"number\">26</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> groupBy = <span class=\"function\">(<span class=\"params\">objectArray, property</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> objectArray.reduce(<span class=\"function\">(<span class=\"params\">acc, cur</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> key = cur[property]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (!acc[key]) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">      acc[key] = [cur]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">      acc[key].push(cur)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> acc</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;, &#123;&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> groupedPeople = groupBy(people, <span class=\"string\">'age'</span>)</span></pre></td></tr></table></figure>\n\n<p><strong>reduce 高级用法:</strong></p>\n<blockquote>\n<p>搬砖工小王拿到了这样的格式：<code>var arr = [ {n ame: &#39;brick1&#39;}, {name: &#39;brick2&#39;}, {name: &#39;brick3&#39;} ]</code><br>希望得到这样的数据格式：<code>brick1, brick2 &amp; brick3</code><br>当然数组异常流: <code>[{name:&#39;brick1&#39;}]</code> 和空数组传入得到 <code>&quot;brick1&quot;</code> 和空</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [&#123; <span class=\"attr\">name</span>: <span class=\"string\">'brick11'</span> &#125;, &#123; <span class=\"attr\">name</span>: <span class=\"string\">'brick12'</span> &#125;, &#123; <span class=\"attr\">name</span>: <span class=\"string\">'brick13'</span> &#125;]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> carryBricks = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\">(<span class=\"params\">prev, cur, index, array</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (index === <span class=\"number\">0</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> cur.name</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index === array.length - <span class=\"number\">1</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> prev + <span class=\"string\">' &amp; '</span> + cur.name</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> prev + <span class=\"string\">','</span> + cur.name</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;, <span class=\"string\">''</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(carryBricks(array)) <span class=\"comment\">// \"brick11,brick12 &amp; brick13\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(carryBricks([&#123; <span class=\"attr\">name</span>: <span class=\"string\">'brick1'</span> &#125;])) <span class=\"comment\">// \"brick1\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(carryBricks([])) <span class=\"comment\">// \"\"</span></span></pre></td></tr></table></figure>\n\n<h2 id=\"lodash\"><a href=\"#lodash\" class=\"headerlink\" title=\"lodash\"></a>lodash</h2><h3 id=\"数组并集\"><a href=\"#数组并集\" class=\"headerlink\" title=\"数组并集\"></a>数组并集</h3><ul>\n<li><code>_.union([arrays])</code>: 创建一个按顺序排列的唯一值的数组。所有给定数组的元素值使用 SameValueZero 做等值比较。（ <code>arrays</code>（数组）的并集，按顺序返回，返回数组的元素是唯一的）</li>\n<li><code>_.unionBy([arrays], [iteratee=_.identity])</code>: 这个方法类似 <code>_.union</code> ，除了它接受一个 <code>iteratee</code> （迭代函数），调用每一个数组（<code>array</code>）的每个元素以产生唯一性计算的标准。<code>iteratee</code> 会传入一个参数：(<code>value</code>)。</li>\n<li><code>_.unionWith([arrays], [comparator])</code>: 这个方法类似 <code>_.union</code>， 除了它接受一个 <code>comparator</code> 调用比较 <code>arrays</code> 数组的每一个元素。 <code>comparator</code> 调用时会传入 2 个参数： (<code>arrVal</code>, <code>othVal</code>)。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// union</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.union([<span class=\"number\">2</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>]) <span class=\"comment\">// [2, 1]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// unionBy</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.unionBy([<span class=\"number\">2.1</span>], [<span class=\"number\">1.2</span>, <span class=\"number\">2.3</span>], <span class=\"built_in\">Math</span>.floor) <span class=\"comment\">// [2.1, 1.2]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The `_.property` iteratee shorthand.</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.unionBy([&#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;], [&#123; <span class=\"attr\">x</span>: <span class=\"number\">2</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;], <span class=\"string\">'x'</span>) <span class=\"comment\">// [&#123; 'x': 1 &#125;, &#123; 'x': 2 &#125;]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// unionWith</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> objects = [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">x</span>: <span class=\"number\">2</span>, <span class=\"attr\">y</span>: <span class=\"number\">1</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> others = [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">1</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.unionWith(objects, others, _.isEqual) <span class=\"comment\">// [&#123; 'x': 1, 'y': 2 &#125;, &#123; 'x': 2, 'y': 1 &#125;, &#123; 'x': 1, 'y': 1 &#125;]</span></span></pre></td></tr></table></figure>\n\n<h3 id=\"数组交集\"><a href=\"#数组交集\" class=\"headerlink\" title=\"数组交集\"></a>数组交集</h3><ul>\n<li><code>_.intersection([arrays])</code>: 创建唯一值的数组，这个数组包含所有给定数组都包含的元素，使用 SameValueZero 进行相等性比较。（可以理解为给定数组的交集）</li>\n<li><code>_.intersectionBy([arrays], [iteratee=_.identity])</code>: 这个方法类似 <code>_.intersection</code>，区别是它接受一个 <code>iteratee</code> 调用每一个 arrays 的每个值以产生一个值，通过产生的值进行了比较。结果值是从第一数组中选择。iteratee 会传入一个参数：<code>(value)</code>。</li>\n<li><code>_.intersectionWith([arrays], [comparator])</code>: 这个方法类似 <code>_.intersection</code>，区别是它接受一个 <code>comparator</code> 调用比较 arrays 中的元素。结果值是从第一数组中选择。<code>comparator</code> 会传入两个参数：<code>(arrVal, othVal)</code>。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// intersection</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.intersection([<span class=\"number\">2</span>, <span class=\"number\">1</span>], [<span class=\"number\">4</span>, <span class=\"number\">2</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>])) <span class=\"comment\">// [2]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// intersectionBy</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.intersectionBy([<span class=\"number\">2.1</span>, <span class=\"number\">1.2</span>], [<span class=\"number\">4.3</span>, <span class=\"number\">2.4</span>], <span class=\"built_in\">Math</span>.floor) <span class=\"comment\">// [2.1]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The `_.property` iteratee shorthand.</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.intersectionBy([&#123; <span class=\"string\">'x'</span>: <span class=\"number\">1</span> &#125;], [&#123; <span class=\"string\">'x'</span>: <span class=\"number\">2</span> &#125;, &#123; <span class=\"string\">'x'</span>: <span class=\"number\">1</span> &#125;], <span class=\"string\">'x'</span>) <span class=\"comment\">// =&gt; [&#123; 'x': 1 &#125;]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// intersectionWith</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> objects = [&#123; <span class=\"string\">'x'</span>: <span class=\"number\">1</span>, <span class=\"string\">'y'</span>: <span class=\"number\">2</span> &#125;, &#123; <span class=\"string\">'x'</span>: <span class=\"number\">2</span>, <span class=\"string\">'y'</span>: <span class=\"number\">1</span> &#125;];</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> others = [&#123; <span class=\"string\">'x'</span>: <span class=\"number\">1</span>, <span class=\"string\">'y'</span>: <span class=\"number\">1</span> &#125;, &#123; <span class=\"string\">'x'</span>: <span class=\"number\">1</span>, <span class=\"string\">'y'</span>: <span class=\"number\">2</span> &#125;];</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.intersectionWith(objects, others, _.isEqual) <span class=\"comment\">// [&#123; 'x': 1, 'y': 2 &#125;]</span></span></pre></td></tr></table></figure>\n\n<h3 id=\"数组差集\"><a href=\"#数组差集\" class=\"headerlink\" title=\"数组差集\"></a>数组差集</h3><ul>\n<li><code>_.difference(array, [values])</code>: 创建一个具有唯一 array 值的数组，每个值不包含在其他给定的数组中。（即创建一个新数组，这个数组中的值，为第一个数字（array 参数）排除了给定数组中的值。）该方法使用 SameValueZero 做相等比较。结果值的顺序是由第一个数组中的顺序确定。</li>\n<li><code>_.differenceBy(array, [values], [iteratee=_.identity])</code>: 这个方法类似 _.difference ，除了它接受一个 iteratee （迭代器）， 调用 array 和 values 中的每个元素以产生比较的标准。 结果值是从第一数组中选择。iteratee 会调用一个参数：(value)。（首先使用迭代器分别迭代 array 和 values 中的每个元素，返回的值作为比较值）。</li>\n<li><code>_.differenceWith(array, [values], [comparator])</code>: 这个方法类似 <code>_.difference</code> ，除了它接受一个 <code>comparator</code> （比较器），它调用比较 <code>array</code>，<code>values</code> 中的元素。 结果值是从第一数组中选择。<code>comparator</code> 调用参数有两个：<code>(arrVal, othVal)</code>。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// difference</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.difference([<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>], [<span class=\"number\">4</span>, <span class=\"number\">2</span>]) <span class=\"comment\">// [3, 1]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// differenceBy</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.differenceBy([<span class=\"number\">3.1</span>, <span class=\"number\">2.2</span>, <span class=\"number\">1.3</span>], [<span class=\"number\">4.4</span>, <span class=\"number\">2.5</span>], <span class=\"built_in\">Math</span>.floor) <span class=\"comment\">// [3.1, 1.3]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The `_.property` iteratee shorthand.</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.differenceBy([&#123; <span class=\"attr\">x</span>: <span class=\"number\">2</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;], [&#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;], <span class=\"string\">'x'</span>) <span class=\"comment\">// [&#123; 'x': 2 &#125;]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// differenceWith</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> objects = [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">x</span>: <span class=\"number\">2</span>, <span class=\"attr\">y</span>: <span class=\"number\">1</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.differenceWith(objects, [&#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span> &#125;], _.isEqual) <span class=\"comment\">// [&#123; 'x': 2, 'y': 1 &#125;]</span></span></pre></td></tr></table></figure>\n\n<h3 id=\"数组分组\"><a href=\"#数组分组\" class=\"headerlink\" title=\"数组分组\"></a>数组分组</h3><ul>\n<li><code>_.groupBy(collection, [iteratee=_.identity])</code>: 创建一个对象，<code>key</code> 是 <code>iteratee</code> 遍历 <code>collection</code>(集合) 中的每个元素返回的结果。 分组值的顺序是由他们出现在 <code>collection</code>(集合) 中的顺序确定的。每个键对应的值负责生成 <code>key</code> 的元素组成的数组。<code>iteratee</code> 调用 1 个参数： (<code>value</code>)。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.groupBy([<span class=\"number\">6.1</span>, <span class=\"number\">4.2</span>, <span class=\"number\">6.3</span>], <span class=\"built_in\">Math</span>.floor) <span class=\"comment\">// &#123; '4': [4.2], '6': [6.1, 6.3] &#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The `_.property` iteratee shorthand.</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.groupBy([<span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>], <span class=\"string\">'length'</span>) <span class=\"comment\">// &#123; '3': ['one', 'two'], '5': ['three'] &#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> students = [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'杨俊宁'</span>, <span class=\"attr\">province</span>: <span class=\"string\">'河南'</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'宋光刚'</span>, <span class=\"attr\">province</span>: <span class=\"string\">'河南'</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'谢晧曜'</span>, <span class=\"attr\">province</span>: <span class=\"string\">'江苏'</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'李珂威'</span>, <span class=\"attr\">province</span>: <span class=\"string\">'河南'</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.groupBy(students, <span class=\"string\">'province'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123; '江苏': [&#123; name: '谢晧曜', province: '江苏' &#125;], '河南': [&#123; name: '杨俊宁', province: '河南' &#125;, &#123; name: '宋光刚', province: '河南' &#125;,&#123; name: '李珂威', province: '河南' &#125;] &#125;</span></span></pre></td></tr></table></figure>\n\n<h3 id=\"删除数组项\"><a href=\"#删除数组项\" class=\"headerlink\" title=\"删除数组项\"></a>删除数组项</h3><h4 id=\"根据断言删除数组项\"><a href=\"#根据断言删除数组项\" class=\"headerlink\" title=\"根据断言删除数组项\"></a>根据断言删除数组项</h4><ul>\n<li><code>remove</code>: 移除数组中 predicate（断言）返回为真值的所有元素，并返回移除元素组成的数组。predicate（断言） 会传入 3 个参数： (<code>value</code>, <code>index</code>, <code>array</code>)。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> evens = _.remove(array, value =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> value % <span class=\"number\">2</span> == <span class=\"number\">0</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(array) <span class=\"comment\">// =&gt; [1, 3]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(evens) <span class=\"comment\">// =&gt; [2, 4]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> students = [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'杨俊宁'</span>, <span class=\"attr\">province</span>: <span class=\"string\">'河南'</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'宋光刚'</span>, <span class=\"attr\">province</span>: <span class=\"string\">'河南'</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'谢晧曜'</span>, <span class=\"attr\">province</span>: <span class=\"string\">'江苏'</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'李珂威'</span>, <span class=\"attr\">province</span>: <span class=\"string\">'河南'</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> removedStudent = _.remove(students, student =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> student.province === <span class=\"string\">'江苏'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(students)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [&#123;name: \"杨俊宁\", province: \"河南\"&#125;, &#123;name: \"宋光刚\", province: \"河南\"&#125;, &#123;name: \"李珂威\", province: \"河南\"&#125;]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(removedStudent)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [&#123;name: \"谢晧曜\", province: \"江苏\"&#125;]</span></span></pre></td></tr></table></figure>\n\n<h4 id=\"根据给定值删除数组项\"><a href=\"#根据给定值删除数组项\" class=\"headerlink\" title=\"根据给定值删除数组项\"></a>根据给定值删除数组项</h4><ul>\n<li><code>_.pull(array, [values])</code>: 移除数组 array 中所有和给定值相等的元素，使用 SameValueZero 进行全等比较。</li>\n<li><code>_.pullAll(array, values)</code>: 这个方法类似 _.pull，区别是这个方法接收一个要移除值的数组。</li>\n<li><code>_.pullAllBy(array, values, [iteratee=_.identity])</code>: 这个方法类似于 <code>_.pullAll</code> ，区别是这个方法接受一个 <code>iteratee</code>（迭代函数） 调用 <code>array</code> 和 <code>values</code>的每个值以产生一个值，通过产生的值进行了比较。<code>iteratee</code> 会传入一个参数： (<code>value</code>)。</li>\n<li><code>_.pullAllWith(array, values, [comparator])</code>: 这个方法类似于 <code>_.pullAll</code>，区别是这个方法接受 <code>comparator</code> 调用 <code>array</code> 中的元素和 <code>values</code> 比较。<code>comparator</code> 会传入两个参数：(<code>arrVal</code>, <code>othVal</code>)。</li>\n</ul>\n<blockquote>\n<p>pull 系列和 difference 系列不同之处在于 pull 系列方法会改变数组 array</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// pull</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.pull(array, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(array) <span class=\"comment\">// [1, 1]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// pullAll</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.pullAll(array, [<span class=\"number\">2</span>, <span class=\"number\">3</span>])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(array) <span class=\"comment\">// [1, 1]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// pullAllBy</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [&#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">2</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.pullAllBy(array, [&#123; <span class=\"attr\">x</span>: <span class=\"number\">2</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span> &#125;], <span class=\"string\">'x'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(array) <span class=\"comment\">// [&#123; 'x': 1 &#125;, &#123; 'x': 1 &#125;]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// pullAllWith</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">4</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">x</span>: <span class=\"number\">5</span>, <span class=\"attr\">y</span>: <span class=\"number\">6</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.pullAllWith(array, [&#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">4</span> &#125;], _.isEqual)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(array) <span class=\"comment\">// [&#123; 'x': 1, 'y': 2 &#125;, &#123; 'x': 5, 'y': 6 &#125;]</span></span></pre></td></tr></table></figure>\n\n<ul>\n<li><code>_.pullAt(array, [indexes])</code>: 根据索引 <code>indexes</code>，移除 <code>array</code> 中对应的元素，并返回被移除元素的数组。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">20</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> evens = _.pullAt(array, <span class=\"number\">1</span>, <span class=\"number\">3</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(array) <span class=\"comment\">// [5, 15]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(evens) <span class=\"comment\">// [10, 20]</span></span></pre></td></tr></table></figure>\n\n<ul>\n<li><code>_.without(array, [values])</code>: 创建一个剔除所有给定值的新数组，剔除值的时候，使用 SameValueZero 做相等比较。不像 <code>_.pull</code>, 这个方法会返回一个新数组。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.without([<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// [3]</span></span></pre></td></tr></table></figure>\n\n<h3 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h3><ul>\n<li><code>_.uniq(array)</code>: 创建一个去重后的 array 数组副本。使用了 SameValueZero 做等值比较。只有第一次出现的元素才会被保留。</li>\n<li><code>_.uniqBy(array, [iteratee=_.identity])</code>: 这个方法类似 <code>_.uniq</code> ，除了它接受一个 <code>iteratee</code>（迭代函数），调用每一个数组（<code>array</code>）的每个元素以产生唯一性计算的标准。<code>iteratee</code> 调用时会传入一个参数：(<code>value</code>)。</li>\n<li><code>_.uniqWith(array, [comparator])</code>: 这个方法类似 <code>_.uniq</code>， 除了它接受一个 <code>comparator</code> 调用比较 <code>array</code> 数组的每一个元素。 <code>comparator</code> 调用时会传入 2 个参数：(<code>arrVal</code>, <code>othVal</code>)。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// uniq</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.uniq([<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]) <span class=\"comment\">// [2, 1]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// uniqBy</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.uniqBy([<span class=\"number\">2.1</span>, <span class=\"number\">1.2</span>, <span class=\"number\">2.3</span>], <span class=\"built_in\">Math</span>.floor) <span class=\"comment\">// [2.1, 1.2]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The `_.property` iteratee shorthand.</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.uniqBy([&#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">2</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;], <span class=\"string\">'x'</span>) <span class=\"comment\">// [&#123; 'x': 1 &#125;, &#123; 'x': 2 &#125;]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// uniqWith</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> objects = [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">x</span>: <span class=\"number\">2</span>, <span class=\"attr\">y</span>: <span class=\"number\">1</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.uniqWith(objects, _.isEqual) <span class=\"comment\">// [&#123; 'x': 1, 'y': 2 &#125;, &#123; 'x': 2, 'y': 1 &#125;]</span></span></pre></td></tr></table></figure>\n\n<h3 id=\"数组排序\"><a href=\"#数组排序\" class=\"headerlink\" title=\"数组排序\"></a>数组排序</h3><ul>\n<li><code>_.sortBy(collection, [iteratees=[_.identity]])</code>: 创建一个元素数组。 以 <code>iteratee</code> 处理的结果升序排序。 这个方法执行稳定排序，也就是说相同元素会保持原始排序。 <code>iteratees</code> 调用1个参数：(<code>value</code>)。可以使用 <code>Array.prototype.reverse</code> 方法倒序</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> users = [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">user</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">'fred'</span> &#125;, <span class=\"attr\">age</span>: <span class=\"number\">48</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">user</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">'barney'</span> &#125;, <span class=\"attr\">age</span>: <span class=\"number\">36</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">user</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">'fred'</span> &#125;, <span class=\"attr\">age</span>: <span class=\"number\">40</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">user</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">'barney'</span> &#125;, <span class=\"attr\">age</span>: <span class=\"number\">34</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The `_.property` iteratee shorthand.</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.sortBy(users, <span class=\"string\">'user.name'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * [</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> *  &#123;age: 34, user: \"barney\"&#125;,</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> *  &#123;age: 36, user: \"barney\"&#125;,</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> *  &#123;age: 40, user: \"fred\"&#125;,</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> *  &#123;age: 48, user: \"fred\"&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * ]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr></table></figure>\n\n<h3 id=\"数组降维\"><a href=\"#数组降维\" class=\"headerlink\" title=\"数组降维\"></a>数组降维</h3><ul>\n<li><code>_.flatten(array)</code>: 减少一级 <code>array</code> 嵌套深度。</li>\n<li><code>_.flattenDeep(array)</code>: 将 <code>array</code> 递归为一维数组。</li>\n<li><code>_.flattenDepth(array, [depth=1])</code>: 根据 <code>depth</code> 递归减少 <code>array</code> 的嵌套层级</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// flatten</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.flatten([<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>]], <span class=\"number\">5</span>]]) <span class=\"comment\">// [1, 2, [3, [4]], 5]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// flattenDeep</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.flattenDeep([<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>]], <span class=\"number\">5</span>]]) <span class=\"comment\">// [1, 2, 3, 4, 5]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// flattenDepth</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>]], <span class=\"number\">5</span>]]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.flattenDepth(array, <span class=\"number\">1</span>) <span class=\"comment\">// [1, 2, [3, [4]], 5]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.flattenDepth(array, <span class=\"number\">2</span>) <span class=\"comment\">// [1, 2, 3, [4], 5]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.flattenDepth(array, <span class=\"number\">3</span>) <span class=\"comment\">// [1, 2, 3, 4, 5]</span></span></pre></td></tr></table></figure>\n\n<h3 id=\"获取部分元素\"><a href=\"#获取部分元素\" class=\"headerlink\" title=\"获取部分元素\"></a>获取部分元素</h3><ul>\n<li><code>_.initial(array)</code>: 获取数组 <code>array</code> 中除了最后一个元素之外的所有元素（去除数组array中的最后一个元素）。</li>\n<li><code>_.tail(array)</code>: 获取除了 <code>array</code> 数组第一个元素以外的全部元素。</li>\n</ul>\n",
        "site": { "data": {} },
        "excerpt": "<p>ECMAScript 数组的每一项可以保存任何类型的数据；而且大小是可以动态调整的，即可以随着数据的添加自动增长以容纳新增数据。</p>",
        "more": "<h2 id=\"创建数组\"><a href=\"#创建数组\" class=\"headerlink\" title=\"创建数组\"></a>创建数组</h2><h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>() <span class=\"comment\">// []</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">colors = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">10</span>) <span class=\"comment\">// [empty × 10]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">colors = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"string\">'red'</span>, <span class=\"string\">'blue'</span>, <span class=\"string\">'green'</span>) <span class=\"comment\">// [\"red\", \"blue\", \"green\"]</span></span></pre></td></tr></table></figure>\n\n<h3 id=\"数组字面量表示法\"><a href=\"#数组字面量表示法\" class=\"headerlink\" title=\"数组字面量表示法\"></a>数组字面量表示法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [] <span class=\"comment\">// 创建一个空数组</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [<span class=\"string\">'red'</span>, <span class=\"string\">'blue'</span>, <span class=\"string\">'green'</span>] <span class=\"comment\">// 创建一个包含 3 个字符串的数组</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>] <span class=\"comment\">// 不要这样！这样会创建一个包含2或3项的数组</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> options = [, , , , ,] <span class=\"comment\">// 不要这样！这样会创建一个包含5或6项的数组</span></span></pre></td></tr></table></figure>\n\n<h2 id=\"读取和设置数组的值\"><a href=\"#读取和设置数组的值\" class=\"headerlink\" title=\"读取和设置数组的值\"></a>读取和设置数组的值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [<span class=\"string\">'red'</span>, <span class=\"string\">'blue'</span>, <span class=\"string\">'green'</span>] <span class=\"comment\">// 创建一个包含3个字符串的数组</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">alert(colors[<span class=\"number\">0</span>]) <span class=\"comment\">// 显示第1项</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">colors[<span class=\"number\">2</span>] = <span class=\"string\">'black'</span> <span class=\"comment\">// 修改第3项</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">colors[<span class=\"number\">3</span>] = <span class=\"string\">'brown'</span> <span class=\"comment\">// 新增第4项</span></span></pre></td></tr></table></figure>\n\n<h2 id=\"length-属性\"><a href=\"#length-属性\" class=\"headerlink\" title=\"length 属性\"></a>length 属性</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [<span class=\"string\">'red'</span>, <span class=\"string\">'blue'</span>, <span class=\"string\">'green'</span>] <span class=\"comment\">// 创建一个包含3个字符串的数组</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">alert(colors.length) <span class=\"comment\">// 显示数组长度</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">colors[colors.length] = <span class=\"string\">'black'</span> <span class=\"comment\">// 在位置3添加一种颜色</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">colors[colors.length] = <span class=\"string\">'brown'</span> <span class=\"comment\">// 在位置4再添加一种颜色</span></span></pre></td></tr></table></figure>\n\n<h2 id=\"检测数组\"><a href=\"#检测数组\" class=\"headerlink\" title=\"检测数组\"></a>检测数组</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = []</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(array)) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 对数组执行某些操作</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<h3 id=\"Array-isArray-Polyfill\"><a href=\"#Array-isArray-Polyfill\" class=\"headerlink\" title=\"Array.isArray Polyfill\"></a>Array.isArray Polyfill</h3><p>如果是实际项目可以配置 <code>@babel/polyfill</code> 或者 <code>transform-runtime</code>，这不在本文的讨论范围</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.isArray) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">Array</span>.isArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(arg) === <span class=\"string\">'[object Array]'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<h2 id=\"ES1-方法\"><a href=\"#ES1-方法\" class=\"headerlink\" title=\"ES1 方法\"></a>ES1 方法</h2><ul>\n<li><code>Array.prototype.join</code>: <code>join()</code> 方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符。<strong>原始数组不会被改变</strong>。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// join</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [<span class=\"string\">'red'</span>, <span class=\"string\">'blue'</span>, <span class=\"string\">'green'</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(colors.join()) <span class=\"comment\">// \"red,blue,green\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(colors.join(<span class=\"string\">'|'</span>)) <span class=\"comment\">// \"red|blue|green\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(colors.join(<span class=\"string\">'|'</span>)) <span class=\"comment\">// \"red|blue|green\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'red|blue|green'</span>.split(<span class=\"string\">'|'</span>)) <span class=\"comment\">// [\"red\", \"blue\", \"green\"]</span></span></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Array.prototype.reverse()</code>: <code>reverse()</code> 方法将数组中元素的位置颠倒，并返回该数组。<strong>该方法会改变原数组</strong>。</li>\n<li><code>Array.prototype.sort()</code>: <code>sort()</code> 方法用原地算法对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的 UTF-16 代码单元值序列时构建的; sort 方法接收一个比较函数作为参数，如果第一参数应该位于第二个参数之前则返回负数，如果第一个参数应该位于第二个之后则返回一个正数。<strong>该方法会改变原数组</strong>。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// reverse</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(colors.reverse()) <span class=\"comment\">// [5, 4, 3, 2, 1]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sort</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>, <span class=\"number\">20</span>, <span class=\"number\">5</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span>(<span class=\"params\">arr, asc = true</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> arr.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (asc) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> a - b</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> b - a</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(sort(colors)) <span class=\"comment\">// [1, 3, 5, 10, 20]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(sort(colors, <span class=\"literal\">false</span>)) <span class=\"comment\">// [20, 10, 5, 3, 1]</span></span></pre></td></tr></table></figure>\n\n<h2 id=\"ES3-方法\"><a href=\"#ES3-方法\" class=\"headerlink\" title=\"ES3 方法\"></a>ES3 方法</h2><ul>\n<li><code>Array.prototype.push</code>: <code>push()</code> 方法可以接受任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度。<strong>该方法会改变原数组</strong>。</li>\n<li><code>Array.prototype.pop</code>: <code>pop()</code> 方法从数组末尾移除最后一项，减少数组的 <code>length</code> 值，并返回该项。<strong>该方法会改变原数组</strong>。</li>\n<li><code>Array.prototype.shift</code>: <code>shift()</code> 方法能够移除数组中的第一项并返回该项, 同时将数组长度减 1。<strong>该方法会改变原数组</strong>。</li>\n<li><code>Array.prototype.unshift</code>: <code>unshift()</code> 方法能够在数组前端添加任意个项，并返回新数组的长度。<strong>该方法会改变原数组</strong>。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// push、pop</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [<span class=\"string\">'red'</span>, <span class=\"string\">'blue'</span>, <span class=\"string\">'green'</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = colors.push(<span class=\"string\">'black'</span>, <span class=\"string\">'brown'</span>) <span class=\"comment\">// 向末尾推入两项</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(count) <span class=\"comment\">// 5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> item = colors.pop() <span class=\"comment\">// 取得最后一项</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(item) <span class=\"comment\">// \"brown\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// shift、unshift</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [<span class=\"string\">'red'</span>, <span class=\"string\">'blue'</span>, <span class=\"string\">'green'</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = colors.unshift(<span class=\"string\">'black'</span>, <span class=\"string\">'brown'</span>) <span class=\"comment\">// 向开头推入两项</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(count) <span class=\"comment\">// 5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> item = colors.shift() <span class=\"comment\">// 取得第一项</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(item) <span class=\"comment\">// \"red\"</span></span></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Array.prototype.concat()</code>: <code>concat()</code> 方法用于合并两个或多个数组。<strong>原始数组不会被改变</strong>，而是返回一个新数组。</li>\n<li><code>Array.prototype.slice()</code>: <code>slice()</code> 方法返回一个新的数组对象，这一对象是一个由 <code>begin</code> 和 <code>end</code> 决定的原数组的浅拷贝（包括 <code>begin</code>，不包括 <code>end</code>）。<strong>原始数组不会被改变</strong>。</li>\n<li><code>Array.prototype.splice()</code>: <code>splice()</code> 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。<strong>此方法会改变原数组</strong>。<ul>\n<li><strong>删除</strong>: 可以删除任意数量的项，只需指定 2 个参数: 要删除的第一项的位置和要删除的项数。例如，<code>splice(0, 2)</code> 会删除数组中的前两项。</li>\n<li><strong>插入</strong>: 可以向指定位置插入任意数量的项，只需要提供 3 个参数：起始位置、0（要删除的项数）和要插入的项。如果要插入多个项，可以再传入任意多个项。例如，<code>splice(2, 0, &quot;red&quot;, &quot;green&quot;)</code> 会从当前数组的位置 2 开始插入字符串 <code>&quot;red&quot;</code> 和 <code>green</code>。</li>\n<li><strong>替换</strong>: 可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需要指定 3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项不必与删除的项数相等。例如，<code>splice(2, 1, &quot;red&quot;, &quot;green&quot;)</code> 会删除当前数组位置 2 的项，然后再从位置 2 开始插入字符串 <code>&quot;red&quot;</code> 和 <code>green</code>。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// concat</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [<span class=\"string\">'red'</span>, <span class=\"string\">'blue'</span>, <span class=\"string\">'green'</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors1 = [<span class=\"string\">'black'</span>, <span class=\"string\">'brown'</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(colors.concat(colors1)) <span class=\"comment\">// [\"red\", \"blue\", \"green\", \"black\", \"brown\"]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// slice</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * 如果 `slice()` 方法的参数中有一个负数，则用数组长度加上该数来确定相应地位置。例如，在一个包含5项的数组上调用 `slice(-2, -1)` 与调用 `slice(3, 4)` 得到的结果相同。如果结束位置小于起始位置，则返回空数组。</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [<span class=\"string\">'red'</span>, <span class=\"string\">'blue'</span>, <span class=\"string\">'green'</span>, <span class=\"string\">'black'</span>, <span class=\"string\">'brown'</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors2 = colors.slice(<span class=\"number\">1</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors3 = colors.slice(<span class=\"number\">1</span>, <span class=\"number\">4</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(colors2) <span class=\"comment\">// [\"blue\", \"green\", \"black\", \"brown\"]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(colors3) <span class=\"comment\">// [\"blue\", \"green\", \"black\"]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * splice() 方法始终都会返回一个数组，该数组中包含从原始数组中删除的项（如果没有删除任何项，则返回一个空数组）</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [<span class=\"string\">'red'</span>, <span class=\"string\">'green'</span>, <span class=\"string\">'blue'</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> removed = colors.splice(<span class=\"number\">0</span>, <span class=\"number\">1</span>) <span class=\"comment\">// 删除第一项</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(colors) <span class=\"comment\">// [\"green\", \"blue\"]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(removed) <span class=\"comment\">// [\"red\"] 返回的数组中只包含一项</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">removed = colors.splice(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"string\">'yellow'</span>, <span class=\"string\">'orange'</span>) <span class=\"comment\">// 从位置 1 开始插入两项</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(colors) <span class=\"comment\">// [\"green\", \"red\", \"orange\", \"blue\"]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(removed) <span class=\"comment\">// 返回的是一个空数组</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">removed = colors.splice(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"string\">'red'</span>, <span class=\"string\">'purple'</span>) <span class=\"comment\">// 删除一项，增加两项</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(colors) <span class=\"comment\">// [\"green\", \"red\", \"purple\", \"orange\", \"blue\"]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(removed) <span class=\"comment\">// yellow，返回的数组中只包含一项</span></span></pre></td></tr></table></figure>\n\n<h2 id=\"ES5-方法\"><a href=\"#ES5-方法\" class=\"headerlink\" title=\"ES5 方法\"></a>ES5 方法</h2><ul>\n<li><code>Array.prototype.indexOf()</code>: <code>indexOf()</code> 方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。从数组的前面向后查找，从 <code>fromIndex</code> 处开始。</li>\n<li><code>Array。prototype.lastIndexOf)()</code>: <code>lastIndexOf()</code> 方法返回指定元素在数组中的最后一个索引，如果不存在则返回-1。从数组的后面向前查找，从 <code>fromIndex</code> 处开始。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(numbers.indexOf(<span class=\"number\">4</span>)) <span class=\"comment\">// 3</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(numbers.lastIndexOf(<span class=\"number\">4</span>)) <span class=\"comment\">// 5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(numbers.indexOf(<span class=\"number\">4</span>, <span class=\"number\">4</span>)) <span class=\"comment\">// 5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(numbers.lastIndexOf(<span class=\"number\">4</span>, <span class=\"number\">4</span>)) <span class=\"comment\">// 3</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Nicholas'</span> &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> people = [&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Nicholas'</span> &#125;]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> morePeople</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * indexOf、lastIndexOf 在比较第一个参数与数组中的每一项时，会使用全等操作符</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(people.indexOf(person)) <span class=\"comment\">// -1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(morePeople.indexOf(person)) <span class=\"comment\">// 0</span></span></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Array.prototype.every()</code>: 对数组中的每一项运行给定函数，如果该函数对每一项都返回 <code>true</code>，则返回 <code>true</code>。</li>\n<li><code>Array.prototype.some()</code>: 对数组中的每一项运行给定函数，如果该函数对任一项返回 <code>true</code>，则返回 <code>true</code>。</li>\n<li><code>Array.prototype.filter()</code>: 对数组中的每一项运行给定函数，返回该函数会返回 <code>true</code> 的项组成的数组。</li>\n<li><code>Array.prototype.map()</code>: 对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。</li>\n<li><code>Array.prototype.forEach()</code>: 对数组中的每一项运行给定函数，这个方法没有返回值。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// every</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> everyResult = numbers.every(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> item &gt; <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(everyResult) <span class=\"comment\">// false</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// some</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someResult = numbers.some(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> item &gt; <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(someResult) <span class=\"comment\">// true</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// filter</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> filterResult = numbers.filter(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> item &gt; <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(filterResult) <span class=\"comment\">// [3, 4, 5, 4, 3]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// map</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mapResult = numbers.map(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> item * <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(mapResult) <span class=\"comment\">// [2, 4, 6, 8, 10, 8, 6, 4, 2]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// forEach</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">numbers.forEach(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 执行某些操作</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Array.prototype.reduce()</code></li>\n<li><code>Array.prototype.reduceRight()</code></li>\n</ul>\n<p><code>reduce()</code> 和 <code>reduceRight()</code> 方法都会迭代数组的所有项，然后构建一个最终返回的值。其中，<code>reduce()</code> 方法从数组的第一项开始，逐个遍历到最后。而 <code>reduceRight()</code> 则从数组的最后一项开始，向前遍历到第一项。</p>\n<p>这两个参数都接受两个参数: 一个在每一项上调用的函数和（可选的）作为归并基础的初始值。传给 <code>reduce</code> 和 <code>reduceRight</code> 的函数接受 4 个参数：前一个值、当前值、项的索引和数组对象。这个函数返回的任何值都会作为第一个参数自动传给下一项。第一次迭代发生在数组的第二项上，因此第一个参数是数组的第一项，第二个参数就是数组的第二项。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组求和</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum = values.reduce(<span class=\"function\">(<span class=\"params\">prev, cur, index, array</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> prev + cur</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(sum)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组求乘积</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pro = values.reduce(<span class=\"function\">(<span class=\"params\">prev, cur, index, array</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> prev * cur</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(pro) <span class=\"comment\">// 120</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * 【累加对象数组里的值】</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * 要累加对象数组中包含的值，必须提供初始值，以便各个item正确通过你的函数。</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [&#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">2</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span> &#125;]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum = values.reduce(<span class=\"function\">(<span class=\"params\">prev, cur</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> prev + cur.x</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(sum) <span class=\"comment\">// 6</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 求最大值</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> max = values.reduce(<span class=\"function\">(<span class=\"params\">prev, cur, index, array</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> prev &gt; cur ? prev : cur</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(max) <span class=\"comment\">// 5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 计算数组中每个元素出现的次数</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> names = [<span class=\"string\">'Alice'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tiff'</span>, <span class=\"string\">'Bruce'</span>, <span class=\"string\">'Alice'</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> countedNames = names.reduce(<span class=\"function\">(<span class=\"params\">allNames, name</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> (allNames.indexOf(name) &gt; <span class=\"number\">-1</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">    allNames[name]++</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">    allNames[name] = <span class=\"number\">1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> allNames</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 按属性对object array分类</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> people = [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'张三'</span>, <span class=\"attr\">age</span>: <span class=\"number\">26</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'李扬'</span>, <span class=\"attr\">age</span>: <span class=\"number\">25</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'杨六'</span>, <span class=\"attr\">age</span>: <span class=\"number\">25</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'王五'</span>, <span class=\"attr\">age</span>: <span class=\"number\">26</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> groupBy = <span class=\"function\">(<span class=\"params\">objectArray, property</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> objectArray.reduce(<span class=\"function\">(<span class=\"params\">acc, cur</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> key = cur[property]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (!acc[key]) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">      acc[key] = [cur]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">      acc[key].push(cur)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> acc</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;, &#123;&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> groupedPeople = groupBy(people, <span class=\"string\">'age'</span>)</span></pre></td></tr></table></figure>\n\n<p><strong>reduce 高级用法:</strong></p>\n<blockquote>\n<p>搬砖工小王拿到了这样的格式：<code>var arr = [ {n ame: &#39;brick1&#39;}, {name: &#39;brick2&#39;}, {name: &#39;brick3&#39;} ]</code><br>希望得到这样的数据格式：<code>brick1, brick2 &amp; brick3</code><br>当然数组异常流: <code>[{name:&#39;brick1&#39;}]</code> 和空数组传入得到 <code>&quot;brick1&quot;</code> 和空</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [&#123; <span class=\"attr\">name</span>: <span class=\"string\">'brick11'</span> &#125;, &#123; <span class=\"attr\">name</span>: <span class=\"string\">'brick12'</span> &#125;, &#123; <span class=\"attr\">name</span>: <span class=\"string\">'brick13'</span> &#125;]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> carryBricks = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\">(<span class=\"params\">prev, cur, index, array</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (index === <span class=\"number\">0</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> cur.name</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index === array.length - <span class=\"number\">1</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> prev + <span class=\"string\">' &amp; '</span> + cur.name</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> prev + <span class=\"string\">','</span> + cur.name</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;, <span class=\"string\">''</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(carryBricks(array)) <span class=\"comment\">// \"brick11,brick12 &amp; brick13\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(carryBricks([&#123; <span class=\"attr\">name</span>: <span class=\"string\">'brick1'</span> &#125;])) <span class=\"comment\">// \"brick1\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(carryBricks([])) <span class=\"comment\">// \"\"</span></span></pre></td></tr></table></figure>\n\n<h2 id=\"lodash\"><a href=\"#lodash\" class=\"headerlink\" title=\"lodash\"></a>lodash</h2><h3 id=\"数组并集\"><a href=\"#数组并集\" class=\"headerlink\" title=\"数组并集\"></a>数组并集</h3><ul>\n<li><code>_.union([arrays])</code>: 创建一个按顺序排列的唯一值的数组。所有给定数组的元素值使用 SameValueZero 做等值比较。（ <code>arrays</code>（数组）的并集，按顺序返回，返回数组的元素是唯一的）</li>\n<li><code>_.unionBy([arrays], [iteratee=_.identity])</code>: 这个方法类似 <code>_.union</code> ，除了它接受一个 <code>iteratee</code> （迭代函数），调用每一个数组（<code>array</code>）的每个元素以产生唯一性计算的标准。<code>iteratee</code> 会传入一个参数：(<code>value</code>)。</li>\n<li><code>_.unionWith([arrays], [comparator])</code>: 这个方法类似 <code>_.union</code>， 除了它接受一个 <code>comparator</code> 调用比较 <code>arrays</code> 数组的每一个元素。 <code>comparator</code> 调用时会传入 2 个参数： (<code>arrVal</code>, <code>othVal</code>)。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// union</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.union([<span class=\"number\">2</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>]) <span class=\"comment\">// [2, 1]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// unionBy</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.unionBy([<span class=\"number\">2.1</span>], [<span class=\"number\">1.2</span>, <span class=\"number\">2.3</span>], <span class=\"built_in\">Math</span>.floor) <span class=\"comment\">// [2.1, 1.2]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The `_.property` iteratee shorthand.</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.unionBy([&#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;], [&#123; <span class=\"attr\">x</span>: <span class=\"number\">2</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;], <span class=\"string\">'x'</span>) <span class=\"comment\">// [&#123; 'x': 1 &#125;, &#123; 'x': 2 &#125;]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// unionWith</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> objects = [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">x</span>: <span class=\"number\">2</span>, <span class=\"attr\">y</span>: <span class=\"number\">1</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> others = [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">1</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.unionWith(objects, others, _.isEqual) <span class=\"comment\">// [&#123; 'x': 1, 'y': 2 &#125;, &#123; 'x': 2, 'y': 1 &#125;, &#123; 'x': 1, 'y': 1 &#125;]</span></span></pre></td></tr></table></figure>\n\n<h3 id=\"数组交集\"><a href=\"#数组交集\" class=\"headerlink\" title=\"数组交集\"></a>数组交集</h3><ul>\n<li><code>_.intersection([arrays])</code>: 创建唯一值的数组，这个数组包含所有给定数组都包含的元素，使用 SameValueZero 进行相等性比较。（可以理解为给定数组的交集）</li>\n<li><code>_.intersectionBy([arrays], [iteratee=_.identity])</code>: 这个方法类似 <code>_.intersection</code>，区别是它接受一个 <code>iteratee</code> 调用每一个 arrays 的每个值以产生一个值，通过产生的值进行了比较。结果值是从第一数组中选择。iteratee 会传入一个参数：<code>(value)</code>。</li>\n<li><code>_.intersectionWith([arrays], [comparator])</code>: 这个方法类似 <code>_.intersection</code>，区别是它接受一个 <code>comparator</code> 调用比较 arrays 中的元素。结果值是从第一数组中选择。<code>comparator</code> 会传入两个参数：<code>(arrVal, othVal)</code>。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// intersection</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.intersection([<span class=\"number\">2</span>, <span class=\"number\">1</span>], [<span class=\"number\">4</span>, <span class=\"number\">2</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>])) <span class=\"comment\">// [2]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// intersectionBy</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.intersectionBy([<span class=\"number\">2.1</span>, <span class=\"number\">1.2</span>], [<span class=\"number\">4.3</span>, <span class=\"number\">2.4</span>], <span class=\"built_in\">Math</span>.floor) <span class=\"comment\">// [2.1]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The `_.property` iteratee shorthand.</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.intersectionBy([&#123; <span class=\"string\">'x'</span>: <span class=\"number\">1</span> &#125;], [&#123; <span class=\"string\">'x'</span>: <span class=\"number\">2</span> &#125;, &#123; <span class=\"string\">'x'</span>: <span class=\"number\">1</span> &#125;], <span class=\"string\">'x'</span>) <span class=\"comment\">// =&gt; [&#123; 'x': 1 &#125;]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// intersectionWith</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> objects = [&#123; <span class=\"string\">'x'</span>: <span class=\"number\">1</span>, <span class=\"string\">'y'</span>: <span class=\"number\">2</span> &#125;, &#123; <span class=\"string\">'x'</span>: <span class=\"number\">2</span>, <span class=\"string\">'y'</span>: <span class=\"number\">1</span> &#125;];</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> others = [&#123; <span class=\"string\">'x'</span>: <span class=\"number\">1</span>, <span class=\"string\">'y'</span>: <span class=\"number\">1</span> &#125;, &#123; <span class=\"string\">'x'</span>: <span class=\"number\">1</span>, <span class=\"string\">'y'</span>: <span class=\"number\">2</span> &#125;];</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.intersectionWith(objects, others, _.isEqual) <span class=\"comment\">// [&#123; 'x': 1, 'y': 2 &#125;]</span></span></pre></td></tr></table></figure>\n\n<h3 id=\"数组差集\"><a href=\"#数组差集\" class=\"headerlink\" title=\"数组差集\"></a>数组差集</h3><ul>\n<li><code>_.difference(array, [values])</code>: 创建一个具有唯一 array 值的数组，每个值不包含在其他给定的数组中。（即创建一个新数组，这个数组中的值，为第一个数字（array 参数）排除了给定数组中的值。）该方法使用 SameValueZero 做相等比较。结果值的顺序是由第一个数组中的顺序确定。</li>\n<li><code>_.differenceBy(array, [values], [iteratee=_.identity])</code>: 这个方法类似 _.difference ，除了它接受一个 iteratee （迭代器）， 调用 array 和 values 中的每个元素以产生比较的标准。 结果值是从第一数组中选择。iteratee 会调用一个参数：(value)。（首先使用迭代器分别迭代 array 和 values 中的每个元素，返回的值作为比较值）。</li>\n<li><code>_.differenceWith(array, [values], [comparator])</code>: 这个方法类似 <code>_.difference</code> ，除了它接受一个 <code>comparator</code> （比较器），它调用比较 <code>array</code>，<code>values</code> 中的元素。 结果值是从第一数组中选择。<code>comparator</code> 调用参数有两个：<code>(arrVal, othVal)</code>。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// difference</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.difference([<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>], [<span class=\"number\">4</span>, <span class=\"number\">2</span>]) <span class=\"comment\">// [3, 1]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// differenceBy</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.differenceBy([<span class=\"number\">3.1</span>, <span class=\"number\">2.2</span>, <span class=\"number\">1.3</span>], [<span class=\"number\">4.4</span>, <span class=\"number\">2.5</span>], <span class=\"built_in\">Math</span>.floor) <span class=\"comment\">// [3.1, 1.3]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The `_.property` iteratee shorthand.</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.differenceBy([&#123; <span class=\"attr\">x</span>: <span class=\"number\">2</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;], [&#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;], <span class=\"string\">'x'</span>) <span class=\"comment\">// [&#123; 'x': 2 &#125;]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// differenceWith</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> objects = [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">x</span>: <span class=\"number\">2</span>, <span class=\"attr\">y</span>: <span class=\"number\">1</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.differenceWith(objects, [&#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span> &#125;], _.isEqual) <span class=\"comment\">// [&#123; 'x': 2, 'y': 1 &#125;]</span></span></pre></td></tr></table></figure>\n\n<h3 id=\"数组分组\"><a href=\"#数组分组\" class=\"headerlink\" title=\"数组分组\"></a>数组分组</h3><ul>\n<li><code>_.groupBy(collection, [iteratee=_.identity])</code>: 创建一个对象，<code>key</code> 是 <code>iteratee</code> 遍历 <code>collection</code>(集合) 中的每个元素返回的结果。 分组值的顺序是由他们出现在 <code>collection</code>(集合) 中的顺序确定的。每个键对应的值负责生成 <code>key</code> 的元素组成的数组。<code>iteratee</code> 调用 1 个参数： (<code>value</code>)。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.groupBy([<span class=\"number\">6.1</span>, <span class=\"number\">4.2</span>, <span class=\"number\">6.3</span>], <span class=\"built_in\">Math</span>.floor) <span class=\"comment\">// &#123; '4': [4.2], '6': [6.1, 6.3] &#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The `_.property` iteratee shorthand.</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.groupBy([<span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>], <span class=\"string\">'length'</span>) <span class=\"comment\">// &#123; '3': ['one', 'two'], '5': ['three'] &#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> students = [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'杨俊宁'</span>, <span class=\"attr\">province</span>: <span class=\"string\">'河南'</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'宋光刚'</span>, <span class=\"attr\">province</span>: <span class=\"string\">'河南'</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'谢晧曜'</span>, <span class=\"attr\">province</span>: <span class=\"string\">'江苏'</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'李珂威'</span>, <span class=\"attr\">province</span>: <span class=\"string\">'河南'</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.groupBy(students, <span class=\"string\">'province'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123; '江苏': [&#123; name: '谢晧曜', province: '江苏' &#125;], '河南': [&#123; name: '杨俊宁', province: '河南' &#125;, &#123; name: '宋光刚', province: '河南' &#125;,&#123; name: '李珂威', province: '河南' &#125;] &#125;</span></span></pre></td></tr></table></figure>\n\n<h3 id=\"删除数组项\"><a href=\"#删除数组项\" class=\"headerlink\" title=\"删除数组项\"></a>删除数组项</h3><h4 id=\"根据断言删除数组项\"><a href=\"#根据断言删除数组项\" class=\"headerlink\" title=\"根据断言删除数组项\"></a>根据断言删除数组项</h4><ul>\n<li><code>remove</code>: 移除数组中 predicate（断言）返回为真值的所有元素，并返回移除元素组成的数组。predicate（断言） 会传入 3 个参数： (<code>value</code>, <code>index</code>, <code>array</code>)。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> evens = _.remove(array, value =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> value % <span class=\"number\">2</span> == <span class=\"number\">0</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(array) <span class=\"comment\">// =&gt; [1, 3]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(evens) <span class=\"comment\">// =&gt; [2, 4]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> students = [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'杨俊宁'</span>, <span class=\"attr\">province</span>: <span class=\"string\">'河南'</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'宋光刚'</span>, <span class=\"attr\">province</span>: <span class=\"string\">'河南'</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'谢晧曜'</span>, <span class=\"attr\">province</span>: <span class=\"string\">'江苏'</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'李珂威'</span>, <span class=\"attr\">province</span>: <span class=\"string\">'河南'</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> removedStudent = _.remove(students, student =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> student.province === <span class=\"string\">'江苏'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(students)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [&#123;name: \"杨俊宁\", province: \"河南\"&#125;, &#123;name: \"宋光刚\", province: \"河南\"&#125;, &#123;name: \"李珂威\", province: \"河南\"&#125;]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(removedStudent)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [&#123;name: \"谢晧曜\", province: \"江苏\"&#125;]</span></span></pre></td></tr></table></figure>\n\n<h4 id=\"根据给定值删除数组项\"><a href=\"#根据给定值删除数组项\" class=\"headerlink\" title=\"根据给定值删除数组项\"></a>根据给定值删除数组项</h4><ul>\n<li><code>_.pull(array, [values])</code>: 移除数组 array 中所有和给定值相等的元素，使用 SameValueZero 进行全等比较。</li>\n<li><code>_.pullAll(array, values)</code>: 这个方法类似 _.pull，区别是这个方法接收一个要移除值的数组。</li>\n<li><code>_.pullAllBy(array, values, [iteratee=_.identity])</code>: 这个方法类似于 <code>_.pullAll</code> ，区别是这个方法接受一个 <code>iteratee</code>（迭代函数） 调用 <code>array</code> 和 <code>values</code>的每个值以产生一个值，通过产生的值进行了比较。<code>iteratee</code> 会传入一个参数： (<code>value</code>)。</li>\n<li><code>_.pullAllWith(array, values, [comparator])</code>: 这个方法类似于 <code>_.pullAll</code>，区别是这个方法接受 <code>comparator</code> 调用 <code>array</code> 中的元素和 <code>values</code> 比较。<code>comparator</code> 会传入两个参数：(<code>arrVal</code>, <code>othVal</code>)。</li>\n</ul>\n<blockquote>\n<p>pull 系列和 difference 系列不同之处在于 pull 系列方法会改变数组 array</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// pull</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.pull(array, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(array) <span class=\"comment\">// [1, 1]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// pullAll</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.pullAll(array, [<span class=\"number\">2</span>, <span class=\"number\">3</span>])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(array) <span class=\"comment\">// [1, 1]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// pullAllBy</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [&#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">2</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.pullAllBy(array, [&#123; <span class=\"attr\">x</span>: <span class=\"number\">2</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span> &#125;], <span class=\"string\">'x'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(array) <span class=\"comment\">// [&#123; 'x': 1 &#125;, &#123; 'x': 1 &#125;]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// pullAllWith</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">4</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">x</span>: <span class=\"number\">5</span>, <span class=\"attr\">y</span>: <span class=\"number\">6</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.pullAllWith(array, [&#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">4</span> &#125;], _.isEqual)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(array) <span class=\"comment\">// [&#123; 'x': 1, 'y': 2 &#125;, &#123; 'x': 5, 'y': 6 &#125;]</span></span></pre></td></tr></table></figure>\n\n<ul>\n<li><code>_.pullAt(array, [indexes])</code>: 根据索引 <code>indexes</code>，移除 <code>array</code> 中对应的元素，并返回被移除元素的数组。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">20</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> evens = _.pullAt(array, <span class=\"number\">1</span>, <span class=\"number\">3</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(array) <span class=\"comment\">// [5, 15]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(evens) <span class=\"comment\">// [10, 20]</span></span></pre></td></tr></table></figure>\n\n<ul>\n<li><code>_.without(array, [values])</code>: 创建一个剔除所有给定值的新数组，剔除值的时候，使用 SameValueZero 做相等比较。不像 <code>_.pull</code>, 这个方法会返回一个新数组。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.without([<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// [3]</span></span></pre></td></tr></table></figure>\n\n<h3 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h3><ul>\n<li><code>_.uniq(array)</code>: 创建一个去重后的 array 数组副本。使用了 SameValueZero 做等值比较。只有第一次出现的元素才会被保留。</li>\n<li><code>_.uniqBy(array, [iteratee=_.identity])</code>: 这个方法类似 <code>_.uniq</code> ，除了它接受一个 <code>iteratee</code>（迭代函数），调用每一个数组（<code>array</code>）的每个元素以产生唯一性计算的标准。<code>iteratee</code> 调用时会传入一个参数：(<code>value</code>)。</li>\n<li><code>_.uniqWith(array, [comparator])</code>: 这个方法类似 <code>_.uniq</code>， 除了它接受一个 <code>comparator</code> 调用比较 <code>array</code> 数组的每一个元素。 <code>comparator</code> 调用时会传入 2 个参数：(<code>arrVal</code>, <code>othVal</code>)。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// uniq</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.uniq([<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]) <span class=\"comment\">// [2, 1]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// uniqBy</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.uniqBy([<span class=\"number\">2.1</span>, <span class=\"number\">1.2</span>, <span class=\"number\">2.3</span>], <span class=\"built_in\">Math</span>.floor) <span class=\"comment\">// [2.1, 1.2]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The `_.property` iteratee shorthand.</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.uniqBy([&#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">2</span> &#125;, &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;], <span class=\"string\">'x'</span>) <span class=\"comment\">// [&#123; 'x': 1 &#125;, &#123; 'x': 2 &#125;]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// uniqWith</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> objects = [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">x</span>: <span class=\"number\">2</span>, <span class=\"attr\">y</span>: <span class=\"number\">1</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.uniqWith(objects, _.isEqual) <span class=\"comment\">// [&#123; 'x': 1, 'y': 2 &#125;, &#123; 'x': 2, 'y': 1 &#125;]</span></span></pre></td></tr></table></figure>\n\n<h3 id=\"数组排序\"><a href=\"#数组排序\" class=\"headerlink\" title=\"数组排序\"></a>数组排序</h3><ul>\n<li><code>_.sortBy(collection, [iteratees=[_.identity]])</code>: 创建一个元素数组。 以 <code>iteratee</code> 处理的结果升序排序。 这个方法执行稳定排序，也就是说相同元素会保持原始排序。 <code>iteratees</code> 调用1个参数：(<code>value</code>)。可以使用 <code>Array.prototype.reverse</code> 方法倒序</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> users = [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">user</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">'fred'</span> &#125;, <span class=\"attr\">age</span>: <span class=\"number\">48</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">user</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">'barney'</span> &#125;, <span class=\"attr\">age</span>: <span class=\"number\">36</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">user</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">'fred'</span> &#125;, <span class=\"attr\">age</span>: <span class=\"number\">40</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123; <span class=\"attr\">user</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">'barney'</span> &#125;, <span class=\"attr\">age</span>: <span class=\"number\">34</span> &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The `_.property` iteratee shorthand.</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.sortBy(users, <span class=\"string\">'user.name'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * [</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> *  &#123;age: 34, user: \"barney\"&#125;,</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> *  &#123;age: 36, user: \"barney\"&#125;,</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> *  &#123;age: 40, user: \"fred\"&#125;,</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> *  &#123;age: 48, user: \"fred\"&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> * ]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"> */</span></span></pre></td></tr></table></figure>\n\n<h3 id=\"数组降维\"><a href=\"#数组降维\" class=\"headerlink\" title=\"数组降维\"></a>数组降维</h3><ul>\n<li><code>_.flatten(array)</code>: 减少一级 <code>array</code> 嵌套深度。</li>\n<li><code>_.flattenDeep(array)</code>: 将 <code>array</code> 递归为一维数组。</li>\n<li><code>_.flattenDepth(array, [depth=1])</code>: 根据 <code>depth</code> 递归减少 <code>array</code> 的嵌套层级</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// flatten</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.flatten([<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>]], <span class=\"number\">5</span>]]) <span class=\"comment\">// [1, 2, [3, [4]], 5]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// flattenDeep</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.flattenDeep([<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>]], <span class=\"number\">5</span>]]) <span class=\"comment\">// [1, 2, 3, 4, 5]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// flattenDepth</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>]], <span class=\"number\">5</span>]]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.flattenDepth(array, <span class=\"number\">1</span>) <span class=\"comment\">// [1, 2, [3, [4]], 5]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.flattenDepth(array, <span class=\"number\">2</span>) <span class=\"comment\">// [1, 2, 3, [4], 5]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">_.flattenDepth(array, <span class=\"number\">3</span>) <span class=\"comment\">// [1, 2, 3, 4, 5]</span></span></pre></td></tr></table></figure>\n\n<h3 id=\"获取部分元素\"><a href=\"#获取部分元素\" class=\"headerlink\" title=\"获取部分元素\"></a>获取部分元素</h3><ul>\n<li><code>_.initial(array)</code>: 获取数组 <code>array</code> 中除了最后一个元素之外的所有元素（去除数组array中的最后一个元素）。</li>\n<li><code>_.tail(array)</code>: 获取除了 <code>array</code> 数组第一个元素以外的全部元素。</li>\n</ul>"
      }
    ],
    "PostAsset": [],
    "PostCategory": [
      {
        "post_id": "ck68yj5un00029zeybk2586j8",
        "category_id": "ck68yj5uq00049zey4dgafdqn",
        "_id": "ck68yj5uy000e9zey3w74hcph"
      },
      {
        "post_id": "ck68yj5us00069zey3o3p1ox4",
        "category_id": "ck68yj5uq00049zey4dgafdqn",
        "_id": "ck68yj5v5000l9zey4cvn8sxc"
      },
      {
        "post_id": "ck68yj5uo00039zey5s4mbevp",
        "category_id": "ck68yj5uv00099zeyf4005v3u",
        "_id": "ck68yj5v7000p9zey11vxgja9"
      },
      {
        "post_id": "ck68yj5uo00039zey5s4mbevp",
        "category_id": "ck68yj5v5000k9zey82ajcd7f",
        "_id": "ck68yj5v7000q9zeyexotfhdy"
      },
      {
        "post_id": "ck68yj5ux000d9zey5m4p84r1",
        "category_id": "ck68yj5v5000n9zeyba4r23i7",
        "_id": "ck68yj5v7000s9zey2pap67l4"
      },
      {
        "post_id": "ck68yj5v0000g9zey350g56ke",
        "category_id": "ck68yj5uv00099zeyf4005v3u",
        "_id": "ck68yj5v8000t9zeyh3xdgxnr"
      },
      {
        "post_id": "ck68yj5v0000g9zey350g56ke",
        "category_id": "ck68yj5v5000k9zey82ajcd7f",
        "_id": "ck68yj5v8000u9zey2rhu5ad3"
      },
      {
        "post_id": "ck68yj5ut00079zey5i4x9jx6",
        "category_id": "ck68yj5uv00099zeyf4005v3u",
        "_id": "ck68yj5v8000v9zeyd2e683rl"
      },
      {
        "post_id": "ck68yj5ut00079zey5i4x9jx6",
        "category_id": "ck68yj5v5000k9zey82ajcd7f",
        "_id": "ck68yj5v8000w9zey48mpf1k9"
      },
      {
        "post_id": "ck68yj5wu000x9zeyh99n6kmx",
        "category_id": "ck68yj5uv00099zeyf4005v3u",
        "_id": "ck68yj5wx000y9zeyfuzxfsfi"
      },
      {
        "post_id": "ck68yj5wu000x9zeyh99n6kmx",
        "category_id": "ck68yj5v5000k9zey82ajcd7f",
        "_id": "ck68yj5wx000z9zey0tyb4b2v"
      },
      {
        "post_id": "ck68yj5xa00109zey4rw016oq",
        "category_id": "ck68yj5uq00049zey4dgafdqn",
        "_id": "ck68yj5xd00119zeyfc80dkz9"
      }
    ],
    "PostTag": [
      {
        "post_id": "ck68yj5un00029zeybk2586j8",
        "tag_id": "ck68yj5ur00059zey3d1e5n28",
        "_id": "ck68yj5uw000b9zeydem9b7sr"
      },
      {
        "post_id": "ck68yj5ut00079zey5i4x9jx6",
        "tag_id": "ck68yj5uw000a9zeyb7li1y0x",
        "_id": "ck68yj5v3000i9zeyfkaucx2p"
      },
      {
        "post_id": "ck68yj5ux000d9zey5m4p84r1",
        "tag_id": "ck68yj5v2000h9zeyfdkg4tzp",
        "_id": "ck68yj5v5000m9zey6rhldgbv"
      }
    ],
    "Tag": [
      { "name": "SameValueZero", "_id": "ck68yj5ur00059zey3d1e5n28" },
      { "name": "tab-view", "_id": "ck68yj5uw000a9zeyb7li1y0x" },
      { "name": "mobx", "_id": "ck68yj5v2000h9zeyfdkg4tzp" }
    ]
  }
}
